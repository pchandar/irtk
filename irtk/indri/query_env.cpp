/* Generated by Cython 0.23.4 */

#define PY_SSIZE_T_CLEAN
#include "Python.h"
#ifndef Py_PYTHON_H
    #error Python headers needed to compile C extensions, please install development version of Python.
#elif PY_VERSION_HEX < 0x02060000 || (0x03000000 <= PY_VERSION_HEX && PY_VERSION_HEX < 0x03020000)
    #error Cython requires Python 2.6+ or Python 3.2+.
#else
#define CYTHON_ABI "0_23_4"
#include <stddef.h>
#ifndef offsetof
#define offsetof(type, member) ( (size_t) & ((type*)0) -> member )
#endif
#if !defined(WIN32) && !defined(MS_WINDOWS)
  #ifndef __stdcall
    #define __stdcall
  #endif
  #ifndef __cdecl
    #define __cdecl
  #endif
  #ifndef __fastcall
    #define __fastcall
  #endif
#endif
#ifndef DL_IMPORT
  #define DL_IMPORT(t) t
#endif
#ifndef DL_EXPORT
  #define DL_EXPORT(t) t
#endif
#ifndef PY_LONG_LONG
  #define PY_LONG_LONG LONG_LONG
#endif
#ifndef Py_HUGE_VAL
  #define Py_HUGE_VAL HUGE_VAL
#endif
#ifdef PYPY_VERSION
#define CYTHON_COMPILING_IN_PYPY 1
#define CYTHON_COMPILING_IN_CPYTHON 0
#else
#define CYTHON_COMPILING_IN_PYPY 0
#define CYTHON_COMPILING_IN_CPYTHON 1
#endif
#if !defined(CYTHON_USE_PYLONG_INTERNALS) && CYTHON_COMPILING_IN_CPYTHON && PY_VERSION_HEX >= 0x02070000
#define CYTHON_USE_PYLONG_INTERNALS 1
#endif
#if CYTHON_COMPILING_IN_PYPY && PY_VERSION_HEX < 0x02070600 && !defined(Py_OptimizeFlag)
#define Py_OptimizeFlag 0
#endif
#define __PYX_BUILD_PY_SSIZE_T "n"
#define CYTHON_FORMAT_SSIZE_T "z"
#if PY_MAJOR_VERSION < 3
  #define __Pyx_BUILTIN_MODULE_NAME "__builtin__"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a+k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyClass_Type
#else
  #define __Pyx_BUILTIN_MODULE_NAME "builtins"
  #define __Pyx_PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)\
          PyCode_New(a, k, l, s, f, code, c, n, v, fv, cell, fn, name, fline, lnos)
  #define __Pyx_DefaultClassType PyType_Type
#endif
#ifndef Py_TPFLAGS_CHECKTYPES
  #define Py_TPFLAGS_CHECKTYPES 0
#endif
#ifndef Py_TPFLAGS_HAVE_INDEX
  #define Py_TPFLAGS_HAVE_INDEX 0
#endif
#ifndef Py_TPFLAGS_HAVE_NEWBUFFER
  #define Py_TPFLAGS_HAVE_NEWBUFFER 0
#endif
#ifndef Py_TPFLAGS_HAVE_FINALIZE
  #define Py_TPFLAGS_HAVE_FINALIZE 0
#endif
#if PY_VERSION_HEX > 0x03030000 && defined(PyUnicode_KIND)
  #define CYTHON_PEP393_ENABLED 1
  #define __Pyx_PyUnicode_READY(op)       (likely(PyUnicode_IS_READY(op)) ?\
                                              0 : _PyUnicode_Ready((PyObject *)(op)))
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_LENGTH(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) PyUnicode_READ_CHAR(u, i)
  #define __Pyx_PyUnicode_KIND(u)         PyUnicode_KIND(u)
  #define __Pyx_PyUnicode_DATA(u)         PyUnicode_DATA(u)
  #define __Pyx_PyUnicode_READ(k, d, i)   PyUnicode_READ(k, d, i)
#else
  #define CYTHON_PEP393_ENABLED 0
  #define __Pyx_PyUnicode_READY(op)       (0)
  #define __Pyx_PyUnicode_GET_LENGTH(u)   PyUnicode_GET_SIZE(u)
  #define __Pyx_PyUnicode_READ_CHAR(u, i) ((Py_UCS4)(PyUnicode_AS_UNICODE(u)[i]))
  #define __Pyx_PyUnicode_KIND(u)         (sizeof(Py_UNICODE))
  #define __Pyx_PyUnicode_DATA(u)         ((void*)PyUnicode_AS_UNICODE(u))
  #define __Pyx_PyUnicode_READ(k, d, i)   ((void)(k), (Py_UCS4)(((Py_UNICODE*)d)[i]))
#endif
#if CYTHON_COMPILING_IN_PYPY
  #define __Pyx_PyUnicode_Concat(a, b)      PyNumber_Add(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  PyNumber_Add(a, b)
#else
  #define __Pyx_PyUnicode_Concat(a, b)      PyUnicode_Concat(a, b)
  #define __Pyx_PyUnicode_ConcatSafe(a, b)  ((unlikely((a) == Py_None) || unlikely((b) == Py_None)) ?\
      PyNumber_Add(a, b) : __Pyx_PyUnicode_Concat(a, b))
#endif
#if CYTHON_COMPILING_IN_PYPY && !defined(PyUnicode_Contains)
  #define PyUnicode_Contains(u, s)  PySequence_Contains(u, s)
#endif
#define __Pyx_PyString_FormatSafe(a, b)   ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : __Pyx_PyString_Format(a, b))
#define __Pyx_PyUnicode_FormatSafe(a, b)  ((unlikely((a) == Py_None)) ? PyNumber_Remainder(a, b) : PyUnicode_Format(a, b))
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyString_Format(a, b)  PyUnicode_Format(a, b)
#else
  #define __Pyx_PyString_Format(a, b)  PyString_Format(a, b)
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBaseString_Type            PyUnicode_Type
  #define PyStringObject               PyUnicodeObject
  #define PyString_Type                PyUnicode_Type
  #define PyString_Check               PyUnicode_Check
  #define PyString_CheckExact          PyUnicode_CheckExact
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyBaseString_Check(obj) PyUnicode_Check(obj)
  #define __Pyx_PyBaseString_CheckExact(obj) PyUnicode_CheckExact(obj)
#else
  #define __Pyx_PyBaseString_Check(obj) (PyString_Check(obj) || PyUnicode_Check(obj))
  #define __Pyx_PyBaseString_CheckExact(obj) (PyString_CheckExact(obj) || PyUnicode_CheckExact(obj))
#endif
#ifndef PySet_CheckExact
  #define PySet_CheckExact(obj)        (Py_TYPE(obj) == &PySet_Type)
#endif
#define __Pyx_TypeCheck(obj, type) PyObject_TypeCheck(obj, (PyTypeObject *)type)
#if PY_MAJOR_VERSION >= 3
  #define PyIntObject                  PyLongObject
  #define PyInt_Type                   PyLong_Type
  #define PyInt_Check(op)              PyLong_Check(op)
  #define PyInt_CheckExact(op)         PyLong_CheckExact(op)
  #define PyInt_FromString             PyLong_FromString
  #define PyInt_FromUnicode            PyLong_FromUnicode
  #define PyInt_FromLong               PyLong_FromLong
  #define PyInt_FromSize_t             PyLong_FromSize_t
  #define PyInt_FromSsize_t            PyLong_FromSsize_t
  #define PyInt_AsLong                 PyLong_AsLong
  #define PyInt_AS_LONG                PyLong_AS_LONG
  #define PyInt_AsSsize_t              PyLong_AsSsize_t
  #define PyInt_AsUnsignedLongMask     PyLong_AsUnsignedLongMask
  #define PyInt_AsUnsignedLongLongMask PyLong_AsUnsignedLongLongMask
  #define PyNumber_Int                 PyNumber_Long
#endif
#if PY_MAJOR_VERSION >= 3
  #define PyBoolObject                 PyLongObject
#endif
#if PY_MAJOR_VERSION >= 3 && CYTHON_COMPILING_IN_PYPY
  #ifndef PyUnicode_InternFromString
    #define PyUnicode_InternFromString(s) PyUnicode_FromString(s)
  #endif
#endif
#if PY_VERSION_HEX < 0x030200A4
  typedef long Py_hash_t;
  #define __Pyx_PyInt_FromHash_t PyInt_FromLong
  #define __Pyx_PyInt_AsHash_t   PyInt_AsLong
#else
  #define __Pyx_PyInt_FromHash_t PyInt_FromSsize_t
  #define __Pyx_PyInt_AsHash_t   PyInt_AsSsize_t
#endif
#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyMethod_New(func, self, klass) ((self) ? PyMethod_New(func, self) : PyInstanceMethod_New(func))
#else
  #define __Pyx_PyMethod_New(func, self, klass) PyMethod_New(func, self, klass)
#endif
#if PY_VERSION_HEX >= 0x030500B1
#define __Pyx_PyAsyncMethodsStruct PyAsyncMethods
#define __Pyx_PyType_AsAsync(obj) (Py_TYPE(obj)->tp_as_async)
#elif CYTHON_COMPILING_IN_CPYTHON && PY_MAJOR_VERSION >= 3
typedef struct {
    unaryfunc am_await;
    unaryfunc am_aiter;
    unaryfunc am_anext;
} __Pyx_PyAsyncMethodsStruct;
#define __Pyx_PyType_AsAsync(obj) ((__Pyx_PyAsyncMethodsStruct*) (Py_TYPE(obj)->tp_reserved))
#else
#define __Pyx_PyType_AsAsync(obj) NULL
#endif
#ifndef CYTHON_RESTRICT
  #if defined(__GNUC__)
    #define CYTHON_RESTRICT __restrict__
  #elif defined(_MSC_VER) && _MSC_VER >= 1400
    #define CYTHON_RESTRICT __restrict
  #elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define CYTHON_RESTRICT restrict
  #else
    #define CYTHON_RESTRICT
  #endif
#endif
#define __Pyx_void_to_None(void_result) ((void)(void_result), Py_INCREF(Py_None), Py_None)

#ifndef __cplusplus
  #error "Cython files generated with the C++ option must be compiled with a C++ compiler."
#endif
#ifndef CYTHON_INLINE
  #define CYTHON_INLINE inline
#endif
template<typename T>
void __Pyx_call_destructor(T& x) {
    x.~T();
}
template<typename T>
class __Pyx_FakeReference {
  public:
    __Pyx_FakeReference() : ptr(NULL) { }
    __Pyx_FakeReference(const T& ref) : ptr(const_cast<T*>(&ref)) { }
    T *operator->() { return ptr; }
    operator T&() { return *ptr; }
  private:
    T *ptr;
};

#if defined(WIN32) || defined(MS_WINDOWS)
  #define _USE_MATH_DEFINES
#endif
#include <math.h>
#ifdef NAN
#define __PYX_NAN() ((float) NAN)
#else
static CYTHON_INLINE float __PYX_NAN() {
  float value;
  memset(&value, 0xFF, sizeof(value));
  return value;
}
#endif


#if PY_MAJOR_VERSION >= 3
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_TrueDivide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceTrueDivide(x,y)
#else
  #define __Pyx_PyNumber_Divide(x,y)         PyNumber_Divide(x,y)
  #define __Pyx_PyNumber_InPlaceDivide(x,y)  PyNumber_InPlaceDivide(x,y)
#endif

#ifndef __PYX_EXTERN_C
  #ifdef __cplusplus
    #define __PYX_EXTERN_C extern "C"
  #else
    #define __PYX_EXTERN_C extern
  #endif
#endif

#define __PYX_HAVE__irtk__indri__query_env
#define __PYX_HAVE_API__irtk__indri__query_env
#include "string.h"
#include <string>
#include "ios"
#include "new"
#include "stdexcept"
#include "typeinfo"
#include <vector>
#include "lemur/IndexTypes.hpp"
#include "indri/MetadataPair.hpp"
#include "indri/TermExtent.hpp"
#include "indri/greedy_vector"
#include "indri/ParsedDocument.hpp"
#include "indri/ScoredExtentResult.hpp"
#include "indri/DocumentVector.hpp"
#include "indri/QueryEnvironment.hpp"
#ifdef _OPENMP
#include <omp.h>
#endif /* _OPENMP */

#ifdef PYREX_WITHOUT_ASSERTIONS
#define CYTHON_WITHOUT_ASSERTIONS
#endif

#ifndef CYTHON_UNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define CYTHON_UNUSED __attribute__ ((__unused__))
#   else
#     define CYTHON_UNUSED
#   endif
# elif defined(__ICC) || (defined(__INTEL_COMPILER) && !defined(_MSC_VER))
#   define CYTHON_UNUSED __attribute__ ((__unused__))
# else
#   define CYTHON_UNUSED
# endif
#endif
#ifndef CYTHON_NCP_UNUSED
# if CYTHON_COMPILING_IN_CPYTHON
#  define CYTHON_NCP_UNUSED
# else
#  define CYTHON_NCP_UNUSED CYTHON_UNUSED
# endif
#endif
typedef struct {PyObject **p; char *s; const Py_ssize_t n; const char* encoding;
                const char is_unicode; const char is_str; const char intern; } __Pyx_StringTabEntry;

#define __PYX_DEFAULT_STRING_ENCODING_IS_ASCII 1
#define __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT 0
#define __PYX_DEFAULT_STRING_ENCODING "ascii"
#define __Pyx_PyObject_FromString __Pyx_PyStr_FromString
#define __Pyx_PyObject_FromStringAndSize __Pyx_PyStr_FromStringAndSize
#define __Pyx_uchar_cast(c) ((unsigned char)c)
#define __Pyx_long_cast(x) ((long)x)
#define __Pyx_fits_Py_ssize_t(v, type, is_signed)  (\
    (sizeof(type) < sizeof(Py_ssize_t))  ||\
    (sizeof(type) > sizeof(Py_ssize_t) &&\
          likely(v < (type)PY_SSIZE_T_MAX ||\
                 v == (type)PY_SSIZE_T_MAX)  &&\
          (!is_signed || likely(v > (type)PY_SSIZE_T_MIN ||\
                                v == (type)PY_SSIZE_T_MIN)))  ||\
    (sizeof(type) == sizeof(Py_ssize_t) &&\
          (is_signed || likely(v < (type)PY_SSIZE_T_MAX ||\
                               v == (type)PY_SSIZE_T_MAX)))  )
#if defined (__cplusplus) && __cplusplus >= 201103L
    #include <cstdlib>
    #define __Pyx_sst_abs(value) std::abs(value)
#elif SIZEOF_INT >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) abs(value)
#elif SIZEOF_LONG >= SIZEOF_SIZE_T
    #define __Pyx_sst_abs(value) labs(value)
#elif defined (_MSC_VER) && defined (_M_X64)
    #define __Pyx_sst_abs(value) _abs64(value)
#elif defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L
    #define __Pyx_sst_abs(value) llabs(value)
#elif defined (__GNUC__)
    #define __Pyx_sst_abs(value) __builtin_llabs(value)
#else
    #define __Pyx_sst_abs(value) ((value<0) ? -value : value)
#endif
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject*);
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject*, Py_ssize_t* length);
#define __Pyx_PyByteArray_FromString(s) PyByteArray_FromStringAndSize((const char*)s, strlen((const char*)s))
#define __Pyx_PyByteArray_FromStringAndSize(s, l) PyByteArray_FromStringAndSize((const char*)s, l)
#define __Pyx_PyBytes_FromString        PyBytes_FromString
#define __Pyx_PyBytes_FromStringAndSize PyBytes_FromStringAndSize
static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char*);
#if PY_MAJOR_VERSION < 3
    #define __Pyx_PyStr_FromString        __Pyx_PyBytes_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyBytes_FromStringAndSize
#else
    #define __Pyx_PyStr_FromString        __Pyx_PyUnicode_FromString
    #define __Pyx_PyStr_FromStringAndSize __Pyx_PyUnicode_FromStringAndSize
#endif
#define __Pyx_PyObject_AsSString(s)    ((signed char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_AsUString(s)    ((unsigned char*) __Pyx_PyObject_AsString(s))
#define __Pyx_PyObject_FromCString(s)  __Pyx_PyObject_FromString((const char*)s)
#define __Pyx_PyBytes_FromCString(s)   __Pyx_PyBytes_FromString((const char*)s)
#define __Pyx_PyByteArray_FromCString(s)   __Pyx_PyByteArray_FromString((const char*)s)
#define __Pyx_PyStr_FromCString(s)     __Pyx_PyStr_FromString((const char*)s)
#define __Pyx_PyUnicode_FromCString(s) __Pyx_PyUnicode_FromString((const char*)s)
#if PY_MAJOR_VERSION < 3
static CYTHON_INLINE size_t __Pyx_Py_UNICODE_strlen(const Py_UNICODE *u)
{
    const Py_UNICODE *u_end = u;
    while (*u_end++) ;
    return (size_t)(u_end - u - 1);
}
#else
#define __Pyx_Py_UNICODE_strlen Py_UNICODE_strlen
#endif
#define __Pyx_PyUnicode_FromUnicode(u)       PyUnicode_FromUnicode(u, __Pyx_Py_UNICODE_strlen(u))
#define __Pyx_PyUnicode_FromUnicodeAndLength PyUnicode_FromUnicode
#define __Pyx_PyUnicode_AsUnicode            PyUnicode_AsUnicode
#define __Pyx_NewRef(obj) (Py_INCREF(obj), obj)
#define __Pyx_Owned_Py_None(b) __Pyx_NewRef(Py_None)
#define __Pyx_PyBool_FromLong(b) ((b) ? __Pyx_NewRef(Py_True) : __Pyx_NewRef(Py_False))
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject*);
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x);
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject*);
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t);
#if CYTHON_COMPILING_IN_CPYTHON
#define __pyx_PyFloat_AsDouble(x) (PyFloat_CheckExact(x) ? PyFloat_AS_DOUBLE(x) : PyFloat_AsDouble(x))
#else
#define __pyx_PyFloat_AsDouble(x) PyFloat_AsDouble(x)
#endif
#define __pyx_PyFloat_AsFloat(x) ((float) __pyx_PyFloat_AsDouble(x))
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
static int __Pyx_sys_getdefaultencoding_not_ascii;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    PyObject* ascii_chars_u = NULL;
    PyObject* ascii_chars_b = NULL;
    const char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    if (strcmp(default_encoding_c, "ascii") == 0) {
        __Pyx_sys_getdefaultencoding_not_ascii = 0;
    } else {
        char ascii_chars[128];
        int c;
        for (c = 0; c < 128; c++) {
            ascii_chars[c] = c;
        }
        __Pyx_sys_getdefaultencoding_not_ascii = 1;
        ascii_chars_u = PyUnicode_DecodeASCII(ascii_chars, 128, NULL);
        if (!ascii_chars_u) goto bad;
        ascii_chars_b = PyUnicode_AsEncodedString(ascii_chars_u, default_encoding_c, NULL);
        if (!ascii_chars_b || !PyBytes_Check(ascii_chars_b) || memcmp(ascii_chars, PyBytes_AS_STRING(ascii_chars_b), 128) != 0) {
            PyErr_Format(
                PyExc_ValueError,
                "This module compiled with c_string_encoding=ascii, but default encoding '%.200s' is not a superset of ascii.",
                default_encoding_c);
            goto bad;
        }
        Py_DECREF(ascii_chars_u);
        Py_DECREF(ascii_chars_b);
    }
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    Py_XDECREF(ascii_chars_u);
    Py_XDECREF(ascii_chars_b);
    return -1;
}
#endif
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT && PY_MAJOR_VERSION >= 3
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_DecodeUTF8(c_str, size, NULL)
#else
#define __Pyx_PyUnicode_FromStringAndSize(c_str, size) PyUnicode_Decode(c_str, size, __PYX_DEFAULT_STRING_ENCODING, NULL)
#if __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT
static char* __PYX_DEFAULT_STRING_ENCODING;
static int __Pyx_init_sys_getdefaultencoding_params(void) {
    PyObject* sys;
    PyObject* default_encoding = NULL;
    char* default_encoding_c;
    sys = PyImport_ImportModule("sys");
    if (!sys) goto bad;
    default_encoding = PyObject_CallMethod(sys, (char*) (const char*) "getdefaultencoding", NULL);
    Py_DECREF(sys);
    if (!default_encoding) goto bad;
    default_encoding_c = PyBytes_AsString(default_encoding);
    if (!default_encoding_c) goto bad;
    __PYX_DEFAULT_STRING_ENCODING = (char*) malloc(strlen(default_encoding_c));
    if (!__PYX_DEFAULT_STRING_ENCODING) goto bad;
    strcpy(__PYX_DEFAULT_STRING_ENCODING, default_encoding_c);
    Py_DECREF(default_encoding);
    return 0;
bad:
    Py_XDECREF(default_encoding);
    return -1;
}
#endif
#endif


/* Test for GCC > 2.95 */
#if defined(__GNUC__)     && (__GNUC__ > 2 || (__GNUC__ == 2 && (__GNUC_MINOR__ > 95)))
  #define likely(x)   __builtin_expect(!!(x), 1)
  #define unlikely(x) __builtin_expect(!!(x), 0)
#else /* !__GNUC__ or GCC < 2.95 */
  #define likely(x)   (x)
  #define unlikely(x) (x)
#endif /* __GNUC__ */

static PyObject *__pyx_m;
static PyObject *__pyx_d;
static PyObject *__pyx_b;
static PyObject *__pyx_empty_tuple;
static PyObject *__pyx_empty_bytes;
static int __pyx_lineno;
static int __pyx_clineno = 0;
static const char * __pyx_cfilenm= __FILE__;
static const char *__pyx_filename;


static const char *__pyx_f[] = {
  "irtk/indri/query_env.pxd",
  "irtk/indri/query_env.pyx",
  "stringsource",
};

/*--- Type declarations ---*/
struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment;
struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector;
struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults;
struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument;
struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent;

/* "irtk/indri/query_env.pyx":13
 * from ..eval.rankedlist import TRECResult
 * 
 * cdef class PyQueryEnvironment:             # <<<<<<<<<<<<<<
 * 
 *     cdef QueryEnvironment *_thisptr
 */
struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment {
  PyObject_HEAD
  struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_vtab;
  indri::api::QueryEnvironment *_thisptr;
};


/* "irtk/indri/query_env.pyx":205
 *         return False
 * 
 * cdef class PyDocumentVector:             # <<<<<<<<<<<<<<
 *     cdef DocumentVector*_thisptr
 * 
 */
struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector {
  PyObject_HEAD
  struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector *__pyx_vtab;
  indri::api::DocumentVector *_thisptr;
};


/* "irtk/indri/query_env.pyx":257
 *         return False  # propagate exceptions
 * 
 * cdef class PyIndriResults:             # <<<<<<<<<<<<<<
 *     cdef vector[QueryResult] results
 * 
 */
struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults {
  PyObject_HEAD
  std::vector<indri::api::QueryResult>  results;
};


/* "irtk/indri/query_env.pyx":268
 *         return output
 * 
 * cdef class PyParsedDocument:             # <<<<<<<<<<<<<<
 *     cdef ParsedDocument*_thisptr
 *     @staticmethod
 */
struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument {
  PyObject_HEAD
  struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *__pyx_vtab;
  indri::api::ParsedDocument *_thisptr;
};


/* "irtk/indri/query_env.pyx":341
 *         return False  # propagate exceptions
 * 
 * cdef class PyTermExtent:             # <<<<<<<<<<<<<<
 *     cdef TermExtent*_thisptr
 * 
 */
struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent {
  PyObject_HEAD
  struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyTermExtent *__pyx_vtab;
  indri::parse::TermExtent *_thisptr;
};



/* "irtk/indri/query_env.pyx":13
 * from ..eval.rankedlist import TRECResult
 * 
 * cdef class PyQueryEnvironment:             # <<<<<<<<<<<<<<
 * 
 *     cdef QueryEnvironment *_thisptr
 */

struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment {
  int (*_check_alive)(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *);
};
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_vtabptr_4irtk_5indri_9query_env_PyQueryEnvironment;


/* "irtk/indri/query_env.pyx":205
 *         return False
 * 
 * cdef class PyDocumentVector:             # <<<<<<<<<<<<<<
 *     cdef DocumentVector*_thisptr
 * 
 */

struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector {
  PyObject *(*init_vector)(indri::api::DocumentVector *);
  int (*_check_alive)(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *);
};
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector *__pyx_vtabptr_4irtk_5indri_9query_env_PyDocumentVector;


/* "irtk/indri/query_env.pyx":268
 *         return output
 * 
 * cdef class PyParsedDocument:             # <<<<<<<<<<<<<<
 *     cdef ParsedDocument*_thisptr
 *     @staticmethod
 */

struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument {
  struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *(*init_vector)(indri::api::ParsedDocument *);
  int (*_check_alive)(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *);
};
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *__pyx_vtabptr_4irtk_5indri_9query_env_PyParsedDocument;


/* "irtk/indri/query_env.pyx":341
 *         return False  # propagate exceptions
 * 
 * cdef class PyTermExtent:             # <<<<<<<<<<<<<<
 *     cdef TermExtent*_thisptr
 * 
 */

struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyTermExtent {
  struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *(*init_vector)(indri::parse::TermExtent *);
  int (*_check_alive)(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *);
};
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyTermExtent *__pyx_vtabptr_4irtk_5indri_9query_env_PyTermExtent;

/* --- Runtime support code (head) --- */
#ifndef CYTHON_REFNANNY
  #define CYTHON_REFNANNY 0
#endif
#if CYTHON_REFNANNY
  typedef struct {
    void (*INCREF)(void*, PyObject*, int);
    void (*DECREF)(void*, PyObject*, int);
    void (*GOTREF)(void*, PyObject*, int);
    void (*GIVEREF)(void*, PyObject*, int);
    void* (*SetupContext)(const char*, int, const char*);
    void (*FinishContext)(void**);
  } __Pyx_RefNannyAPIStruct;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNanny = NULL;
  static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname);
  #define __Pyx_RefNannyDeclarations void *__pyx_refnanny = NULL;
#ifdef WITH_THREAD
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          if (acquire_gil) {\
              PyGILState_STATE __pyx_gilstate_save = PyGILState_Ensure();\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
              PyGILState_Release(__pyx_gilstate_save);\
          } else {\
              __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__);\
          }
#else
  #define __Pyx_RefNannySetupContext(name, acquire_gil)\
          __pyx_refnanny = __Pyx_RefNanny->SetupContext((name), __LINE__, __FILE__)
#endif
  #define __Pyx_RefNannyFinishContext()\
          __Pyx_RefNanny->FinishContext(&__pyx_refnanny)
  #define __Pyx_INCREF(r)  __Pyx_RefNanny->INCREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_DECREF(r)  __Pyx_RefNanny->DECREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GOTREF(r)  __Pyx_RefNanny->GOTREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_GIVEREF(r) __Pyx_RefNanny->GIVEREF(__pyx_refnanny, (PyObject *)(r), __LINE__)
  #define __Pyx_XINCREF(r)  do { if((r) != NULL) {__Pyx_INCREF(r); }} while(0)
  #define __Pyx_XDECREF(r)  do { if((r) != NULL) {__Pyx_DECREF(r); }} while(0)
  #define __Pyx_XGOTREF(r)  do { if((r) != NULL) {__Pyx_GOTREF(r); }} while(0)
  #define __Pyx_XGIVEREF(r) do { if((r) != NULL) {__Pyx_GIVEREF(r);}} while(0)
#else
  #define __Pyx_RefNannyDeclarations
  #define __Pyx_RefNannySetupContext(name, acquire_gil)
  #define __Pyx_RefNannyFinishContext()
  #define __Pyx_INCREF(r) Py_INCREF(r)
  #define __Pyx_DECREF(r) Py_DECREF(r)
  #define __Pyx_GOTREF(r)
  #define __Pyx_GIVEREF(r)
  #define __Pyx_XINCREF(r) Py_XINCREF(r)
  #define __Pyx_XDECREF(r) Py_XDECREF(r)
  #define __Pyx_XGOTREF(r)
  #define __Pyx_XGIVEREF(r)
#endif
#define __Pyx_XDECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_XDECREF(tmp);\
    } while (0)
#define __Pyx_DECREF_SET(r, v) do {\
        PyObject *tmp = (PyObject *) r;\
        r = v; __Pyx_DECREF(tmp);\
    } while (0)
#define __Pyx_CLEAR(r)    do { PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);} while(0)
#define __Pyx_XCLEAR(r)   do { if((r) != NULL) {PyObject* tmp = ((PyObject*)(r)); r = NULL; __Pyx_DECREF(tmp);}} while(0)

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_GetAttrStr(PyObject* obj, PyObject* attr_name) {
    PyTypeObject* tp = Py_TYPE(obj);
    if (likely(tp->tp_getattro))
        return tp->tp_getattro(obj, attr_name);
#if PY_MAJOR_VERSION < 3
    if (likely(tp->tp_getattr))
        return tp->tp_getattr(obj, PyString_AS_STRING(attr_name));
#endif
    return PyObject_GetAttr(obj, attr_name);
}
#else
#define __Pyx_PyObject_GetAttrStr(o,n) PyObject_GetAttr(o,n)
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name);

static void __Pyx_RaiseArgtupleInvalid(const char* func_name, int exact,
    Py_ssize_t num_min, Py_ssize_t num_max, Py_ssize_t num_found);

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(PyObject *kwdict, const char* function_name, int kw_allowed);

#ifndef CYTHON_PROFILE
  #define CYTHON_PROFILE 1
#endif
#ifndef CYTHON_TRACE_NOGIL
  #define CYTHON_TRACE_NOGIL 0
#else
  #if CYTHON_TRACE_NOGIL && !defined(CYTHON_TRACE)
    #define CYTHON_TRACE 1
  #endif
#endif
#ifndef CYTHON_TRACE
  #define CYTHON_TRACE 0
#endif
#if CYTHON_TRACE
  #undef CYTHON_PROFILE_REUSE_FRAME
#endif
#ifndef CYTHON_PROFILE_REUSE_FRAME
  #define CYTHON_PROFILE_REUSE_FRAME 0
#endif
#if CYTHON_PROFILE || CYTHON_TRACE
  #include "compile.h"
  #include "frameobject.h"
  #include "traceback.h"
  #if CYTHON_PROFILE_REUSE_FRAME
    #define CYTHON_FRAME_MODIFIER static
    #define CYTHON_FRAME_DEL(frame)
  #else
    #define CYTHON_FRAME_MODIFIER
    #define CYTHON_FRAME_DEL(frame) Py_CLEAR(frame)
  #endif
  #define __Pyx_TraceDeclarations\
  static PyCodeObject *__pyx_frame_code = NULL;\
  CYTHON_FRAME_MODIFIER PyFrameObject *__pyx_frame = NULL;\
  int __Pyx_use_tracing = 0;
  #define __Pyx_TraceFrameInit(codeobj)\
  if (codeobj) __pyx_frame_code = (PyCodeObject*) codeobj;
  #ifdef WITH_THREAD
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  if (nogil) {\
      if (CYTHON_TRACE_NOGIL) {\
          PyThreadState *tstate;\
          PyGILState_STATE state = PyGILState_Ensure();\
          tstate = PyThreadState_GET();\
          if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
                  (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
              __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          }\
          PyGILState_Release(state);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  } else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #else
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)\
  {   PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing) && !tstate->tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          __Pyx_use_tracing = __Pyx_TraceSetupAndCall(&__pyx_frame_code, &__pyx_frame, funcname, srcfile, firstlineno);\
          if (unlikely(__Pyx_use_tracing < 0)) goto_error;\
      }\
  }
  #endif
  #define __Pyx_TraceException()\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (tstate->use_tracing &&\
              (tstate->c_profilefunc || (CYTHON_TRACE && tstate->c_tracefunc))) {\
          tstate->tracing++;\
          tstate->use_tracing = 0;\
          PyObject *exc_info = __Pyx_GetExceptionTuple();\
          if (exc_info) {\
              if (CYTHON_TRACE && tstate->c_tracefunc)\
                  tstate->c_tracefunc(\
                      tstate->c_traceobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              tstate->c_profilefunc(\
                  tstate->c_profileobj, __pyx_frame, PyTrace_EXCEPTION, exc_info);\
              Py_DECREF(exc_info);\
          }\
          tstate->use_tracing = 1;\
          tstate->tracing--;\
      }\
  }
  static void __Pyx_call_return_trace_func(PyThreadState *tstate, PyFrameObject *frame, PyObject *result) {
      PyObject *type, *value, *traceback;
      PyErr_Fetch(&type, &value, &traceback);
      tstate->tracing++;
      tstate->use_tracing = 0;
      if (CYTHON_TRACE && tstate->c_tracefunc)
          tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_RETURN, result);
      if (tstate->c_profilefunc)
          tstate->c_profilefunc(tstate->c_profileobj, frame, PyTrace_RETURN, result);
      CYTHON_FRAME_DEL(frame);
      tstate->use_tracing = 1;
      tstate->tracing--;
      PyErr_Restore(type, value, traceback);
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = PyThreadState_GET();\
              if (tstate->use_tracing) {\
                  __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
              }\
              PyGILState_Release(state);\
          }\
      } else {\
          PyThreadState* tstate = PyThreadState_GET();\
          if (tstate->use_tracing) {\
              __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
          }\
      }\
  }
  #else
  #define __Pyx_TraceReturn(result, nogil)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (tstate->use_tracing) {\
          __Pyx_call_return_trace_func(tstate, __pyx_frame, (PyObject*)result);\
      }\
  }
  #endif
  static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno);
  static int __Pyx_TraceSetupAndCall(PyCodeObject** code, PyFrameObject** frame, const char *funcname, const char *srcfile, int firstlineno);
#else
  #define __Pyx_TraceDeclarations
  #define __Pyx_TraceFrameInit(codeobj)
  #define __Pyx_TraceCall(funcname, srcfile, firstlineno, nogil, goto_error)   if (1); else goto_error;
  #define __Pyx_TraceException()
  #define __Pyx_TraceReturn(result, nogil)
#endif
#if CYTHON_TRACE
  static int __Pyx_call_line_trace_func(PyThreadState *tstate, PyFrameObject *frame, int lineno) {
      int ret;
      PyObject *type, *value, *traceback;
      PyErr_Fetch(&type, &value, &traceback);
      frame->f_lineno = lineno;
      tstate->tracing++;
      tstate->use_tracing = 0;
      ret = tstate->c_tracefunc(tstate->c_traceobj, frame, PyTrace_LINE, NULL);
      tstate->use_tracing = 1;
      tstate->tracing--;
      if (likely(!ret)) {
          PyErr_Restore(type, value, traceback);
      } else {
          Py_XDECREF(type);
          Py_XDECREF(value);
          Py_XDECREF(traceback);
      }
      return ret;
  }
  #ifdef WITH_THREAD
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      if (nogil) {\
          if (CYTHON_TRACE_NOGIL) {\
              int ret = 0;\
              PyThreadState *tstate;\
              PyGILState_STATE state = PyGILState_Ensure();\
              tstate = PyThreadState_GET();\
              if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
                  ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              }\
              PyGILState_Release(state);\
              if (unlikely(ret)) goto_error;\
          }\
      } else {\
          PyThreadState* tstate = PyThreadState_GET();\
          if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
              int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
              if (unlikely(ret)) goto_error;\
          }\
      }\
  }
  #else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)\
  if (likely(!__Pyx_use_tracing)); else {\
      PyThreadState* tstate = PyThreadState_GET();\
      if (unlikely(tstate->use_tracing && tstate->c_tracefunc)) {\
          int ret = __Pyx_call_line_trace_func(tstate, __pyx_frame, lineno);\
          if (unlikely(ret)) goto_error;\
      }\
  }
  #endif
#else
  #define __Pyx_TraceLine(lineno, nogil, goto_error)   if (1); else goto_error;
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb);
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_WriteUnraisable(const char *name, int clineno,
                                  int lineno, const char *filename,
                                  int full_traceback, int nogil);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw);
#else
#define __Pyx_PyObject_Call(func, arg, kw) PyObject_Call(func, arg, kw)
#endif

static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause);

static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact);

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb);
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb);

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb);

static void __Pyx_RaiseDoubleKeywordsError(const char* func_name, PyObject* kw_name);

static int __Pyx_ParseOptionalKeywords(PyObject *kwds, PyObject **argnames[],\
    PyObject *kwds2, PyObject *values[], Py_ssize_t num_pos_args,\
    const char* function_name);

#include <string.h>

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals);

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals);

#if PY_MAJOR_VERSION >= 3
#define __Pyx_PyString_Equals __Pyx_PyUnicode_Equals
#else
#define __Pyx_PyString_Equals __Pyx_PyBytes_Equals
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_PyList_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len) & likely(len > (L->allocated >> 1))) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_PyList_Append(L,x) PyList_Append(L,x)
#endif

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name);

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg);
#endif

static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg);

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, long intval, int inplace);
#else
#define __Pyx_PyInt_AddObjC(op1, op2, intval, inplace)\
    (inplace ? PyNumber_InPlaceAdd(op1, op2) : PyNumber_Add(op1, op2))
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE int __Pyx_ListComp_Append(PyObject* list, PyObject* x) {
    PyListObject* L = (PyListObject*) list;
    Py_ssize_t len = Py_SIZE(list);
    if (likely(L->allocated > len)) {
        Py_INCREF(x);
        PyList_SET_ITEM(list, len, x);
        Py_SIZE(list) = len+1;
        return 0;
    }
    return PyList_Append(list, x);
}
#else
#define __Pyx_ListComp_Append(L,x) PyList_Append(L,x)
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable);

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level);

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name);

typedef struct {
    int code_line;
    PyCodeObject* code_object;
} __Pyx_CodeObjectCacheEntry;
struct __Pyx_CodeObjectCache {
    int count;
    int max_count;
    __Pyx_CodeObjectCacheEntry* entries;
};
static struct __Pyx_CodeObjectCache __pyx_code_cache = {0,0,NULL};
static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line);
static PyCodeObject *__pyx_find_code_object(int code_line);
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object);

static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename);

#include <new>

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *);

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *);

static CYTHON_INLINE lemur::api::TERMID_T __Pyx_PyInt_As_lemur_3a__3a_api_3a__3a_TERMID_T(PyObject *);

#ifndef __Pyx_CppExn2PyErr
#include <new>
#include <typeinfo>
#include <stdexcept>
#include <ios>
static void __Pyx_CppExn2PyErr() {
  try {
    if (PyErr_Occurred())
      ; // let the latest Python exn pass through and ignore the current one
    else
      throw;
  } catch (const std::bad_alloc& exn) {
    PyErr_SetString(PyExc_MemoryError, exn.what());
  } catch (const std::bad_cast& exn) {
    PyErr_SetString(PyExc_TypeError, exn.what());
  } catch (const std::domain_error& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::invalid_argument& exn) {
    PyErr_SetString(PyExc_ValueError, exn.what());
  } catch (const std::ios_base::failure& exn) {
    PyErr_SetString(PyExc_IOError, exn.what());
  } catch (const std::out_of_range& exn) {
    PyErr_SetString(PyExc_IndexError, exn.what());
  } catch (const std::overflow_error& exn) {
    PyErr_SetString(PyExc_OverflowError, exn.what());
  } catch (const std::range_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::underflow_error& exn) {
    PyErr_SetString(PyExc_ArithmeticError, exn.what());
  } catch (const std::exception& exn) {
    PyErr_SetString(PyExc_RuntimeError, exn.what());
  }
  catch (...)
  {
    PyErr_SetString(PyExc_RuntimeError, "Unknown exception");
  }
}
#endif

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_lemur_3a__3a_api_3a__3a_TERMID_T(lemur::api::TERMID_T value);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value);

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *);

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value);

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *);

static int __Pyx_check_binary_version(void);

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t);

static int __pyx_f_4irtk_5indri_9query_env_18PyQueryEnvironment__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self); /* proto*/
static PyObject *__pyx_f_4irtk_5indri_9query_env_16PyDocumentVector_init_vector(indri::api::DocumentVector *__pyx_v_ptr); /* proto*/
static int __pyx_f_4irtk_5indri_9query_env_16PyDocumentVector__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto*/
static struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_f_4irtk_5indri_9query_env_16PyParsedDocument_init_vector(indri::api::ParsedDocument *__pyx_v_ptr); /* proto*/
static int __pyx_f_4irtk_5indri_9query_env_16PyParsedDocument__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto*/
static struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_f_4irtk_5indri_9query_env_12PyTermExtent_init_vector(indri::parse::TermExtent *__pyx_v_ptr); /* proto*/
static int __pyx_f_4irtk_5indri_9query_env_12PyTermExtent__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self); /* proto*/

/* Module declarations from 'libc.string' */

/* Module declarations from 'libcpp.string' */

/* Module declarations from 'libcpp.vector' */

/* Module declarations from 'libcpp' */

/* Module declarations from 'irtk.indri.types' */

/* Module declarations from 'irtk.indri.query_env' */
static PyTypeObject *__pyx_ptype_4irtk_5indri_9query_env_PyQueryEnvironment = 0;
static PyTypeObject *__pyx_ptype_4irtk_5indri_9query_env_PyDocumentVector = 0;
static PyTypeObject *__pyx_ptype_4irtk_5indri_9query_env_PyIndriResults = 0;
static PyTypeObject *__pyx_ptype_4irtk_5indri_9query_env_PyParsedDocument = 0;
static PyTypeObject *__pyx_ptype_4irtk_5indri_9query_env_PyTermExtent = 0;
static std::string __pyx_convert_string_from_py_std__in_string(PyObject *); /*proto*/
static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *); /*proto*/
static std::vector<lemur::api::DOCID_T>  __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(PyObject *); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &); /*proto*/
static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T(const std::vector<lemur::api::DOCID_T>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &); /*proto*/
static PyObject *__pyx_convert_vector_to_py_char___2a_(const std::vector<char *>  &); /*proto*/
#define __Pyx_MODULE_NAME "irtk.indri.query_env"
int __pyx_module_is_main_irtk__indri__query_env = 0;

/* Implementation of 'irtk.indri.query_env' */
static PyObject *__pyx_builtin_RuntimeError;
static PyObject *__pyx_builtin_range;
static char __pyx_k_1[] = "1";
static char __pyx_k__3[] = "";
static char __pyx_k_qid[] = "qid";
static char __pyx_k_main[] = "__main__";
static char __pyx_k_term[] = "term";
static char __pyx_k_test[] = "__test__";
static char __pyx_k_docid[] = "docid";
static char __pyx_k_docno[] = "docno";
static char __pyx_k_field[] = "field";
static char __pyx_k_indri[] = "indri";
static char __pyx_k_query[] = "query";
static char __pyx_k_range[] = "range";
static char __pyx_k_runid[] = "runid";
static char __pyx_k_docids[] = "docids";
static char __pyx_k_exc_tb[] = "exc_tb";
static char __pyx_k_exc_tp[] = "exc_tp";
static char __pyx_k_import[] = "__import__";
static char __pyx_k_exc_val[] = "exc_val";
static char __pyx_k_metadata[] = "metadata";
static char __pyx_k_TRECResult[] = "TRECResult";
static char __pyx_k_add_result[] = "add_result";
static char __pyx_k_field_name[] = "field_name";
static char __pyx_k_pyx_vtable[] = "__pyx_vtable__";
static char __pyx_k_query_type[] = "query_type";
static char __pyx_k_RuntimeError[] = "RuntimeError";
static char __pyx_k_result_count[] = "result_count";
static char __pyx_k_document_name[] = "document_name";
static char __pyx_k_eval_rankedlist[] = "eval.rankedlist";
static char __pyx_k_Wrapped_C_object_is_deleted[] = "Wrapped C++ object is deleted";
static char __pyx_k_Couldn_t_understand_this_query[] = "Couldn't understand this query";
static char __pyx_k_Unable_to_add_index_Check_index[] = "Unable to add index. Check index path";
static PyObject *__pyx_kp_b_1;
static PyObject *__pyx_kp_s_Couldn_t_understand_this_query;
static PyObject *__pyx_n_s_RuntimeError;
static PyObject *__pyx_n_s_TRECResult;
static PyObject *__pyx_kp_s_Unable_to_add_index_Check_index;
static PyObject *__pyx_kp_s_Wrapped_C_object_is_deleted;
static PyObject *__pyx_kp_b__3;
static PyObject *__pyx_kp_s__3;
static PyObject *__pyx_n_s_add_result;
static PyObject *__pyx_n_s_docid;
static PyObject *__pyx_n_s_docids;
static PyObject *__pyx_n_b_docno;
static PyObject *__pyx_n_s_document_name;
static PyObject *__pyx_n_s_eval_rankedlist;
static PyObject *__pyx_n_s_exc_tb;
static PyObject *__pyx_n_s_exc_tp;
static PyObject *__pyx_n_s_exc_val;
static PyObject *__pyx_n_s_field;
static PyObject *__pyx_n_s_field_name;
static PyObject *__pyx_n_s_import;
static PyObject *__pyx_n_s_indri;
static PyObject *__pyx_n_s_main;
static PyObject *__pyx_n_s_metadata;
static PyObject *__pyx_n_s_pyx_vtable;
static PyObject *__pyx_n_s_qid;
static PyObject *__pyx_n_s_query;
static PyObject *__pyx_n_s_query_type;
static PyObject *__pyx_n_s_range;
static PyObject *__pyx_n_s_result_count;
static PyObject *__pyx_n_s_runid;
static PyObject *__pyx_n_s_term;
static PyObject *__pyx_n_s_test;
static int __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment___cinit__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_2__init__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self); /* proto */
static void __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_4__dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_6add_server(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_server_name); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_8add_index(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_index_name); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_10remove_server(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_server_name); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_12remove_index(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_index); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_14close(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_16document_name(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_docid); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_18get_documentids(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::vector<std::string>  __pyx_v_document_names); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_20document_metadata(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_docid, PyObject *__pyx_v_field_name); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_22document_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_24document_expression_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term, PyObject *__pyx_v_query_type); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_26document_stem_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_28document_length(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PY_LONG_LONG __pyx_v_term); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_30document_vectors(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::vector<lemur::api::DOCID_T>  __pyx_v_docids); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_32documents(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::vector<lemur::api::DOCID_T>  __pyx_v_docids); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_34run_indri_query(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_query, int __pyx_v_result_count, std::vector<lemur::api::DOCID_T>  __pyx_v_docids, std::vector<std::string>  __pyx_v_metadata); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_36run_trec_query(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_query, int __pyx_v_result_count, PyObject *__pyx_v_runid, std::string __pyx_v_qid); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_38expression_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term, PyObject *__pyx_v_query_type); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_40stem_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_42stem_field_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term, std::string __pyx_v_field); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_44stem_term(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_46term_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_48term_field_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term, std::string __pyx_v_field); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_50term_count_unique(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_52set_memory(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_size); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_54set_baseline(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_baseline); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_56set_single_background_model(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, bool __pyx_v_is_single_background_model); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_58set_max_wildcard_terms(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_max_terms); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_60__enter__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_62__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector___cinit__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_2__init__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto */
static void __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_4__dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_6stems(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_8positions(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_10fields(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_12__enter__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_14__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_14PyIndriResults_results_iterator(struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument___cinit__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_2__init__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static void __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4__dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4text___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4text_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10textLength___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_7content___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_7content_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_6get_content(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_8positions(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10terms(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_12__enter__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_14__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_5begin___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_3end___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self); /* proto */
static void __pyx_pf_4irtk_5indri_9query_env_12PyTermExtent___dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self); /* proto */
static PyObject *__pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_2__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb); /* proto */
static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyQueryEnvironment(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyDocumentVector(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyIndriResults(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyParsedDocument(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyTermExtent(PyTypeObject *t, PyObject *a, PyObject *k); /*proto*/
static PyObject *__pyx_int_1;
static std::vector<lemur::api::DOCID_T>  __pyx_k__5;
static std::vector<std::string>  __pyx_k__6;
static std::string __pyx_k__7;
static std::string __pyx_k__8;
static PyObject *__pyx_tuple_;
static PyObject *__pyx_tuple__2;
static PyObject *__pyx_tuple__4;
static PyObject *__pyx_tuple__9;
static PyObject *__pyx_tuple__10;
static PyObject *__pyx_tuple__11;

/* "irtk/indri/query_env.pyx":17
 *     cdef QueryEnvironment *_thisptr
 * 
 *     def __cinit__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment___cinit__(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment___cinit__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 17, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 17; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":18
 * 
 *     def __cinit__(PyQueryEnvironment self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(PyQueryEnvironment self):
 */
  __Pyx_TraceLine(18,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 18; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_thisptr = NULL;

  /* "irtk/indri/query_env.pyx":17
 *     cdef QueryEnvironment *_thisptr
 * 
 *     def __cinit__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":20
 *         self._thisptr = NULL
 * 
 *     def __init__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._thisptr = new QueryEnvironment()
 * 
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_2__init__(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_2__init__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  indri::api::QueryEnvironment *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[1], 20, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 20; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":21
 * 
 *     def __init__(PyQueryEnvironment self):
 *         self._thisptr = new QueryEnvironment()             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(PyQueryEnvironment self):
 */
  __Pyx_TraceLine(21,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  try {
    __pyx_t_1 = new indri::api::QueryEnvironment();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 21; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_self->_thisptr = __pyx_t_1;

  /* "irtk/indri/query_env.pyx":20
 *         self._thisptr = NULL
 * 
 *     def __init__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._thisptr = new QueryEnvironment()
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":23
 *         self._thisptr = new QueryEnvironment()
 * 
 *     def __dealloc__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static void __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_4__dealloc__(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_4__dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[1], 23, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 23; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":24
 * 
 *     def __dealloc__(PyQueryEnvironment self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  __Pyx_TraceLine(24,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 24; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":25
 *     def __dealloc__(PyQueryEnvironment self):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 * 
 *     cdef int _check_alive(PyQueryEnvironment self) except -1:
 */
    __Pyx_TraceLine(25,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 25; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    delete __pyx_v_self->_thisptr;

    /* "irtk/indri/query_env.pyx":24
 * 
 *     def __dealloc__(PyQueryEnvironment self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  }

  /* "irtk/indri/query_env.pyx":23
 *         self._thisptr = new QueryEnvironment()
 * 
 *     def __dealloc__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("irtk.indri.query_env.PyQueryEnvironment.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "irtk/indri/query_env.pyx":27
 *             del self._thisptr
 * 
 *     cdef int _check_alive(PyQueryEnvironment self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

static int __pyx_f_4irtk_5indri_9query_env_18PyQueryEnvironment__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_alive", 0);
  __Pyx_TraceCall("_check_alive", __pyx_f[1], 27, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 27; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":28
 * 
 *     cdef int _check_alive(PyQueryEnvironment self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  __Pyx_TraceLine(28,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 28; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":29
 *     cdef int _check_alive(PyQueryEnvironment self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
    __Pyx_TraceLine(29,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple_, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "irtk/indri/query_env.pyx":28
 * 
 *     cdef int _check_alive(PyQueryEnvironment self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  }

  /* "irtk/indri/query_env.pyx":31
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     def add_server(PyQueryEnvironment self, str server_name):
 */
  __Pyx_TraceLine(31,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "irtk/indri/query_env.pyx":27
 *             del self._thisptr
 * 
 *     cdef int _check_alive(PyQueryEnvironment self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment._check_alive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":33
 *             return 0
 * 
 *     def add_server(PyQueryEnvironment self, str server_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.addServer(server_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_7add_server(PyObject *__pyx_v_self, PyObject *__pyx_v_server_name); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_6add_server[] = "PyQueryEnvironment.add_server(self, str server_name)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_7add_server(PyObject *__pyx_v_self, PyObject *__pyx_v_server_name) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_server (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_server_name), (&PyString_Type), 1, "server_name", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_6add_server(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((PyObject*)__pyx_v_server_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_6add_server(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_server_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_server", 0);
  __Pyx_TraceCall("add_server", __pyx_f[1], 33, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 33; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":34
 * 
 *     def add_server(PyQueryEnvironment self, str server_name):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.addServer(server_name)
 * 
 */
  __Pyx_TraceLine(34,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 34; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":35
 *     def add_server(PyQueryEnvironment self, str server_name):
 *         self._check_alive()
 *         return self._thisptr.addServer(server_name)             # <<<<<<<<<<<<<<
 * 
 *     def add_index(PyQueryEnvironment self, str index_name):
 */
  __Pyx_TraceLine(35,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_server_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_void_to_None(__pyx_v_self->_thisptr->addServer(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 35; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":33
 *             return 0
 * 
 *     def add_server(PyQueryEnvironment self, str server_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.addServer(server_name)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.add_server", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":37
 *         return self._thisptr.addServer(server_name)
 * 
 *     def add_index(PyQueryEnvironment self, str index_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_9add_index(PyObject *__pyx_v_self, PyObject *__pyx_v_index_name); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_8add_index[] = "PyQueryEnvironment.add_index(self, str index_name)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_9add_index(PyObject *__pyx_v_self, PyObject *__pyx_v_index_name) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("add_index (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index_name), (&PyString_Type), 1, "index_name", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_8add_index(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((PyObject*)__pyx_v_index_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_8add_index(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_index_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("add_index", 0);
  __Pyx_TraceCall("add_index", __pyx_f[1], 37, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":38
 * 
 *     def add_index(PyQueryEnvironment self, str index_name):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         try:
 *             self._thisptr.addIndex(index_name)
 */
  __Pyx_TraceLine(38,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":39
 *     def add_index(PyQueryEnvironment self, str index_name):
 *         self._check_alive()
 *         try:             # <<<<<<<<<<<<<<
 *             self._thisptr.addIndex(index_name)
 *         except RuntimeError:
 */
  __Pyx_TraceLine(39,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 39; __pyx_clineno = __LINE__; goto __pyx_L3_error;})
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "irtk/indri/query_env.pyx":40
 *         self._check_alive()
 *         try:
 *             self._thisptr.addIndex(index_name)             # <<<<<<<<<<<<<<
 *         except RuntimeError:
 *             raise RuntimeError("Unable to add index. Check index path")
 */
      __Pyx_TraceLine(40,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;})
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_index_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      try {
        __pyx_v_self->_thisptr->addIndex(__pyx_t_5);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 40; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }

      /* "irtk/indri/query_env.pyx":39
 *     def add_index(PyQueryEnvironment self, str index_name):
 *         self._check_alive()
 *         try:             # <<<<<<<<<<<<<<
 *             self._thisptr.addIndex(index_name)
 *         except RuntimeError:
 */
    }
    __Pyx_XDECREF(__pyx_t_2); __pyx_t_2 = 0;
    __Pyx_XDECREF(__pyx_t_3); __pyx_t_3 = 0;
    __Pyx_XDECREF(__pyx_t_4); __pyx_t_4 = 0;
    goto __pyx_L10_try_end;
    __pyx_L3_error:;

    /* "irtk/indri/query_env.pyx":41
 *         try:
 *             self._thisptr.addIndex(index_name)
 *         except RuntimeError:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Unable to add index. Check index path")
 * 
 */
    __Pyx_TraceLine(41,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;})
    __pyx_t_1 = PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
    if (__pyx_t_1) {
      __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.add_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_6, &__pyx_t_7, &__pyx_t_8) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 41; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_6);
      __Pyx_GOTREF(__pyx_t_7);
      __Pyx_GOTREF(__pyx_t_8);

      /* "irtk/indri/query_env.pyx":42
 *             self._thisptr.addIndex(index_name)
 *         except RuntimeError:
 *             raise RuntimeError("Unable to add index. Check index path")             # <<<<<<<<<<<<<<
 * 
 *     def remove_server(PyQueryEnvironment self, str server_name):
 */
      __Pyx_TraceLine(42,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;})
      __pyx_t_9 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__2, NULL); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_Raise(__pyx_t_9, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "irtk/indri/query_env.pyx":39
 *     def add_index(PyQueryEnvironment self, str index_name):
 *         self._check_alive()
 *         try:             # <<<<<<<<<<<<<<
 *             self._thisptr.addIndex(index_name)
 *         except RuntimeError:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L10_try_end:;
  }

  /* "irtk/indri/query_env.pyx":37
 *         return self._thisptr.addServer(server_name)
 * 
 *     def add_index(PyQueryEnvironment self, str index_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         try:
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.add_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":44
 *             raise RuntimeError("Unable to add index. Check index path")
 * 
 *     def remove_server(PyQueryEnvironment self, str server_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.removeServer(server_name)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_11remove_server(PyObject *__pyx_v_self, PyObject *__pyx_v_server_name); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_10remove_server[] = "PyQueryEnvironment.remove_server(self, str server_name)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_11remove_server(PyObject *__pyx_v_self, PyObject *__pyx_v_server_name) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_server (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_server_name), (&PyString_Type), 1, "server_name", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_10remove_server(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((PyObject*)__pyx_v_server_name));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_10remove_server(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_server_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_server", 0);
  __Pyx_TraceCall("remove_server", __pyx_f[1], 44, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":45
 * 
 *     def remove_server(PyQueryEnvironment self, str server_name):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         self._thisptr.removeServer(server_name)
 * 
 */
  __Pyx_TraceLine(45,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 45; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":46
 *     def remove_server(PyQueryEnvironment self, str server_name):
 *         self._check_alive()
 *         self._thisptr.removeServer(server_name)             # <<<<<<<<<<<<<<
 * 
 *     def remove_index(PyQueryEnvironment self, str index):
 */
  __Pyx_TraceLine(46,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_server_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 46; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_thisptr->removeServer(__pyx_t_2);

  /* "irtk/indri/query_env.pyx":44
 *             raise RuntimeError("Unable to add index. Check index path")
 * 
 *     def remove_server(PyQueryEnvironment self, str server_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.removeServer(server_name)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.remove_server", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":48
 *         self._thisptr.removeServer(server_name)
 * 
 *     def remove_index(PyQueryEnvironment self, str index):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.removeIndex(index)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_13remove_index(PyObject *__pyx_v_self, PyObject *__pyx_v_index); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_12remove_index[] = "PyQueryEnvironment.remove_index(self, str index)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_13remove_index(PyObject *__pyx_v_self, PyObject *__pyx_v_index) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("remove_index (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_index), (&PyString_Type), 1, "index", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_12remove_index(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((PyObject*)__pyx_v_index));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_12remove_index(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_index) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("remove_index", 0);
  __Pyx_TraceCall("remove_index", __pyx_f[1], 48, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 48; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":49
 * 
 *     def remove_index(PyQueryEnvironment self, str index):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         self._thisptr.removeIndex(index)
 * 
 */
  __Pyx_TraceLine(49,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":50
 *     def remove_index(PyQueryEnvironment self, str index):
 *         self._check_alive()
 *         self._thisptr.removeIndex(index)             # <<<<<<<<<<<<<<
 * 
 *     def close(PyQueryEnvironment self):
 */
  __Pyx_TraceLine(50,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_index); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_thisptr->removeIndex(__pyx_t_2);

  /* "irtk/indri/query_env.pyx":48
 *         self._thisptr.removeServer(server_name)
 * 
 *     def remove_index(PyQueryEnvironment self, str index):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.removeIndex(index)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.remove_index", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":52
 *         self._thisptr.removeIndex(index)
 * 
 *     def close(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.close()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_15close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_14close[] = "PyQueryEnvironment.close(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_15close(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("close (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_14close(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_14close(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("close", 0);
  __Pyx_TraceCall("close", __pyx_f[1], 52, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":53
 * 
 *     def close(PyQueryEnvironment self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         self._thisptr.close()
 * 
 */
  __Pyx_TraceLine(53,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":54
 *     def close(PyQueryEnvironment self):
 *         self._check_alive()
 *         self._thisptr.close()             # <<<<<<<<<<<<<<
 * 
 *     def document_name(PyQueryEnvironment self, int docid):
 */
  __Pyx_TraceLine(54,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_thisptr->close();

  /* "irtk/indri/query_env.pyx":52
 *         self._thisptr.removeIndex(index)
 * 
 *     def close(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.close()
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.close", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":56
 *         self._thisptr.close()
 * 
 *     def document_name(PyQueryEnvironment self, int docid):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentMetadata([docid], "docno")[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_17document_name(PyObject *__pyx_v_self, PyObject *__pyx_arg_docid); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_16document_name[] = "PyQueryEnvironment.document_name(self, int docid)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_17document_name(PyObject *__pyx_v_self, PyObject *__pyx_arg_docid) {
  int __pyx_v_docid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_name (wrapper)", 0);
  assert(__pyx_arg_docid); {
    __pyx_v_docid = __Pyx_PyInt_As_int(__pyx_arg_docid); if (unlikely((__pyx_v_docid == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_16document_name(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((int)__pyx_v_docid));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_16document_name(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_docid) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<lemur::api::DOCID_T>  __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("document_name", 0);
  __Pyx_TraceCall("document_name", __pyx_f[1], 56, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":57
 * 
 *     def document_name(PyQueryEnvironment self, int docid):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.documentMetadata([docid], "docno")[0]
 * 
 */
  __Pyx_TraceLine(57,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 57; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":58
 *     def document_name(PyQueryEnvironment self, int docid):
 *         self._check_alive()
 *         return self._thisptr.documentMetadata([docid], "docno")[0]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(58,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_docid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_docno); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_self->_thisptr->documentMetadata(__pyx_t_4, __pyx_t_5)[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 58; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":56
 *         self._thisptr.close()
 * 
 *     def document_name(PyQueryEnvironment self, int docid):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentMetadata([docid], "docno")[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_name", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":61
 * 
 * 
 *     def get_documentids(PyQueryEnvironment self, vector[string] document_names):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentIDsFromMetadata("docno", document_names)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_19get_documentids(PyObject *__pyx_v_self, PyObject *__pyx_arg_document_names); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_18get_documentids[] = "PyQueryEnvironment.get_documentids(self, vector[string] document_names)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_19get_documentids(PyObject *__pyx_v_self, PyObject *__pyx_arg_document_names) {
  std::vector<std::string>  __pyx_v_document_names;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_documentids (wrapper)", 0);
  assert(__pyx_arg_document_names); {
    __pyx_v_document_names = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_arg_document_names); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.get_documentids", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_18get_documentids(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((std::vector<std::string> )__pyx_v_document_names));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_18get_documentids(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::vector<std::string>  __pyx_v_document_names) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_documentids", 0);
  __Pyx_TraceCall("get_documentids", __pyx_f[1], 61, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 61; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":62
 * 
 *     def get_documentids(PyQueryEnvironment self, vector[string] document_names):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.documentIDsFromMetadata("docno", document_names)
 * 
 */
  __Pyx_TraceLine(62,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 62; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":63
 *     def get_documentids(PyQueryEnvironment self, vector[string] document_names):
 *         self._check_alive()
 *         return self._thisptr.documentIDsFromMetadata("docno", document_names)             # <<<<<<<<<<<<<<
 * 
 *     def document_metadata(PyQueryEnvironment self, int docid, str field_name):
 */
  __Pyx_TraceLine(63,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_n_b_docno); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T(__pyx_v_self->_thisptr->documentIDsFromMetadata(__pyx_t_2, __pyx_v_document_names)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 63; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":61
 * 
 * 
 *     def get_documentids(PyQueryEnvironment self, vector[string] document_names):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentIDsFromMetadata("docno", document_names)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.get_documentids", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":65
 *         return self._thisptr.documentIDsFromMetadata("docno", document_names)
 * 
 *     def document_metadata(PyQueryEnvironment self, int docid, str field_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentMetadata([docid], field_name)[0]
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_21document_metadata(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_20document_metadata[] = "PyQueryEnvironment.document_metadata(self, int docid, str field_name)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_21document_metadata(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_v_docid;
  PyObject *__pyx_v_field_name = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_metadata (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_docid,&__pyx_n_s_field_name,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_docid)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field_name)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("document_metadata", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "document_metadata") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_docid = __Pyx_PyInt_As_int(values[0]); if (unlikely((__pyx_v_docid == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_field_name = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("document_metadata", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_field_name), (&PyString_Type), 1, "field_name", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_20document_metadata(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_docid, __pyx_v_field_name);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_20document_metadata(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_docid, PyObject *__pyx_v_field_name) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  std::vector<lemur::api::DOCID_T>  __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("document_metadata", 0);
  __Pyx_TraceCall("document_metadata", __pyx_f[1], 65, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 65; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":66
 * 
 *     def document_metadata(PyQueryEnvironment self, int docid, str field_name):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.documentMetadata([docid], field_name)[0]
 * 
 */
  __Pyx_TraceLine(66,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 66; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":67
 *     def document_metadata(PyQueryEnvironment self, int docid, str field_name):
 *         self._check_alive()
 *         return self._thisptr.documentMetadata([docid], field_name)[0]             # <<<<<<<<<<<<<<
 * 
 *     def document_count(PyQueryEnvironment self, str term = ''):
 */
  __Pyx_TraceLine(67,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_docid); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = PyList_New(1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __Pyx_GIVEREF(__pyx_t_2);
  PyList_SET_ITEM(__pyx_t_3, 0, __pyx_t_2);
  __pyx_t_2 = 0;
  __pyx_t_4 = __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(__pyx_t_3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_field_name); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string((__pyx_v_self->_thisptr->documentMetadata(__pyx_t_4, __pyx_t_5)[0])); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":65
 *         return self._thisptr.documentIDsFromMetadata("docno", document_names)
 * 
 *     def document_metadata(PyQueryEnvironment self, int docid, str field_name):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentMetadata([docid], field_name)[0]
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_metadata", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":69
 *         return self._thisptr.documentMetadata([docid], field_name)[0]
 * 
 *     def document_count(PyQueryEnvironment self, str term = ''):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         if term == '':
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_23document_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_22document_count[] = "PyQueryEnvironment.document_count(self, str term='')";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_23document_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_term = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_term,0};
    PyObject* values[1] = {0};
    values[0] = ((PyObject*)__pyx_kp_s__3);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_term);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "document_count") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_term = ((PyObject*)values[0]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("document_count", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_term), (&PyString_Type), 1, "term", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_22document_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_term);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_22document_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  int __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("document_count", 0);
  __Pyx_TraceCall("document_count", __pyx_f[1], 69, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 69; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":70
 * 
 *     def document_count(PyQueryEnvironment self, str term = ''):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         if term == '':
 *             return self._thisptr.documentCount()
 */
  __Pyx_TraceLine(70,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 70; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":71
 *     def document_count(PyQueryEnvironment self, str term = ''):
 *         self._check_alive()
 *         if term == '':             # <<<<<<<<<<<<<<
 *             return self._thisptr.documentCount()
 *         else:
 */
  __Pyx_TraceLine(71,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = (__Pyx_PyString_Equals(__pyx_v_term, __pyx_kp_s__3, Py_EQ)); if (unlikely(__pyx_t_2 < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 71; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = (__pyx_t_2 != 0);
  if (__pyx_t_3) {

    /* "irtk/indri/query_env.pyx":72
 *         self._check_alive()
 *         if term == '':
 *             return self._thisptr.documentCount()             # <<<<<<<<<<<<<<
 *         else:
 *             return self._thisptr.documentCount(term)
 */
    __Pyx_TraceLine(72,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_4 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->documentCount()); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 72; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;

    /* "irtk/indri/query_env.pyx":71
 *     def document_count(PyQueryEnvironment self, str term = ''):
 *         self._check_alive()
 *         if term == '':             # <<<<<<<<<<<<<<
 *             return self._thisptr.documentCount()
 *         else:
 */
  }

  /* "irtk/indri/query_env.pyx":74
 *             return self._thisptr.documentCount()
 *         else:
 *             return self._thisptr.documentCount(term)             # <<<<<<<<<<<<<<
 * 
 *     def document_expression_count(PyQueryEnvironment self, str term, str query_type = 'indri'):
 */
  __Pyx_TraceLine(74,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_term); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_t_4 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->documentCount(__pyx_t_5)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 74; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_r = __pyx_t_4;
    __pyx_t_4 = 0;
    goto __pyx_L0;
  }

  /* "irtk/indri/query_env.pyx":69
 *         return self._thisptr.documentMetadata([docid], field_name)[0]
 * 
 *     def document_count(PyQueryEnvironment self, str term = ''):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         if term == '':
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":76
 *             return self._thisptr.documentCount(term)
 * 
 *     def document_expression_count(PyQueryEnvironment self, str term, str query_type = 'indri'):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         try:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_25document_expression_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_24document_expression_count[] = "PyQueryEnvironment.document_expression_count(self, str term, str query_type='indri')";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_25document_expression_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_term = 0;
  PyObject *__pyx_v_query_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_expression_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_term,&__pyx_n_s_query_type,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_s_indri);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_term)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_query_type);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "document_expression_count") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_term = ((PyObject*)values[0]);
    __pyx_v_query_type = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("document_expression_count", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_expression_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_term), (&PyString_Type), 1, "term", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query_type), (&PyString_Type), 1, "query_type", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_24document_expression_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_term, __pyx_v_query_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_24document_expression_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term, PyObject *__pyx_v_query_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  std::string __pyx_t_6;
  double __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("document_expression_count", 0);
  __Pyx_TraceCall("document_expression_count", __pyx_f[1], 76, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 76; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":77
 * 
 *     def document_expression_count(PyQueryEnvironment self, str term, str query_type = 'indri'):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         try:
 *             return self._thisptr.documentExpressionCount(term, query_type)
 */
  __Pyx_TraceLine(77,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 77; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":78
 *     def document_expression_count(PyQueryEnvironment self, str term, str query_type = 'indri'):
 *         self._check_alive()
 *         try:             # <<<<<<<<<<<<<<
 *             return self._thisptr.documentExpressionCount(term, query_type)
 *         except RuntimeError:
 */
  __Pyx_TraceLine(78,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 78; __pyx_clineno = __LINE__; goto __pyx_L3_error;})
  {
    __Pyx_ExceptionSave(&__pyx_t_2, &__pyx_t_3, &__pyx_t_4);
    __Pyx_XGOTREF(__pyx_t_2);
    __Pyx_XGOTREF(__pyx_t_3);
    __Pyx_XGOTREF(__pyx_t_4);
    /*try:*/ {

      /* "irtk/indri/query_env.pyx":79
 *         self._check_alive()
 *         try:
 *             return self._thisptr.documentExpressionCount(term, query_type)             # <<<<<<<<<<<<<<
 *         except RuntimeError:
 *             raise RuntimeError("Couldn't understand this query")
 */
      __Pyx_TraceLine(79,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;})
      __Pyx_XDECREF(__pyx_r);
      __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_term); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_query_type); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      try {
        __pyx_t_7 = __pyx_v_self->_thisptr->documentExpressionCount(__pyx_t_5, __pyx_t_6);
      } catch(...) {
        try { throw; } catch(const std::exception& exn) { PyErr_SetString(__pyx_builtin_RuntimeError, exn.what()); } catch(...) { PyErr_SetNone(__pyx_builtin_RuntimeError); }
        {__pyx_filename = __pyx_f[1]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
      __pyx_t_8 = PyFloat_FromDouble(__pyx_t_7); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 79; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __pyx_r = __pyx_t_8;
      __pyx_t_8 = 0;
      goto __pyx_L7_try_return;

      /* "irtk/indri/query_env.pyx":78
 *     def document_expression_count(PyQueryEnvironment self, str term, str query_type = 'indri'):
 *         self._check_alive()
 *         try:             # <<<<<<<<<<<<<<
 *             return self._thisptr.documentExpressionCount(term, query_type)
 *         except RuntimeError:
 */
    }
    __pyx_L3_error:;
    __Pyx_XDECREF(__pyx_t_8); __pyx_t_8 = 0;

    /* "irtk/indri/query_env.pyx":80
 *         try:
 *             return self._thisptr.documentExpressionCount(term, query_type)
 *         except RuntimeError:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Couldn't understand this query")
 * 
 */
    __Pyx_TraceLine(80,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;})
    __pyx_t_1 = PyErr_ExceptionMatches(__pyx_builtin_RuntimeError);
    if (__pyx_t_1) {
      __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_expression_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
      if (__Pyx_GetException(&__pyx_t_8, &__pyx_t_9, &__pyx_t_10) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 80; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_8);
      __Pyx_GOTREF(__pyx_t_9);
      __Pyx_GOTREF(__pyx_t_10);

      /* "irtk/indri/query_env.pyx":81
 *             return self._thisptr.documentExpressionCount(term, query_type)
 *         except RuntimeError:
 *             raise RuntimeError("Couldn't understand this query")             # <<<<<<<<<<<<<<
 * 
 *     def document_stem_count(PyQueryEnvironment self, string term):
 */
      __Pyx_TraceLine(81,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;})
      __pyx_t_11 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__4, NULL); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_Raise(__pyx_t_11, 0, 0, 0);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
      {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L5_except_error;}
    }
    goto __pyx_L5_except_error;
    __pyx_L5_except_error:;

    /* "irtk/indri/query_env.pyx":78
 *     def document_expression_count(PyQueryEnvironment self, str term, str query_type = 'indri'):
 *         self._check_alive()
 *         try:             # <<<<<<<<<<<<<<
 *             return self._thisptr.documentExpressionCount(term, query_type)
 *         except RuntimeError:
 */
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L1_error;
    __pyx_L7_try_return:;
    __Pyx_XGIVEREF(__pyx_t_2);
    __Pyx_XGIVEREF(__pyx_t_3);
    __Pyx_XGIVEREF(__pyx_t_4);
    __Pyx_ExceptionReset(__pyx_t_2, __pyx_t_3, __pyx_t_4);
    goto __pyx_L0;
  }

  /* "irtk/indri/query_env.pyx":76
 *             return self._thisptr.documentCount(term)
 * 
 *     def document_expression_count(PyQueryEnvironment self, str term, str query_type = 'indri'):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         try:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_expression_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":83
 *             raise RuntimeError("Couldn't understand this query")
 * 
 *     def document_stem_count(PyQueryEnvironment self, string term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentStemCount(term)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_27document_stem_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_term); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_26document_stem_count[] = "PyQueryEnvironment.document_stem_count(self, string term)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_27document_stem_count(PyObject *__pyx_v_self, PyObject *__pyx_arg_term) {
  std::string __pyx_v_term;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_stem_count (wrapper)", 0);
  assert(__pyx_arg_term); {
    __pyx_v_term = __pyx_convert_string_from_py_std__in_string(__pyx_arg_term); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_stem_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_26document_stem_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((std::string)__pyx_v_term));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_26document_stem_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("document_stem_count", 0);
  __Pyx_TraceCall("document_stem_count", __pyx_f[1], 83, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 83; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":84
 * 
 *     def document_stem_count(PyQueryEnvironment self, string term):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.documentStemCount(term)
 * 
 */
  __Pyx_TraceLine(84,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 84; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":85
 *     def document_stem_count(PyQueryEnvironment self, string term):
 *         self._check_alive()
 *         return self._thisptr.documentStemCount(term)             # <<<<<<<<<<<<<<
 * 
 *     def document_length(PyQueryEnvironment self, long long term):
 */
  __Pyx_TraceLine(85,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->documentStemCount(__pyx_v_term)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 85; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":83
 *             raise RuntimeError("Couldn't understand this query")
 * 
 *     def document_stem_count(PyQueryEnvironment self, string term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentStemCount(term)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_stem_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":87
 *         return self._thisptr.documentStemCount(term)
 * 
 *     def document_length(PyQueryEnvironment self, long long term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentLength(term)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_29document_length(PyObject *__pyx_v_self, PyObject *__pyx_arg_term); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_28document_length[] = "PyQueryEnvironment.document_length(self, long long term)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_29document_length(PyObject *__pyx_v_self, PyObject *__pyx_arg_term) {
  PY_LONG_LONG __pyx_v_term;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_length (wrapper)", 0);
  assert(__pyx_arg_term); {
    __pyx_v_term = __Pyx_PyInt_As_PY_LONG_LONG(__pyx_arg_term); if (unlikely((__pyx_v_term == (PY_LONG_LONG)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_28document_length(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((PY_LONG_LONG)__pyx_v_term));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_28document_length(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PY_LONG_LONG __pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("document_length", 0);
  __Pyx_TraceCall("document_length", __pyx_f[1], 87, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 87; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":88
 * 
 *     def document_length(PyQueryEnvironment self, long long term):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.documentLength(term)
 * 
 */
  __Pyx_TraceLine(88,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 88; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":89
 *     def document_length(PyQueryEnvironment self, long long term):
 *         self._check_alive()
 *         return self._thisptr.documentLength(term)             # <<<<<<<<<<<<<<
 * 
 *     def document_vectors(PyQueryEnvironment self, vector[DOCID_T] docids):
 */
  __Pyx_TraceLine(89,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->documentLength(__pyx_v_term)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 89; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":87
 *         return self._thisptr.documentStemCount(term)
 * 
 *     def document_length(PyQueryEnvironment self, long long term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.documentLength(term)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_length", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":91
 *         return self._thisptr.documentLength(term)
 * 
 *     def document_vectors(PyQueryEnvironment self, vector[DOCID_T] docids):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[DocumentVector*] vecs = self._thisptr.documentVectors(docids)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_31document_vectors(PyObject *__pyx_v_self, PyObject *__pyx_arg_docids); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_30document_vectors[] = "PyQueryEnvironment.document_vectors(self, vector[DOCID_T] docids)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_31document_vectors(PyObject *__pyx_v_self, PyObject *__pyx_arg_docids) {
  std::vector<lemur::api::DOCID_T>  __pyx_v_docids;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("document_vectors (wrapper)", 0);
  assert(__pyx_arg_docids); {
    __pyx_v_docids = __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(__pyx_arg_docids); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_vectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_30document_vectors(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((std::vector<lemur::api::DOCID_T> )__pyx_v_docids));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_30document_vectors(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::vector<lemur::api::DOCID_T>  __pyx_v_docids) {
  std::vector<indri::api::DocumentVector *>  __pyx_v_vecs;
  std::vector<indri::api::DocumentVector *> ::iterator __pyx_v_it;
  PyObject *__pyx_v_dv = NULL;
  PyObject *__pyx_v_doc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("document_vectors", 0);
  __Pyx_TraceCall("document_vectors", __pyx_f[1], 91, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 91; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":92
 * 
 *     def document_vectors(PyQueryEnvironment self, vector[DOCID_T] docids):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         cdef vector[DocumentVector*] vecs = self._thisptr.documentVectors(docids)
 *         cdef vector[DocumentVector*].iterator it = vecs.begin()
 */
  __Pyx_TraceLine(92,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 92; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":93
 *     def document_vectors(PyQueryEnvironment self, vector[DOCID_T] docids):
 *         self._check_alive()
 *         cdef vector[DocumentVector*] vecs = self._thisptr.documentVectors(docids)             # <<<<<<<<<<<<<<
 *         cdef vector[DocumentVector*].iterator it = vecs.begin()
 *         dv = []
 */
  __Pyx_TraceLine(93,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 93; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_vecs = __pyx_v_self->_thisptr->documentVectors(__pyx_v_docids);

  /* "irtk/indri/query_env.pyx":94
 *         self._check_alive()
 *         cdef vector[DocumentVector*] vecs = self._thisptr.documentVectors(docids)
 *         cdef vector[DocumentVector*].iterator it = vecs.begin()             # <<<<<<<<<<<<<<
 *         dv = []
 *         while it != vecs.end():
 */
  __Pyx_TraceLine(94,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 94; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_it = __pyx_v_vecs.begin();

  /* "irtk/indri/query_env.pyx":95
 *         cdef vector[DocumentVector*] vecs = self._thisptr.documentVectors(docids)
 *         cdef vector[DocumentVector*].iterator it = vecs.begin()
 *         dv = []             # <<<<<<<<<<<<<<
 *         while it != vecs.end():
 *             doc = PyDocumentVector.init_vector(deref(it))
 */
  __Pyx_TraceLine(95,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 95; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_dv = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "irtk/indri/query_env.pyx":96
 *         cdef vector[DocumentVector*].iterator it = vecs.begin()
 *         dv = []
 *         while it != vecs.end():             # <<<<<<<<<<<<<<
 *             doc = PyDocumentVector.init_vector(deref(it))
 *             inc(it)
 */
  __Pyx_TraceLine(96,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 96; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  while (1) {
    __pyx_t_3 = ((__pyx_v_it != __pyx_v_vecs.end()) != 0);
    if (!__pyx_t_3) break;

    /* "irtk/indri/query_env.pyx":97
 *         dv = []
 *         while it != vecs.end():
 *             doc = PyDocumentVector.init_vector(deref(it))             # <<<<<<<<<<<<<<
 *             inc(it)
 *             dv.append(doc)
 */
    __Pyx_TraceLine(97,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __pyx_f_4irtk_5indri_9query_env_16PyDocumentVector_init_vector((*__pyx_v_it)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 97; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_doc, __pyx_t_2);
    __pyx_t_2 = 0;

    /* "irtk/indri/query_env.pyx":98
 *         while it != vecs.end():
 *             doc = PyDocumentVector.init_vector(deref(it))
 *             inc(it)             # <<<<<<<<<<<<<<
 *             dv.append(doc)
 *         return dv
 */
    __Pyx_TraceLine(98,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 98; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    (++__pyx_v_it);

    /* "irtk/indri/query_env.pyx":99
 *             doc = PyDocumentVector.init_vector(deref(it))
 *             inc(it)
 *             dv.append(doc)             # <<<<<<<<<<<<<<
 *         return dv
 * 
 */
    __Pyx_TraceLine(99,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_dv, __pyx_v_doc); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 99; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "irtk/indri/query_env.pyx":100
 *             inc(it)
 *             dv.append(doc)
 *         return dv             # <<<<<<<<<<<<<<
 * 
 *     def documents(PyQueryEnvironment self, vector[DOCID_T] docids):
 */
  __Pyx_TraceLine(100,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 100; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dv);
  __pyx_r = __pyx_v_dv;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":91
 *         return self._thisptr.documentLength(term)
 * 
 *     def document_vectors(PyQueryEnvironment self, vector[DOCID_T] docids):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[DocumentVector*] vecs = self._thisptr.documentVectors(docids)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.document_vectors", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dv);
  __Pyx_XDECREF(__pyx_v_doc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":102
 *         return dv
 * 
 *     def documents(PyQueryEnvironment self, vector[DOCID_T] docids):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[ParsedDocument*] vecs = self._thisptr.documents(docids)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_33documents(PyObject *__pyx_v_self, PyObject *__pyx_arg_docids); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_32documents[] = "PyQueryEnvironment.documents(self, vector[DOCID_T] docids)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_33documents(PyObject *__pyx_v_self, PyObject *__pyx_arg_docids) {
  std::vector<lemur::api::DOCID_T>  __pyx_v_docids;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("documents (wrapper)", 0);
  assert(__pyx_arg_docids); {
    __pyx_v_docids = __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(__pyx_arg_docids); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.documents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_32documents(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((std::vector<lemur::api::DOCID_T> )__pyx_v_docids));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_32documents(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::vector<lemur::api::DOCID_T>  __pyx_v_docids) {
  std::vector<indri::api::ParsedDocument *>  __pyx_v_vecs;
  std::vector<indri::api::ParsedDocument *> ::iterator __pyx_v_it;
  PyObject *__pyx_v_dv = NULL;
  struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_doc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("documents", 0);
  __Pyx_TraceCall("documents", __pyx_f[1], 102, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 102; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":103
 * 
 *     def documents(PyQueryEnvironment self, vector[DOCID_T] docids):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         cdef vector[ParsedDocument*] vecs = self._thisptr.documents(docids)
 *         cdef vector[ParsedDocument*].iterator it = vecs.begin()
 */
  __Pyx_TraceLine(103,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 103; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":104
 *     def documents(PyQueryEnvironment self, vector[DOCID_T] docids):
 *         self._check_alive()
 *         cdef vector[ParsedDocument*] vecs = self._thisptr.documents(docids)             # <<<<<<<<<<<<<<
 *         cdef vector[ParsedDocument*].iterator it = vecs.begin()
 *         dv = []
 */
  __Pyx_TraceLine(104,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 104; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_vecs = __pyx_v_self->_thisptr->documents(__pyx_v_docids);

  /* "irtk/indri/query_env.pyx":105
 *         self._check_alive()
 *         cdef vector[ParsedDocument*] vecs = self._thisptr.documents(docids)
 *         cdef vector[ParsedDocument*].iterator it = vecs.begin()             # <<<<<<<<<<<<<<
 *         dv = []
 *         while it != vecs.end():
 */
  __Pyx_TraceLine(105,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 105; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_it = __pyx_v_vecs.begin();

  /* "irtk/indri/query_env.pyx":106
 *         cdef vector[ParsedDocument*] vecs = self._thisptr.documents(docids)
 *         cdef vector[ParsedDocument*].iterator it = vecs.begin()
 *         dv = []             # <<<<<<<<<<<<<<
 *         while it != vecs.end():
 *             doc = PyParsedDocument.init_vector(deref(it))
 */
  __Pyx_TraceLine(106,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 106; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_dv = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "irtk/indri/query_env.pyx":107
 *         cdef vector[ParsedDocument*].iterator it = vecs.begin()
 *         dv = []
 *         while it != vecs.end():             # <<<<<<<<<<<<<<
 *             doc = PyParsedDocument.init_vector(deref(it))
 *             inc(it)
 */
  __Pyx_TraceLine(107,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 107; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  while (1) {
    __pyx_t_3 = ((__pyx_v_it != __pyx_v_vecs.end()) != 0);
    if (!__pyx_t_3) break;

    /* "irtk/indri/query_env.pyx":108
 *         dv = []
 *         while it != vecs.end():
 *             doc = PyParsedDocument.init_vector(deref(it))             # <<<<<<<<<<<<<<
 *             inc(it)
 *             dv.append(doc)
 */
    __Pyx_TraceLine(108,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = ((PyObject *)__pyx_f_4irtk_5indri_9query_env_16PyParsedDocument_init_vector((*__pyx_v_it))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 108; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_doc, ((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "irtk/indri/query_env.pyx":109
 *         while it != vecs.end():
 *             doc = PyParsedDocument.init_vector(deref(it))
 *             inc(it)             # <<<<<<<<<<<<<<
 *             dv.append(doc)
 *         return dv
 */
    __Pyx_TraceLine(109,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 109; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    (++__pyx_v_it);

    /* "irtk/indri/query_env.pyx":110
 *             doc = PyParsedDocument.init_vector(deref(it))
 *             inc(it)
 *             dv.append(doc)             # <<<<<<<<<<<<<<
 *         return dv
 * 
 */
    __Pyx_TraceLine(110,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_dv, ((PyObject *)__pyx_v_doc)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 110; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "irtk/indri/query_env.pyx":111
 *             inc(it)
 *             dv.append(doc)
 *         return dv             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(111,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 111; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_dv);
  __pyx_r = __pyx_v_dv;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":102
 *         return dv
 * 
 *     def documents(PyQueryEnvironment self, vector[DOCID_T] docids):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[ParsedDocument*] vecs = self._thisptr.documents(docids)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.documents", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_dv);
  __Pyx_XDECREF((PyObject *)__pyx_v_doc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":114
 * 
 * 
 *     def run_indri_query(PyQueryEnvironment self,             # <<<<<<<<<<<<<<
 *                         str query,
 *                         int result_count,
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_35run_indri_query(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_34run_indri_query[] = "PyQueryEnvironment.run_indri_query(self, str query, int result_count, vector[DOCID_T] docids=[], vector[string] metadata=[])";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_35run_indri_query(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  int __pyx_v_result_count;
  std::vector<lemur::api::DOCID_T>  __pyx_v_docids;
  std::vector<std::string>  __pyx_v_metadata;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_indri_query (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_query,&__pyx_n_s_result_count,&__pyx_n_s_docids,&__pyx_n_s_metadata,0};
    PyObject* values[4] = {0,0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_query)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_result_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_indri_query", 0, 2, 4, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_docids);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_metadata);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run_indri_query") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_query = ((PyObject*)values[0]);
    __pyx_v_result_count = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_result_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 116; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    if (values[2]) {
      __pyx_v_docids = __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(values[2]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_docids = __pyx_k__5;
    }
    if (values[3]) {
      __pyx_v_metadata = __pyx_convert_vector_from_py_std_3a__3a_string(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_metadata = __pyx_k__6;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run_indri_query", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.run_indri_query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), (&PyString_Type), 1, "query", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 115; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_34run_indri_query(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_query, __pyx_v_result_count, __pyx_v_docids, __pyx_v_metadata);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_34run_indri_query(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_query, int __pyx_v_result_count, std::vector<lemur::api::DOCID_T>  __pyx_v_docids, std::vector<std::string>  __pyx_v_metadata) {
  indri::api::QueryRequest *__pyx_v_req;
  indri::api::QueryResults __pyx_v_vecs;
  struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *__pyx_v_o = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  indri::api::QueryRequest *__pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  Py_ssize_t __pyx_t_4;
  int __pyx_t_5;
  std::string __pyx_t_6;
  std::vector<indri::api::QueryResult>  __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_indri_query", 0);
  __Pyx_TraceCall("run_indri_query", __pyx_f[1], 114, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 114; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":119
 *                         vector[DOCID_T] docids = [],
 *                         vector[string] metadata = []):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         cdef QueryRequest* req = new QueryRequest()
 *         if len(docids) > 0:
 */
  __Pyx_TraceLine(119,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 119; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":120
 *                         vector[string] metadata = []):
 *         self._check_alive()
 *         cdef QueryRequest* req = new QueryRequest()             # <<<<<<<<<<<<<<
 *         if len(docids) > 0:
 *             req.docSet = docids
 */
  __Pyx_TraceLine(120,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  try {
    __pyx_t_2 = new indri::api::QueryRequest();
  } catch(...) {
    __Pyx_CppExn2PyErr();
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 120; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  __pyx_v_req = __pyx_t_2;

  /* "irtk/indri/query_env.pyx":121
 *         self._check_alive()
 *         cdef QueryRequest* req = new QueryRequest()
 *         if len(docids) > 0:             # <<<<<<<<<<<<<<
 *             req.docSet = docids
 *         req.query = query
 */
  __Pyx_TraceLine(121,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = __pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T(__pyx_v_docids); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 121; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((__pyx_t_4 > 0) != 0);
  if (__pyx_t_5) {

    /* "irtk/indri/query_env.pyx":122
 *         cdef QueryRequest* req = new QueryRequest()
 *         if len(docids) > 0:
 *             req.docSet = docids             # <<<<<<<<<<<<<<
 *         req.query = query
 *         if len(metadata) > 0:
 */
    __Pyx_TraceLine(122,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 122; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_req->docSet = __pyx_v_docids;

    /* "irtk/indri/query_env.pyx":121
 *         self._check_alive()
 *         cdef QueryRequest* req = new QueryRequest()
 *         if len(docids) > 0:             # <<<<<<<<<<<<<<
 *             req.docSet = docids
 *         req.query = query
 */
  }

  /* "irtk/indri/query_env.pyx":123
 *         if len(docids) > 0:
 *             req.docSet = docids
 *         req.query = query             # <<<<<<<<<<<<<<
 *         if len(metadata) > 0:
 *             req.metadata = metadata
 */
  __Pyx_TraceLine(123,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_6 = __pyx_convert_string_from_py_std__in_string(__pyx_v_query); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 123; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_req->query = __pyx_t_6;

  /* "irtk/indri/query_env.pyx":124
 *             req.docSet = docids
 *         req.query = query
 *         if len(metadata) > 0:             # <<<<<<<<<<<<<<
 *             req.metadata = metadata
 *         req.resultsRequested = result_count
 */
  __Pyx_TraceLine(124,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_metadata); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_t_4 = PyObject_Length(__pyx_t_3); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 124; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;
  __pyx_t_5 = ((__pyx_t_4 > 0) != 0);
  if (__pyx_t_5) {

    /* "irtk/indri/query_env.pyx":125
 *         req.query = query
 *         if len(metadata) > 0:
 *             req.metadata = metadata             # <<<<<<<<<<<<<<
 *         req.resultsRequested = result_count
 *         req.startNum = 0
 */
    __Pyx_TraceLine(125,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 125; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_req->metadata = __pyx_v_metadata;

    /* "irtk/indri/query_env.pyx":124
 *             req.docSet = docids
 *         req.query = query
 *         if len(metadata) > 0:             # <<<<<<<<<<<<<<
 *             req.metadata = metadata
 *         req.resultsRequested = result_count
 */
  }

  /* "irtk/indri/query_env.pyx":126
 *         if len(metadata) > 0:
 *             req.metadata = metadata
 *         req.resultsRequested = result_count             # <<<<<<<<<<<<<<
 *         req.startNum = 0
 * 
 */
  __Pyx_TraceLine(126,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 126; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_req->resultsRequested = __pyx_v_result_count;

  /* "irtk/indri/query_env.pyx":127
 *             req.metadata = metadata
 *         req.resultsRequested = result_count
 *         req.startNum = 0             # <<<<<<<<<<<<<<
 * 
 *         cdef QueryResults vecs = self._thisptr.runQuery(deref(req))
 */
  __Pyx_TraceLine(127,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 127; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_req->startNum = 0;

  /* "irtk/indri/query_env.pyx":129
 *         req.startNum = 0
 * 
 *         cdef QueryResults vecs = self._thisptr.runQuery(deref(req))             # <<<<<<<<<<<<<<
 *         o = PyIndriResults()
 *         o.results = vecs.results
 */
  __Pyx_TraceLine(129,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 129; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_vecs = __pyx_v_self->_thisptr->runQuery((*__pyx_v_req));

  /* "irtk/indri/query_env.pyx":130
 * 
 *         cdef QueryResults vecs = self._thisptr.runQuery(deref(req))
 *         o = PyIndriResults()             # <<<<<<<<<<<<<<
 *         o.results = vecs.results
 *         return o
 */
  __Pyx_TraceLine(130,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4irtk_5indri_9query_env_PyIndriResults), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 130; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_v_o = ((struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *)__pyx_t_3);
  __pyx_t_3 = 0;

  /* "irtk/indri/query_env.pyx":131
 *         cdef QueryResults vecs = self._thisptr.runQuery(deref(req))
 *         o = PyIndriResults()
 *         o.results = vecs.results             # <<<<<<<<<<<<<<
 *         return o
 * 
 */
  __Pyx_TraceLine(131,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 131; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_7 = __pyx_v_vecs.results;
  __pyx_v_o->results = __pyx_t_7;

  /* "irtk/indri/query_env.pyx":132
 *         o = PyIndriResults()
 *         o.results = vecs.results
 *         return o             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(132,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 132; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_o));
  __pyx_r = ((PyObject *)__pyx_v_o);
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":114
 * 
 * 
 *     def run_indri_query(PyQueryEnvironment self,             # <<<<<<<<<<<<<<
 *                         str query,
 *                         int result_count,
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.run_indri_query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_o);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":136
 * 
 * 
 *     def run_trec_query(PyQueryEnvironment self, str query, int result_count, str runid='indri', string qid='1'):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[ScoredExtentResult] vecs = self._thisptr.runQuery(query, result_count)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_37run_trec_query(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_36run_trec_query[] = "PyQueryEnvironment.run_trec_query(self, str query, int result_count, str runid='indri', string qid='1')";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_37run_trec_query(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_query = 0;
  int __pyx_v_result_count;
  PyObject *__pyx_v_runid = 0;
  std::string __pyx_v_qid;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("run_trec_query (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_query,&__pyx_n_s_result_count,&__pyx_n_s_runid,&__pyx_n_s_qid,0};
    PyObject* values[4] = {0,0,0,0};
    values[2] = ((PyObject*)__pyx_n_s_indri);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_query)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_result_count)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("run_trec_query", 0, 2, 4, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_runid);
          if (value) { values[2] = value; kw_args--; }
        }
        case  3:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_qid);
          if (value) { values[3] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "run_trec_query") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  4: values[3] = PyTuple_GET_ITEM(__pyx_args, 3);
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_query = ((PyObject*)values[0]);
    __pyx_v_result_count = __Pyx_PyInt_As_int(values[1]); if (unlikely((__pyx_v_result_count == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_runid = ((PyObject*)values[2]);
    if (values[3]) {
      __pyx_v_qid = __pyx_convert_string_from_py_std__in_string(values[3]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_qid = __pyx_k__7;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("run_trec_query", 0, 2, 4, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.run_trec_query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query), (&PyString_Type), 1, "query", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_runid), (&PyString_Type), 1, "runid", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_36run_trec_query(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_query, __pyx_v_result_count, __pyx_v_runid, __pyx_v_qid);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_36run_trec_query(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_query, int __pyx_v_result_count, PyObject *__pyx_v_runid, std::string __pyx_v_qid) {
  std::vector<indri::api::ScoredExtentResult>  __pyx_v_vecs;
  std::vector<indri::api::ScoredExtentResult> ::iterator __pyx_v_it;
  PyObject *__pyx_v_results = NULL;
  PyObject *__pyx_v_rank = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  PyObject *__pyx_t_8 = NULL;
  PyObject *__pyx_t_9 = NULL;
  PyObject *__pyx_t_10 = NULL;
  PyObject *__pyx_t_11 = NULL;
  Py_ssize_t __pyx_t_12;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("run_trec_query", 0);
  __Pyx_TraceCall("run_trec_query", __pyx_f[1], 136, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":137
 * 
 *     def run_trec_query(PyQueryEnvironment self, str query, int result_count, str runid='indri', string qid='1'):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         cdef vector[ScoredExtentResult] vecs = self._thisptr.runQuery(query, result_count)
 *         cdef vector[ScoredExtentResult].iterator it = vecs.begin()
 */
  __Pyx_TraceLine(137,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 137; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":138
 *     def run_trec_query(PyQueryEnvironment self, str query, int result_count, str runid='indri', string qid='1'):
 *         self._check_alive()
 *         cdef vector[ScoredExtentResult] vecs = self._thisptr.runQuery(query, result_count)             # <<<<<<<<<<<<<<
 *         cdef vector[ScoredExtentResult].iterator it = vecs.begin()
 *         results = TRECResult(runid)
 */
  __Pyx_TraceLine(138,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_query); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 138; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_vecs = __pyx_v_self->_thisptr->runQuery(__pyx_t_2, __pyx_v_result_count);

  /* "irtk/indri/query_env.pyx":139
 *         self._check_alive()
 *         cdef vector[ScoredExtentResult] vecs = self._thisptr.runQuery(query, result_count)
 *         cdef vector[ScoredExtentResult].iterator it = vecs.begin()             # <<<<<<<<<<<<<<
 *         results = TRECResult(runid)
 *         rank = 1
 */
  __Pyx_TraceLine(139,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 139; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_it = __pyx_v_vecs.begin();

  /* "irtk/indri/query_env.pyx":140
 *         cdef vector[ScoredExtentResult] vecs = self._thisptr.runQuery(query, result_count)
 *         cdef vector[ScoredExtentResult].iterator it = vecs.begin()
 *         results = TRECResult(runid)             # <<<<<<<<<<<<<<
 *         rank = 1
 *         while it != vecs.end():
 */
  __Pyx_TraceLine(140,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_4 = __Pyx_GetModuleGlobalName(__pyx_n_s_TRECResult); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_t_5 = NULL;
  if (CYTHON_COMPILING_IN_CPYTHON && unlikely(PyMethod_Check(__pyx_t_4))) {
    __pyx_t_5 = PyMethod_GET_SELF(__pyx_t_4);
    if (likely(__pyx_t_5)) {
      PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
      __Pyx_INCREF(__pyx_t_5);
      __Pyx_INCREF(function);
      __Pyx_DECREF_SET(__pyx_t_4, function);
    }
  }
  if (!__pyx_t_5) {
    __pyx_t_3 = __Pyx_PyObject_CallOneArg(__pyx_t_4, __pyx_v_runid); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
  } else {
    __pyx_t_6 = PyTuple_New(1+1); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5); PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_5); __pyx_t_5 = NULL;
    __Pyx_INCREF(__pyx_v_runid);
    __Pyx_GIVEREF(__pyx_v_runid);
    PyTuple_SET_ITEM(__pyx_t_6, 0+1, __pyx_v_runid);
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_6, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 140; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;
  }
  __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  __pyx_v_results = __pyx_t_3;
  __pyx_t_3 = 0;

  /* "irtk/indri/query_env.pyx":141
 *         cdef vector[ScoredExtentResult].iterator it = vecs.begin()
 *         results = TRECResult(runid)
 *         rank = 1             # <<<<<<<<<<<<<<
 *         while it != vecs.end():
 *             results.add_result(qid, self.document_name(deref(it).document), rank, deref(it).score, deref(it).document)
 */
  __Pyx_TraceLine(141,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 141; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_INCREF(__pyx_int_1);
  __pyx_v_rank = __pyx_int_1;

  /* "irtk/indri/query_env.pyx":142
 *         results = TRECResult(runid)
 *         rank = 1
 *         while it != vecs.end():             # <<<<<<<<<<<<<<
 *             results.add_result(qid, self.document_name(deref(it).document), rank, deref(it).score, deref(it).document)
 *             rank += 1
 */
  __Pyx_TraceLine(142,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 142; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  while (1) {
    __pyx_t_7 = ((__pyx_v_it != __pyx_v_vecs.end()) != 0);
    if (!__pyx_t_7) break;

    /* "irtk/indri/query_env.pyx":143
 *         rank = 1
 *         while it != vecs.end():
 *             results.add_result(qid, self.document_name(deref(it).document), rank, deref(it).score, deref(it).document)             # <<<<<<<<<<<<<<
 *             rank += 1
 *             inc(it)
 */
    __Pyx_TraceLine(143,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_4 = __Pyx_PyObject_GetAttrStr(__pyx_v_results, __pyx_n_s_add_result); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_6 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_qid); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_8 = __Pyx_PyObject_GetAttrStr(((PyObject *)__pyx_v_self), __pyx_n_s_document_name); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_9 = __Pyx_PyInt_From_lemur_3a__3a_api_3a__3a_TERMID_T((*__pyx_v_it).document); if (unlikely(!__pyx_t_9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_9);
    __pyx_t_10 = NULL;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_8))) {
      __pyx_t_10 = PyMethod_GET_SELF(__pyx_t_8);
      if (likely(__pyx_t_10)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_8);
        __Pyx_INCREF(__pyx_t_10);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_8, function);
      }
    }
    if (!__pyx_t_10) {
      __pyx_t_5 = __Pyx_PyObject_CallOneArg(__pyx_t_8, __pyx_t_9); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_DECREF(__pyx_t_9); __pyx_t_9 = 0;
      __Pyx_GOTREF(__pyx_t_5);
    } else {
      __pyx_t_11 = PyTuple_New(1+1); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_11);
      __Pyx_GIVEREF(__pyx_t_10); PyTuple_SET_ITEM(__pyx_t_11, 0, __pyx_t_10); __pyx_t_10 = NULL;
      __Pyx_GIVEREF(__pyx_t_9);
      PyTuple_SET_ITEM(__pyx_t_11, 0+1, __pyx_t_9);
      __pyx_t_9 = 0;
      __pyx_t_5 = __Pyx_PyObject_Call(__pyx_t_8, __pyx_t_11, NULL); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
      __Pyx_GOTREF(__pyx_t_5);
      __Pyx_DECREF(__pyx_t_11); __pyx_t_11 = 0;
    }
    __Pyx_DECREF(__pyx_t_8); __pyx_t_8 = 0;
    __pyx_t_8 = PyFloat_FromDouble((*__pyx_v_it).score); if (unlikely(!__pyx_t_8)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_8);
    __pyx_t_11 = __Pyx_PyInt_From_lemur_3a__3a_api_3a__3a_TERMID_T((*__pyx_v_it).document); if (unlikely(!__pyx_t_11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_11);
    __pyx_t_9 = NULL;
    __pyx_t_12 = 0;
    if (CYTHON_COMPILING_IN_CPYTHON && likely(PyMethod_Check(__pyx_t_4))) {
      __pyx_t_9 = PyMethod_GET_SELF(__pyx_t_4);
      if (likely(__pyx_t_9)) {
        PyObject* function = PyMethod_GET_FUNCTION(__pyx_t_4);
        __Pyx_INCREF(__pyx_t_9);
        __Pyx_INCREF(function);
        __Pyx_DECREF_SET(__pyx_t_4, function);
        __pyx_t_12 = 1;
      }
    }
    __pyx_t_10 = PyTuple_New(5+__pyx_t_12); if (unlikely(!__pyx_t_10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_10);
    if (__pyx_t_9) {
      __Pyx_GIVEREF(__pyx_t_9); PyTuple_SET_ITEM(__pyx_t_10, 0, __pyx_t_9); __pyx_t_9 = NULL;
    }
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_10, 0+__pyx_t_12, __pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_10, 1+__pyx_t_12, __pyx_t_5);
    __Pyx_INCREF(__pyx_v_rank);
    __Pyx_GIVEREF(__pyx_v_rank);
    PyTuple_SET_ITEM(__pyx_t_10, 2+__pyx_t_12, __pyx_v_rank);
    __Pyx_GIVEREF(__pyx_t_8);
    PyTuple_SET_ITEM(__pyx_t_10, 3+__pyx_t_12, __pyx_t_8);
    __Pyx_GIVEREF(__pyx_t_11);
    PyTuple_SET_ITEM(__pyx_t_10, 4+__pyx_t_12, __pyx_t_11);
    __pyx_t_6 = 0;
    __pyx_t_5 = 0;
    __pyx_t_8 = 0;
    __pyx_t_11 = 0;
    __pyx_t_3 = __Pyx_PyObject_Call(__pyx_t_4, __pyx_t_10, NULL); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 143; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF(__pyx_t_10); __pyx_t_10 = 0;
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
    __Pyx_DECREF(__pyx_t_3); __pyx_t_3 = 0;

    /* "irtk/indri/query_env.pyx":144
 *         while it != vecs.end():
 *             results.add_result(qid, self.document_name(deref(it).document), rank, deref(it).score, deref(it).document)
 *             rank += 1             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return results
 */
    __Pyx_TraceLine(144,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_3 = __Pyx_PyInt_AddObjC(__pyx_v_rank, __pyx_int_1, 1, 1); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 144; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __Pyx_DECREF_SET(__pyx_v_rank, __pyx_t_3);
    __pyx_t_3 = 0;

    /* "irtk/indri/query_env.pyx":145
 *             results.add_result(qid, self.document_name(deref(it).document), rank, deref(it).score, deref(it).document)
 *             rank += 1
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return results
 * 
 */
    __Pyx_TraceLine(145,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 145; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    (++__pyx_v_it);
  }

  /* "irtk/indri/query_env.pyx":146
 *             rank += 1
 *             inc(it)
 *         return results             # <<<<<<<<<<<<<<
 * 
 *     def expression_count(PyQueryEnvironment self, str term, str query_type='indri'):
 */
  __Pyx_TraceLine(146,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 146; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":136
 * 
 * 
 *     def run_trec_query(PyQueryEnvironment self, str query, int result_count, str runid='indri', string qid='1'):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[ScoredExtentResult] vecs = self._thisptr.runQuery(query, result_count)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_8);
  __Pyx_XDECREF(__pyx_t_9);
  __Pyx_XDECREF(__pyx_t_10);
  __Pyx_XDECREF(__pyx_t_11);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.run_trec_query", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XDECREF(__pyx_v_rank);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":148
 *         return results
 * 
 *     def expression_count(PyQueryEnvironment self, str term, str query_type='indri'):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.expressionCount(term, query_type)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_39expression_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_38expression_count[] = "PyQueryEnvironment.expression_count(self, str term, str query_type='indri')";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_39expression_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  PyObject *__pyx_v_term = 0;
  PyObject *__pyx_v_query_type = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("expression_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_term,&__pyx_n_s_query_type,0};
    PyObject* values[2] = {0,0};
    values[1] = ((PyObject*)__pyx_n_s_indri);
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_term)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_query_type);
          if (value) { values[1] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "expression_count") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    __pyx_v_term = ((PyObject*)values[0]);
    __pyx_v_query_type = ((PyObject*)values[1]);
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("expression_count", 0, 1, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.expression_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_term), (&PyString_Type), 1, "term", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_query_type), (&PyString_Type), 1, "query_type", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_38expression_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_term, __pyx_v_query_type);

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_38expression_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term, PyObject *__pyx_v_query_type) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  std::string __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("expression_count", 0);
  __Pyx_TraceCall("expression_count", __pyx_f[1], 148, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 148; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":149
 * 
 *     def expression_count(PyQueryEnvironment self, str term, str query_type='indri'):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.expressionCount(term, query_type)
 * 
 */
  __Pyx_TraceLine(149,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 149; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":150
 *     def expression_count(PyQueryEnvironment self, str term, str query_type='indri'):
 *         self._check_alive()
 *         return self._thisptr.expressionCount(term, query_type)             # <<<<<<<<<<<<<<
 * 
 *     def stem_count(PyQueryEnvironment self, str term):
 */
  __Pyx_TraceLine(150,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_term); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __pyx_convert_string_from_py_std__in_string(__pyx_v_query_type); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_4 = PyFloat_FromDouble(__pyx_v_self->_thisptr->expressionCount(__pyx_t_2, __pyx_t_3)); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 150; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_4);
  __pyx_r = __pyx_t_4;
  __pyx_t_4 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":148
 *         return results
 * 
 *     def expression_count(PyQueryEnvironment self, str term, str query_type='indri'):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.expressionCount(term, query_type)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.expression_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":152
 *         return self._thisptr.expressionCount(term, query_type)
 * 
 *     def stem_count(PyQueryEnvironment self, str term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stemCount(term)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_41stem_count(PyObject *__pyx_v_self, PyObject *__pyx_v_term); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_40stem_count[] = "PyQueryEnvironment.stem_count(self, str term)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_41stem_count(PyObject *__pyx_v_self, PyObject *__pyx_v_term) {
  CYTHON_UNUSED int __pyx_lineno = 0;
  CYTHON_UNUSED const char *__pyx_filename = NULL;
  CYTHON_UNUSED int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stem_count (wrapper)", 0);
  if (unlikely(!__Pyx_ArgTypeTest(((PyObject *)__pyx_v_term), (&PyString_Type), 1, "term", 1))) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_40stem_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((PyObject*)__pyx_v_term));

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_40stem_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, PyObject *__pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  std::string __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stem_count", 0);
  __Pyx_TraceCall("stem_count", __pyx_f[1], 152, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 152; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":153
 * 
 *     def stem_count(PyQueryEnvironment self, str term):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.stemCount(term)
 * 
 */
  __Pyx_TraceLine(153,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 153; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":154
 *     def stem_count(PyQueryEnvironment self, str term):
 *         self._check_alive()
 *         return self._thisptr.stemCount(term)             # <<<<<<<<<<<<<<
 * 
 *     def stem_field_count(PyQueryEnvironment self, string term, string field):
 */
  __Pyx_TraceLine(154,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_string_from_py_std__in_string(__pyx_v_term); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_3 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->stemCount(__pyx_t_2)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 154; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_3);
  __pyx_r = __pyx_t_3;
  __pyx_t_3 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":152
 *         return self._thisptr.expressionCount(term, query_type)
 * 
 *     def stem_count(PyQueryEnvironment self, str term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stemCount(term)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.stem_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":156
 *         return self._thisptr.stemCount(term)
 * 
 *     def stem_field_count(PyQueryEnvironment self, string term, string field):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stemFieldCount(term, field)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_43stem_field_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_42stem_field_count[] = "PyQueryEnvironment.stem_field_count(self, string term, string field)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_43stem_field_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_term;
  std::string __pyx_v_field;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stem_field_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_term,&__pyx_n_s_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_term)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("stem_field_count", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "stem_field_count") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_term = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_field = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("stem_field_count", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.stem_field_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_42stem_field_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_term, __pyx_v_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_42stem_field_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term, std::string __pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stem_field_count", 0);
  __Pyx_TraceCall("stem_field_count", __pyx_f[1], 156, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 156; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":157
 * 
 *     def stem_field_count(PyQueryEnvironment self, string term, string field):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.stemFieldCount(term, field)
 * 
 */
  __Pyx_TraceLine(157,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 157; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":158
 *     def stem_field_count(PyQueryEnvironment self, string term, string field):
 *         self._check_alive()
 *         return self._thisptr.stemFieldCount(term, field)             # <<<<<<<<<<<<<<
 * 
 *     def stem_term(PyQueryEnvironment self, string term):
 */
  __Pyx_TraceLine(158,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->stemFieldCount(__pyx_v_term, __pyx_v_field)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 158; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":156
 *         return self._thisptr.stemCount(term)
 * 
 *     def stem_field_count(PyQueryEnvironment self, string term, string field):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stemFieldCount(term, field)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.stem_field_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":160
 *         return self._thisptr.stemFieldCount(term, field)
 * 
 *     def stem_term(PyQueryEnvironment self, string term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stemTerm(term)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_45stem_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_term); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_44stem_term[] = "PyQueryEnvironment.stem_term(self, string term)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_45stem_term(PyObject *__pyx_v_self, PyObject *__pyx_arg_term) {
  std::string __pyx_v_term;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stem_term (wrapper)", 0);
  assert(__pyx_arg_term); {
    __pyx_v_term = __pyx_convert_string_from_py_std__in_string(__pyx_arg_term); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.stem_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_44stem_term(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((std::string)__pyx_v_term));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_44stem_term(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stem_term", 0);
  __Pyx_TraceCall("stem_term", __pyx_f[1], 160, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 160; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":161
 * 
 *     def stem_term(PyQueryEnvironment self, string term):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.stemTerm(term)
 * 
 */
  __Pyx_TraceLine(161,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 161; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":162
 *     def stem_term(PyQueryEnvironment self, string term):
 *         self._check_alive()
 *         return self._thisptr.stemTerm(term)             # <<<<<<<<<<<<<<
 * 
 *     def term_count(PyQueryEnvironment self, string term = ""):
 */
  __Pyx_TraceLine(162,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->_thisptr->stemTerm(__pyx_v_term)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 162; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":160
 *         return self._thisptr.stemFieldCount(term, field)
 * 
 *     def stem_term(PyQueryEnvironment self, string term):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stemTerm(term)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.stem_term", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":164
 *         return self._thisptr.stemTerm(term)
 * 
 *     def term_count(PyQueryEnvironment self, string term = ""):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         if term.length() == 0:
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_47term_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_46term_count[] = "PyQueryEnvironment.term_count(self, string term='')";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_47term_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_term;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("term_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_term,0};
    PyObject* values[1] = {0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (kw_args > 0) {
          PyObject* value = PyDict_GetItem(__pyx_kwds, __pyx_n_s_term);
          if (value) { values[0] = value; kw_args--; }
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "term_count") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else {
      switch (PyTuple_GET_SIZE(__pyx_args)) {
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
    }
    if (values[0]) {
      __pyx_v_term = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    } else {
      __pyx_v_term = __pyx_k__8;
    }
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("term_count", 0, 0, 1, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.term_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_46term_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_term);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_46term_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("term_count", 0);
  __Pyx_TraceCall("term_count", __pyx_f[1], 164, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":165
 * 
 *     def term_count(PyQueryEnvironment self, string term = ""):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         if term.length() == 0:
 *             return self._thisptr.termCount()
 */
  __Pyx_TraceLine(165,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 165; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":166
 *     def term_count(PyQueryEnvironment self, string term = ""):
 *         self._check_alive()
 *         if term.length() == 0:             # <<<<<<<<<<<<<<
 *             return self._thisptr.termCount()
 *         else:
 */
  __Pyx_TraceLine(166,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 166; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = ((__pyx_v_term.length() == 0) != 0);
  if (__pyx_t_2) {

    /* "irtk/indri/query_env.pyx":167
 *         self._check_alive()
 *         if term.length() == 0:
 *             return self._thisptr.termCount()             # <<<<<<<<<<<<<<
 *         else:
 *             return self._thisptr.termCount(term)
 */
    __Pyx_TraceLine(167,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->termCount()); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 167; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;

    /* "irtk/indri/query_env.pyx":166
 *     def term_count(PyQueryEnvironment self, string term = ""):
 *         self._check_alive()
 *         if term.length() == 0:             # <<<<<<<<<<<<<<
 *             return self._thisptr.termCount()
 *         else:
 */
  }

  /* "irtk/indri/query_env.pyx":169
 *             return self._thisptr.termCount()
 *         else:
 *             return self._thisptr.termCount(term)             # <<<<<<<<<<<<<<
 * 
 *     def term_field_count(PyQueryEnvironment self, string term, string field):
 */
  __Pyx_TraceLine(169,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __Pyx_XDECREF(__pyx_r);
    __pyx_t_3 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->termCount(__pyx_v_term)); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 169; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_r = __pyx_t_3;
    __pyx_t_3 = 0;
    goto __pyx_L0;
  }

  /* "irtk/indri/query_env.pyx":164
 *         return self._thisptr.stemTerm(term)
 * 
 *     def term_count(PyQueryEnvironment self, string term = ""):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         if term.length() == 0:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.term_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":171
 *             return self._thisptr.termCount(term)
 * 
 *     def term_field_count(PyQueryEnvironment self, string term, string field):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.termFieldCount(term, field)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_49term_field_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_48term_field_count[] = "PyQueryEnvironment.term_field_count(self, string term, string field)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_49term_field_count(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  std::string __pyx_v_term;
  std::string __pyx_v_field;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("term_field_count (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_term,&__pyx_n_s_field,0};
    PyObject* values[2] = {0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_term)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_field)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("term_field_count", 1, 2, 2, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "term_field_count") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 2) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
    }
    __pyx_v_term = __pyx_convert_string_from_py_std__in_string(values[0]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
    __pyx_v_field = __pyx_convert_string_from_py_std__in_string(values[1]); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("term_field_count", 1, 2, 2, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.term_field_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_48term_field_count(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_term, __pyx_v_field);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_48term_field_count(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_term, std::string __pyx_v_field) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("term_field_count", 0);
  __Pyx_TraceCall("term_field_count", __pyx_f[1], 171, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 171; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":172
 * 
 *     def term_field_count(PyQueryEnvironment self, string term, string field):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.termFieldCount(term, field)
 * 
 */
  __Pyx_TraceLine(172,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 172; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":173
 *     def term_field_count(PyQueryEnvironment self, string term, string field):
 *         self._check_alive()
 *         return self._thisptr.termFieldCount(term, field)             # <<<<<<<<<<<<<<
 * 
 *     def term_count_unique(PyQueryEnvironment self):
 */
  __Pyx_TraceLine(173,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->termFieldCount(__pyx_v_term, __pyx_v_field)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 173; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":171
 *             return self._thisptr.termCount(term)
 * 
 *     def term_field_count(PyQueryEnvironment self, string term, string field):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.termFieldCount(term, field)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.term_field_count", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":175
 *         return self._thisptr.termFieldCount(term, field)
 * 
 *     def term_count_unique(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.termCountUnique()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_51term_count_unique(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_50term_count_unique[] = "PyQueryEnvironment.term_count_unique(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_51term_count_unique(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("term_count_unique (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_50term_count_unique(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_50term_count_unique(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("term_count_unique", 0);
  __Pyx_TraceCall("term_count_unique", __pyx_f[1], 175, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 175; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":176
 * 
 *     def term_count_unique(PyQueryEnvironment self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.termCountUnique()
 * 
 */
  __Pyx_TraceLine(176,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 176; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":177
 *     def term_count_unique(PyQueryEnvironment self):
 *         self._check_alive()
 *         return self._thisptr.termCountUnique()             # <<<<<<<<<<<<<<
 * 
 *     def set_memory(PyQueryEnvironment self, int size):
 */
  __Pyx_TraceLine(177,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_PY_LONG_LONG(__pyx_v_self->_thisptr->termCountUnique()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 177; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":175
 *         return self._thisptr.termFieldCount(term, field)
 * 
 *     def term_count_unique(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.termCountUnique()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.term_count_unique", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":179
 *         return self._thisptr.termCountUnique()
 * 
 *     def set_memory(PyQueryEnvironment self, int size):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.setMemory(size)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_53set_memory(PyObject *__pyx_v_self, PyObject *__pyx_arg_size); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_52set_memory[] = "PyQueryEnvironment.set_memory(self, int size)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_53set_memory(PyObject *__pyx_v_self, PyObject *__pyx_arg_size) {
  int __pyx_v_size;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_memory (wrapper)", 0);
  assert(__pyx_arg_size); {
    __pyx_v_size = __Pyx_PyInt_As_int(__pyx_arg_size); if (unlikely((__pyx_v_size == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_52set_memory(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((int)__pyx_v_size));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_52set_memory(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_size) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_memory", 0);
  __Pyx_TraceCall("set_memory", __pyx_f[1], 179, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 179; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":180
 * 
 *     def set_memory(PyQueryEnvironment self, int size):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         self._thisptr.setMemory(size)
 * 
 */
  __Pyx_TraceLine(180,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 180; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":181
 *     def set_memory(PyQueryEnvironment self, int size):
 *         self._check_alive()
 *         self._thisptr.setMemory(size)             # <<<<<<<<<<<<<<
 * 
 *     def set_baseline(PyQueryEnvironment self, string baseline):
 */
  __Pyx_TraceLine(181,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 181; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_thisptr->setMemory(__pyx_v_size);

  /* "irtk/indri/query_env.pyx":179
 *         return self._thisptr.termCountUnique()
 * 
 *     def set_memory(PyQueryEnvironment self, int size):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         self._thisptr.setMemory(size)
 */

  /* function exit code */
  __pyx_r = Py_None; __Pyx_INCREF(Py_None);
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_memory", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":183
 *         self._thisptr.setMemory(size)
 * 
 *     def set_baseline(PyQueryEnvironment self, string baseline):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.setBaseline(baseline)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_55set_baseline(PyObject *__pyx_v_self, PyObject *__pyx_arg_baseline); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_54set_baseline[] = "PyQueryEnvironment.set_baseline(self, string baseline)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_55set_baseline(PyObject *__pyx_v_self, PyObject *__pyx_arg_baseline) {
  std::string __pyx_v_baseline;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_baseline (wrapper)", 0);
  assert(__pyx_arg_baseline); {
    __pyx_v_baseline = __pyx_convert_string_from_py_std__in_string(__pyx_arg_baseline); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_baseline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_54set_baseline(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((std::string)__pyx_v_baseline));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_54set_baseline(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, std::string __pyx_v_baseline) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_baseline", 0);
  __Pyx_TraceCall("set_baseline", __pyx_f[1], 183, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 183; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":184
 * 
 *     def set_baseline(PyQueryEnvironment self, string baseline):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.setBaseline(baseline)
 * 
 */
  __Pyx_TraceLine(184,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 184; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":185
 *     def set_baseline(PyQueryEnvironment self, string baseline):
 *         self._check_alive()
 *         return self._thisptr.setBaseline(baseline)             # <<<<<<<<<<<<<<
 * 
 *     def set_single_background_model(PyQueryEnvironment self, bool is_single_background_model):
 */
  __Pyx_TraceLine(185,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_void_to_None(__pyx_v_self->_thisptr->setBaseline(__pyx_v_baseline)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 185; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":183
 *         self._thisptr.setMemory(size)
 * 
 *     def set_baseline(PyQueryEnvironment self, string baseline):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.setBaseline(baseline)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_baseline", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":187
 *         return self._thisptr.setBaseline(baseline)
 * 
 *     def set_single_background_model(PyQueryEnvironment self, bool is_single_background_model):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.setSingleBackgroundModel(is_single_background_model)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_57set_single_background_model(PyObject *__pyx_v_self, PyObject *__pyx_arg_is_single_background_model); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_56set_single_background_model[] = "PyQueryEnvironment.set_single_background_model(self, bool is_single_background_model)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_57set_single_background_model(PyObject *__pyx_v_self, PyObject *__pyx_arg_is_single_background_model) {
  bool __pyx_v_is_single_background_model;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_single_background_model (wrapper)", 0);
  assert(__pyx_arg_is_single_background_model); {
    __pyx_v_is_single_background_model = __Pyx_PyObject_IsTrue(__pyx_arg_is_single_background_model); if (unlikely((__pyx_v_is_single_background_model == (bool)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_single_background_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_56set_single_background_model(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((bool)__pyx_v_is_single_background_model));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_56set_single_background_model(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, bool __pyx_v_is_single_background_model) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_single_background_model", 0);
  __Pyx_TraceCall("set_single_background_model", __pyx_f[1], 187, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 187; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":188
 * 
 *     def set_single_background_model(PyQueryEnvironment self, bool is_single_background_model):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.setSingleBackgroundModel(is_single_background_model)
 * 
 */
  __Pyx_TraceLine(188,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 188; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":189
 *     def set_single_background_model(PyQueryEnvironment self, bool is_single_background_model):
 *         self._check_alive()
 *         return self._thisptr.setSingleBackgroundModel(is_single_background_model)             # <<<<<<<<<<<<<<
 * 
 *     def set_max_wildcard_terms(PyQueryEnvironment self, int max_terms):
 */
  __Pyx_TraceLine(189,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_void_to_None(__pyx_v_self->_thisptr->setSingleBackgroundModel(__pyx_v_is_single_background_model)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 189; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":187
 *         return self._thisptr.setBaseline(baseline)
 * 
 *     def set_single_background_model(PyQueryEnvironment self, bool is_single_background_model):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.setSingleBackgroundModel(is_single_background_model)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_single_background_model", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":191
 *         return self._thisptr.setSingleBackgroundModel(is_single_background_model)
 * 
 *     def set_max_wildcard_terms(PyQueryEnvironment self, int max_terms):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.setMaxWildcardTerms(max_terms)
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_59set_max_wildcard_terms(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_terms); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_58set_max_wildcard_terms[] = "PyQueryEnvironment.set_max_wildcard_terms(self, int max_terms)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_59set_max_wildcard_terms(PyObject *__pyx_v_self, PyObject *__pyx_arg_max_terms) {
  int __pyx_v_max_terms;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("set_max_wildcard_terms (wrapper)", 0);
  assert(__pyx_arg_max_terms); {
    __pyx_v_max_terms = __Pyx_PyInt_As_int(__pyx_arg_max_terms); if (unlikely((__pyx_v_max_terms == (int)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_max_wildcard_terms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_58set_max_wildcard_terms(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), ((int)__pyx_v_max_terms));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_58set_max_wildcard_terms(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, int __pyx_v_max_terms) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("set_max_wildcard_terms", 0);
  __Pyx_TraceCall("set_max_wildcard_terms", __pyx_f[1], 191, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 191; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":192
 * 
 *     def set_max_wildcard_terms(PyQueryEnvironment self, int max_terms):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.setMaxWildcardTerms(max_terms)
 * 
 */
  __Pyx_TraceLine(192,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 192; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":193
 *     def set_max_wildcard_terms(PyQueryEnvironment self, int max_terms):
 *         self._check_alive()
 *         return self._thisptr.setMaxWildcardTerms(max_terms)             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(PyQueryEnvironment self):
 */
  __Pyx_TraceLine(193,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_void_to_None(__pyx_v_self->_thisptr->setMaxWildcardTerms(__pyx_v_max_terms)); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 193; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":191
 *         return self._thisptr.setSingleBackgroundModel(is_single_background_model)
 * 
 *     def set_max_wildcard_terms(PyQueryEnvironment self, int max_terms):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.setMaxWildcardTerms(max_terms)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.set_max_wildcard_terms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":195
 *         return self._thisptr.setMaxWildcardTerms(max_terms)
 * 
 *     def __enter__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_61__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_60__enter__[] = "PyQueryEnvironment.__enter__(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_61__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_60__enter__(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_60__enter__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_TraceCall("__enter__", __pyx_f[1], 195, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 195; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":196
 * 
 *     def __enter__(PyQueryEnvironment self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_TraceLine(196,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 196; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":197
 *     def __enter__(PyQueryEnvironment self):
 *         self._check_alive()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(PyQueryEnvironment self, exc_tp, exc_val, exc_tb):
 */
  __Pyx_TraceLine(197,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 197; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":195
 *         return self._thisptr.setMaxWildcardTerms(max_terms)
 * 
 *     def __enter__(PyQueryEnvironment self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":199
 *         return self
 * 
 *     def __exit__(PyQueryEnvironment self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_63__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_62__exit__[] = "PyQueryEnvironment.__exit__(self, exc_tp, exc_val, exc_tb)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_63__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_tp = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_tp,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_tp = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_62__exit__(((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)__pyx_v_self), __pyx_v_exc_tp, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_18PyQueryEnvironment_62__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_TraceCall("__exit__", __pyx_f[1], 199, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 199; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":200
 * 
 *     def __exit__(PyQueryEnvironment self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL
 */
  __Pyx_TraceLine(200,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 200; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":201
 *     def __exit__(PyQueryEnvironment self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 *             self._thisptr = NULL
 *         return False
 */
    __Pyx_TraceLine(201,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 201; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    delete __pyx_v_self->_thisptr;

    /* "irtk/indri/query_env.pyx":202
 *         if self._thisptr != NULL:
 *             del self._thisptr
 *             self._thisptr = NULL             # <<<<<<<<<<<<<<
 *         return False
 * 
 */
    __Pyx_TraceLine(202,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 202; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_self->_thisptr = NULL;

    /* "irtk/indri/query_env.pyx":200
 * 
 *     def __exit__(PyQueryEnvironment self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL
 */
  }

  /* "irtk/indri/query_env.pyx":203
 *             del self._thisptr
 *             self._thisptr = NULL
 *         return False             # <<<<<<<<<<<<<<
 * 
 * cdef class PyDocumentVector:
 */
  __Pyx_TraceLine(203,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 203; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":199
 *         return self
 * 
 *     def __exit__(PyQueryEnvironment self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyQueryEnvironment.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":209
 * 
 *     @staticmethod
 *     cdef init_vector(DocumentVector*ptr):             # <<<<<<<<<<<<<<
 *         v = PyDocumentVector()
 *         v._thisptr = ptr
 */

static PyObject *__pyx_f_4irtk_5indri_9query_env_16PyDocumentVector_init_vector(indri::api::DocumentVector *__pyx_v_ptr) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_v = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_vector", 0);
  __Pyx_TraceCall("init_vector", __pyx_f[1], 209, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 209; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":210
 *     @staticmethod
 *     cdef init_vector(DocumentVector*ptr):
 *         v = PyDocumentVector()             # <<<<<<<<<<<<<<
 *         v._thisptr = ptr
 *         return v
 */
  __Pyx_TraceLine(210,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4irtk_5indri_9query_env_PyDocumentVector), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 210; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "irtk/indri/query_env.pyx":211
 *     cdef init_vector(DocumentVector*ptr):
 *         v = PyDocumentVector()
 *         v._thisptr = ptr             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __Pyx_TraceLine(211,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 211; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_v->_thisptr = __pyx_v_ptr;

  /* "irtk/indri/query_env.pyx":212
 *         v = PyDocumentVector()
 *         v._thisptr = ptr
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(PyDocumentVector self):
 */
  __Pyx_TraceLine(212,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 212; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = ((PyObject *)__pyx_v_v);
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":209
 * 
 *     @staticmethod
 *     cdef init_vector(DocumentVector*ptr):             # <<<<<<<<<<<<<<
 *         v = PyDocumentVector()
 *         v._thisptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.init_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":214
 *         return v
 * 
 *     def __cinit__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector___cinit__(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector___cinit__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 214, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 214; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":215
 * 
 *     def __cinit__(PyDocumentVector self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(PyDocumentVector self):
 */
  __Pyx_TraceLine(215,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 215; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_thisptr = NULL;

  /* "irtk/indri/query_env.pyx":214
 *         return v
 * 
 *     def __cinit__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":217
 *         self._thisptr = NULL
 * 
 *     def __init__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_2__init__(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_2__init__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[1], 217, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 217; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":218
 * 
 *     def __init__(PyDocumentVector self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef int _check_alive(PyDocumentVector self) except -1:
 */
  __Pyx_TraceLine(218,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 218; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_thisptr = NULL;

  /* "irtk/indri/query_env.pyx":217
 *         self._thisptr = NULL
 * 
 *     def __init__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":220
 *         self._thisptr = NULL
 * 
 *     cdef int _check_alive(PyDocumentVector self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

static int __pyx_f_4irtk_5indri_9query_env_16PyDocumentVector__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_alive", 0);
  __Pyx_TraceCall("_check_alive", __pyx_f[1], 220, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 220; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":221
 * 
 *     cdef int _check_alive(PyDocumentVector self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  __Pyx_TraceLine(221,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 221; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":222
 *     cdef int _check_alive(PyDocumentVector self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
    __Pyx_TraceLine(222,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__9, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "irtk/indri/query_env.pyx":221
 * 
 *     cdef int _check_alive(PyDocumentVector self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  }

  /* "irtk/indri/query_env.pyx":224
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(PyDocumentVector self):
 */
  __Pyx_TraceLine(224,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 224; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "irtk/indri/query_env.pyx":220
 *         self._thisptr = NULL
 * 
 *     cdef int _check_alive(PyDocumentVector self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector._check_alive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":226
 *             return 0
 * 
 *     def __dealloc__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static void __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_4__dealloc__(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_4__dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[1], 226, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 226; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":227
 * 
 *     def __dealloc__(PyDocumentVector self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  __Pyx_TraceLine(227,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 227; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":228
 *     def __dealloc__(PyDocumentVector self):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 * 
 *     def stems(PyDocumentVector self):
 */
    __Pyx_TraceLine(228,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 228; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    delete __pyx_v_self->_thisptr;

    /* "irtk/indri/query_env.pyx":227
 * 
 *     def __dealloc__(PyDocumentVector self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  }

  /* "irtk/indri/query_env.pyx":226
 *             return 0
 * 
 *     def __dealloc__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("irtk.indri.query_env.PyDocumentVector.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "irtk/indri/query_env.pyx":230
 *             del self._thisptr
 * 
 *     def stems(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stems()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_7stems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_6stems[] = "PyDocumentVector.stems(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_7stems(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("stems (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_6stems(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_6stems(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("stems", 0);
  __Pyx_TraceCall("stems", __pyx_f[1], 230, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 230; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":231
 * 
 *     def stems(PyDocumentVector self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.stems()
 * 
 */
  __Pyx_TraceLine(231,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 231; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":232
 *     def stems(PyDocumentVector self):
 *         self._check_alive()
 *         return self._thisptr.stems()             # <<<<<<<<<<<<<<
 * 
 *     def positions(PyDocumentVector self):
 */
  __Pyx_TraceLine(232,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_std_3a__3a_string(__pyx_v_self->_thisptr->stems()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 232; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":230
 *             del self._thisptr
 * 
 *     def stems(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.stems()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.stems", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":234
 *         return self._thisptr.stems()
 * 
 *     def positions(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.positions()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_9positions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_8positions[] = "PyDocumentVector.positions(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_9positions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("positions (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_8positions(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_8positions(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("positions", 0);
  __Pyx_TraceCall("positions", __pyx_f[1], 234, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 234; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":235
 * 
 *     def positions(PyDocumentVector self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.positions()
 * 
 */
  __Pyx_TraceLine(235,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 235; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":236
 *     def positions(PyDocumentVector self):
 *         self._check_alive()
 *         return self._thisptr.positions()             # <<<<<<<<<<<<<<
 * 
 *     def fields(PyDocumentVector self):
 */
  __Pyx_TraceLine(236,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_int(__pyx_v_self->_thisptr->positions()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 236; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":234
 *         return self._thisptr.stems()
 * 
 *     def positions(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.positions()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.positions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":238
 *         return self._thisptr.positions()
 * 
 *     def fields(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[Field] field_vec
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_11fields(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_10fields[] = "PyDocumentVector.fields(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_11fields(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("fields (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_10fields(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_10fields(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  std::vector<struct indri::api::DocumentVector::Field>  __pyx_v_field_vec;
  PyObject *__pyx_v_fields = NULL;
  struct indri::api::DocumentVector::Field __pyx_v_f;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  std::vector<struct indri::api::DocumentVector::Field> ::iterator __pyx_t_3;
  struct indri::api::DocumentVector::Field __pyx_t_4;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  PyObject *__pyx_t_7 = NULL;
  int __pyx_t_8;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("fields", 0);
  __Pyx_TraceCall("fields", __pyx_f[1], 238, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 238; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":239
 * 
 *     def fields(PyDocumentVector self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         cdef vector[Field] field_vec
 *         fields = []
 */
  __Pyx_TraceLine(239,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 239; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":241
 *         self._check_alive()
 *         cdef vector[Field] field_vec
 *         fields = []             # <<<<<<<<<<<<<<
 *         field_vec = self._thisptr.fields()
 *         for f in field_vec:
 */
  __Pyx_TraceLine(241,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 241; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_fields = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "irtk/indri/query_env.pyx":242
 *         cdef vector[Field] field_vec
 *         fields = []
 *         field_vec = self._thisptr.fields()             # <<<<<<<<<<<<<<
 *         for f in field_vec:
 *             fields.append((f.name, f.begin, f.end))
 */
  __Pyx_TraceLine(242,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 242; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_field_vec = __pyx_v_self->_thisptr->fields();

  /* "irtk/indri/query_env.pyx":243
 *         fields = []
 *         field_vec = self._thisptr.fields()
 *         for f in field_vec:             # <<<<<<<<<<<<<<
 *             fields.append((f.name, f.begin, f.end))
 *         return fields
 */
  __Pyx_TraceLine(243,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_3 = __pyx_v_field_vec.begin();
  for (;;) {
    if (!(__pyx_t_3 != __pyx_v_field_vec.end())) break;
    __pyx_t_4 = *__pyx_t_3;
    ++__pyx_t_3;
    __pyx_v_f = __pyx_t_4;

    /* "irtk/indri/query_env.pyx":244
 *         field_vec = self._thisptr.fields()
 *         for f in field_vec:
 *             fields.append((f.name, f.begin, f.end))             # <<<<<<<<<<<<<<
 *         return fields
 * 
 */
    __Pyx_TraceLine(244,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_f.name); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __pyx_t_5 = __Pyx_PyInt_From_int(__pyx_v_f.begin); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = __Pyx_PyInt_From_int(__pyx_v_f.end); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __pyx_t_7 = PyTuple_New(3); if (unlikely(!__pyx_t_7)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_7);
    __Pyx_GIVEREF(__pyx_t_2);
    PyTuple_SET_ITEM(__pyx_t_7, 0, __pyx_t_2);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_7, 1, __pyx_t_5);
    __Pyx_GIVEREF(__pyx_t_6);
    PyTuple_SET_ITEM(__pyx_t_7, 2, __pyx_t_6);
    __pyx_t_2 = 0;
    __pyx_t_5 = 0;
    __pyx_t_6 = 0;
    __pyx_t_8 = __Pyx_PyList_Append(__pyx_v_fields, __pyx_t_7); if (unlikely(__pyx_t_8 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 244; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_7); __pyx_t_7 = 0;

    /* "irtk/indri/query_env.pyx":243
 *         fields = []
 *         field_vec = self._thisptr.fields()
 *         for f in field_vec:             # <<<<<<<<<<<<<<
 *             fields.append((f.name, f.begin, f.end))
 *         return fields
 */
    __Pyx_TraceLine(243,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 243; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  }

  /* "irtk/indri/query_env.pyx":245
 *         for f in field_vec:
 *             fields.append((f.name, f.begin, f.end))
 *         return fields             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(PyDocumentVector self):
 */
  __Pyx_TraceLine(245,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 245; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_fields);
  __pyx_r = __pyx_v_fields;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":238
 *         return self._thisptr.positions()
 * 
 *     def fields(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[Field] field_vec
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_XDECREF(__pyx_t_7);
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.fields", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_fields);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":247
 *         return fields
 * 
 *     def __enter__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_13__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_12__enter__[] = "PyDocumentVector.__enter__(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_13__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_12__enter__(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_12__enter__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_TraceCall("__enter__", __pyx_f[1], 247, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 247; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":248
 * 
 *     def __enter__(PyDocumentVector self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_TraceLine(248,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 248; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":249
 *     def __enter__(PyDocumentVector self):
 *         self._check_alive()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(PyDocumentVector self, exc_tp, exc_val, exc_tb):
 */
  __Pyx_TraceLine(249,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 249; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":247
 *         return fields
 * 
 *     def __enter__(PyDocumentVector self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":251
 *         return self
 * 
 *     def __exit__(PyDocumentVector self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_15__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_14__exit__[] = "PyDocumentVector.__exit__(self, exc_tp, exc_val, exc_tb)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_15__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_tp = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_tp,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_tp = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_14__exit__(((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)__pyx_v_self), __pyx_v_exc_tp, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyDocumentVector_14__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_TraceCall("__exit__", __pyx_f[1], 251, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 251; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":252
 * 
 *     def __exit__(PyDocumentVector self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 */
  __Pyx_TraceLine(252,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 252; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":253
 *     def __exit__(PyDocumentVector self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 *             self._thisptr = NULL  # inform __dealloc__
 *         return False  # propagate exceptions
 */
    __Pyx_TraceLine(253,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 253; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    delete __pyx_v_self->_thisptr;

    /* "irtk/indri/query_env.pyx":254
 *         if self._thisptr != NULL:
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__             # <<<<<<<<<<<<<<
 *         return False  # propagate exceptions
 * 
 */
    __Pyx_TraceLine(254,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 254; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_self->_thisptr = NULL;

    /* "irtk/indri/query_env.pyx":252
 * 
 *     def __exit__(PyDocumentVector self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 */
  }

  /* "irtk/indri/query_env.pyx":255
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 *         return False  # propagate exceptions             # <<<<<<<<<<<<<<
 * 
 * cdef class PyIndriResults:
 */
  __Pyx_TraceLine(255,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 255; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":251
 *         return self
 * 
 *     def __exit__(PyDocumentVector self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyDocumentVector.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":260
 *     cdef vector[QueryResult] results
 * 
 *     def results_iterator(PyIndriResults self):             # <<<<<<<<<<<<<<
 *         cdef vector[QueryResult].iterator it = self.results.begin()
 *         output = []
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_14PyIndriResults_1results_iterator(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_14PyIndriResults_results_iterator[] = "PyIndriResults.results_iterator(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_14PyIndriResults_1results_iterator(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("results_iterator (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_14PyIndriResults_results_iterator(((struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_14PyIndriResults_results_iterator(struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *__pyx_v_self) {
  std::vector<indri::api::QueryResult> ::iterator __pyx_v_it;
  PyObject *__pyx_v_output = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_t_2;
  PyObject *__pyx_t_3 = NULL;
  PyObject *__pyx_t_4 = NULL;
  PyObject *__pyx_t_5 = NULL;
  PyObject *__pyx_t_6 = NULL;
  int __pyx_t_7;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("results_iterator", 0);
  __Pyx_TraceCall("results_iterator", __pyx_f[1], 260, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 260; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":261
 * 
 *     def results_iterator(PyIndriResults self):
 *         cdef vector[QueryResult].iterator it = self.results.begin()             # <<<<<<<<<<<<<<
 *         output = []
 *         while it != self.results.end():
 */
  __Pyx_TraceLine(261,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 261; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_it = __pyx_v_self->results.begin();

  /* "irtk/indri/query_env.pyx":262
 *     def results_iterator(PyIndriResults self):
 *         cdef vector[QueryResult].iterator it = self.results.begin()
 *         output = []             # <<<<<<<<<<<<<<
 *         while it != self.results.end():
 *             output.append((deref(it).docid, deref(it).documentName, deref(it).snippet, deref(it).score))
 */
  __Pyx_TraceLine(262,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 262; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_output = ((PyObject*)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "irtk/indri/query_env.pyx":263
 *         cdef vector[QueryResult].iterator it = self.results.begin()
 *         output = []
 *         while it != self.results.end():             # <<<<<<<<<<<<<<
 *             output.append((deref(it).docid, deref(it).documentName, deref(it).snippet, deref(it).score))
 *             inc(it)
 */
  __Pyx_TraceLine(263,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 263; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  while (1) {
    __pyx_t_2 = ((__pyx_v_it != __pyx_v_self->results.end()) != 0);
    if (!__pyx_t_2) break;

    /* "irtk/indri/query_env.pyx":264
 *         output = []
 *         while it != self.results.end():
 *             output.append((deref(it).docid, deref(it).documentName, deref(it).snippet, deref(it).score))             # <<<<<<<<<<<<<<
 *             inc(it)
 *         return output
 */
    __Pyx_TraceLine(264,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_1 = __Pyx_PyInt_From_lemur_3a__3a_api_3a__3a_TERMID_T((*__pyx_v_it).docid); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = __pyx_convert_PyStr_string_to_py_std__in_string((*__pyx_v_it).documentName); if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_3);
    __pyx_t_4 = __pyx_convert_PyStr_string_to_py_std__in_string((*__pyx_v_it).snippet); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    __pyx_t_5 = PyFloat_FromDouble((*__pyx_v_it).score); if (unlikely(!__pyx_t_5)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_5);
    __pyx_t_6 = PyTuple_New(4); if (unlikely(!__pyx_t_6)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_6);
    __Pyx_GIVEREF(__pyx_t_1);
    PyTuple_SET_ITEM(__pyx_t_6, 0, __pyx_t_1);
    __Pyx_GIVEREF(__pyx_t_3);
    PyTuple_SET_ITEM(__pyx_t_6, 1, __pyx_t_3);
    __Pyx_GIVEREF(__pyx_t_4);
    PyTuple_SET_ITEM(__pyx_t_6, 2, __pyx_t_4);
    __Pyx_GIVEREF(__pyx_t_5);
    PyTuple_SET_ITEM(__pyx_t_6, 3, __pyx_t_5);
    __pyx_t_1 = 0;
    __pyx_t_3 = 0;
    __pyx_t_4 = 0;
    __pyx_t_5 = 0;
    __pyx_t_7 = __Pyx_PyList_Append(__pyx_v_output, __pyx_t_6); if (unlikely(__pyx_t_7 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 264; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_6); __pyx_t_6 = 0;

    /* "irtk/indri/query_env.pyx":265
 *         while it != self.results.end():
 *             output.append((deref(it).docid, deref(it).documentName, deref(it).snippet, deref(it).score))
 *             inc(it)             # <<<<<<<<<<<<<<
 *         return output
 * 
 */
    __Pyx_TraceLine(265,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 265; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    (++__pyx_v_it);
  }

  /* "irtk/indri/query_env.pyx":266
 *             output.append((deref(it).docid, deref(it).documentName, deref(it).snippet, deref(it).score))
 *             inc(it)
 *         return output             # <<<<<<<<<<<<<<
 * 
 * cdef class PyParsedDocument:
 */
  __Pyx_TraceLine(266,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 266; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_output);
  __pyx_r = __pyx_v_output;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":260
 *     cdef vector[QueryResult] results
 * 
 *     def results_iterator(PyIndriResults self):             # <<<<<<<<<<<<<<
 *         cdef vector[QueryResult].iterator it = self.results.begin()
 *         output = []
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_3);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_XDECREF(__pyx_t_5);
  __Pyx_XDECREF(__pyx_t_6);
  __Pyx_AddTraceback("irtk.indri.query_env.PyIndriResults.results_iterator", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_output);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":271
 *     cdef ParsedDocument*_thisptr
 *     @staticmethod
 *     cdef PyParsedDocument init_vector(ParsedDocument*ptr):             # <<<<<<<<<<<<<<
 *         v = PyParsedDocument()
 *         v._thisptr = ptr
 */

static struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_f_4irtk_5indri_9query_env_16PyParsedDocument_init_vector(indri::api::ParsedDocument *__pyx_v_ptr) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_v = NULL;
  struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_vector", 0);
  __Pyx_TraceCall("init_vector", __pyx_f[1], 271, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 271; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":272
 *     @staticmethod
 *     cdef PyParsedDocument init_vector(ParsedDocument*ptr):
 *         v = PyParsedDocument()             # <<<<<<<<<<<<<<
 *         v._thisptr = ptr
 *         return v
 */
  __Pyx_TraceLine(272,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4irtk_5indri_9query_env_PyParsedDocument), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 272; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "irtk/indri/query_env.pyx":273
 *     cdef PyParsedDocument init_vector(ParsedDocument*ptr):
 *         v = PyParsedDocument()
 *         v._thisptr = ptr             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __Pyx_TraceLine(273,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 273; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_v->_thisptr = __pyx_v_ptr;

  /* "irtk/indri/query_env.pyx":274
 *         v = PyParsedDocument()
 *         v._thisptr = ptr
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     def __cinit__(PyParsedDocument self):
 */
  __Pyx_TraceLine(274,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 274; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":271
 *     cdef ParsedDocument*_thisptr
 *     @staticmethod
 *     cdef PyParsedDocument init_vector(ParsedDocument*ptr):             # <<<<<<<<<<<<<<
 *         v = PyParsedDocument()
 *         v._thisptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.init_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":276
 *         return v
 * 
 *     def __cinit__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_1__cinit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__cinit__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__cinit__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__cinit__", 0))) return -1;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument___cinit__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument___cinit__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__cinit__", 0);
  __Pyx_TraceCall("__cinit__", __pyx_f[1], 276, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 276; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":277
 * 
 *     def __cinit__(PyParsedDocument self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __init__(PyParsedDocument self):
 */
  __Pyx_TraceLine(277,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 277; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_thisptr = NULL;

  /* "irtk/indri/query_env.pyx":276
 *         return v
 * 
 *     def __cinit__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.__cinit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":279
 *         self._thisptr = NULL
 * 
 *     def __init__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_3__init__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__init__ (wrapper)", 0);
  if (unlikely(PyTuple_GET_SIZE(__pyx_args) > 0)) {
    __Pyx_RaiseArgtupleInvalid("__init__", 1, 0, 0, PyTuple_GET_SIZE(__pyx_args)); return -1;}
  if (unlikely(__pyx_kwds) && unlikely(PyDict_Size(__pyx_kwds) > 0) && unlikely(!__Pyx_CheckKeywordStrings(__pyx_kwds, "__init__", 0))) return -1;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_2__init__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_2__init__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__init__", 0);
  __Pyx_TraceCall("__init__", __pyx_f[1], 279, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 279; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":280
 * 
 *     def __init__(PyParsedDocument self):
 *         self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     cdef int _check_alive(PyParsedDocument self) except -1:
 */
  __Pyx_TraceLine(280,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 280; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_self->_thisptr = NULL;

  /* "irtk/indri/query_env.pyx":279
 *         self._thisptr = NULL
 * 
 *     def __init__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._thisptr = NULL
 * 
 */

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.__init__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":282
 *         self._thisptr = NULL
 * 
 *     cdef int _check_alive(PyParsedDocument self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

static int __pyx_f_4irtk_5indri_9query_env_16PyParsedDocument__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_alive", 0);
  __Pyx_TraceCall("_check_alive", __pyx_f[1], 282, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 282; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":283
 * 
 *     cdef int _check_alive(PyParsedDocument self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  __Pyx_TraceLine(283,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 283; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":284
 *     cdef int _check_alive(PyParsedDocument self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
    __Pyx_TraceLine(284,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__10, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "irtk/indri/query_env.pyx":283
 * 
 *     cdef int _check_alive(PyParsedDocument self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  }

  /* "irtk/indri/query_env.pyx":286
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(PyParsedDocument self):
 */
  __Pyx_TraceLine(286,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 286; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "irtk/indri/query_env.pyx":282
 *         self._thisptr = NULL
 * 
 *     cdef int _check_alive(PyParsedDocument self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument._check_alive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":288
 *             return 0
 * 
 *     def __dealloc__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static void __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_5__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_5__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4__dealloc__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4__dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[1], 288, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 288; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":289
 * 
 *     def __dealloc__(PyParsedDocument self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  __Pyx_TraceLine(289,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 289; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":290
 *     def __dealloc__(PyParsedDocument self):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 * 
 *     property text:
 */
    __Pyx_TraceLine(290,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 290; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    delete __pyx_v_self->_thisptr;

    /* "irtk/indri/query_env.pyx":289
 * 
 *     def __dealloc__(PyParsedDocument self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 * 
 */
  }

  /* "irtk/indri/query_env.pyx":288
 *             return 0
 * 
 *     def __dealloc__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("irtk.indri.query_env.PyParsedDocument.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "irtk/indri/query_env.pyx":294
 *     property text:
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.text             # <<<<<<<<<<<<<<
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.text = <char*> value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_4text_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_4text_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4text___get__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4text___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 294, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_self->_thisptr->text); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 294; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.text.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":295
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.text
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.text = <char*> value             # <<<<<<<<<<<<<<
 * 
 *     property textLength:
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_4text_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_4text_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4text_2__set__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_4text_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 295, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 295; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_thisptr->text = ((char *)__pyx_t_2);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.text.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":299
 *     property textLength:
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.textLength             # <<<<<<<<<<<<<<
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.textLength = <size_t> value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10textLength___get__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10textLength___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 299, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_thisptr->textLength); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 299; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.textLength.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":300
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.textLength
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.textLength = <size_t> value             # <<<<<<<<<<<<<<
 * 
 *     property content:
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_2__set__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 300, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 300; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_thisptr->textLength = ((size_t)__pyx_t_2);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.textLength.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":304
 *     property content:
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.content             # <<<<<<<<<<<<<<
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.content = <char*> value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7content_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7content_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_7content___get__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_7content___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 304, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyStr_FromString(__pyx_v_self->_thisptr->content); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 304; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.content.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":305
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.content
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.content = <char*> value             # <<<<<<<<<<<<<<
 * 
 *     property contentLength:
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7content_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7content_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_7content_2__set__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_7content_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  char *__pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 305, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyObject_AsString(__pyx_v_value); if (unlikely((!__pyx_t_2) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 305; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_thisptr->content = ((char *)__pyx_t_2);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.content.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":309
 *     property contentLength:
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.contentLength             # <<<<<<<<<<<<<<
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.contentLength = <size_t> value
 * 
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength___get__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 309, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_FromSize_t(__pyx_v_self->_thisptr->contentLength); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 309; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.contentLength.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":310
 * 
 *         def __get__(PyParsedDocument self): self._check_alive(); return self._thisptr.contentLength
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.contentLength = <size_t> value             # <<<<<<<<<<<<<<
 * 
 *     def get_content(PyParsedDocument self):
 */

/* Python wrapper */
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value); /*proto*/
static int __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_3__set__(PyObject *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__set__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_2__set__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self), ((PyObject *)__pyx_v_value));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static int __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_2__set__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, PyObject *__pyx_v_value) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  size_t __pyx_t_2;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__set__", 0);
  __Pyx_TraceCall("__set__", __pyx_f[1], 310, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_t_2 = __Pyx_PyInt_As_size_t(__pyx_v_value); if (unlikely((__pyx_t_2 == (size_t)-1) && PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 310; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_self->_thisptr->contentLength = ((size_t)__pyx_t_2);

  /* function exit code */
  __pyx_r = 0;
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.contentLength.__set__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":312
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.contentLength = <size_t> value
 * 
 *     def get_content(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.getContent()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7get_content(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_6get_content[] = "PyParsedDocument.get_content(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7get_content(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("get_content (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_6get_content(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_6get_content(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("get_content", 0);
  __Pyx_TraceCall("get_content", __pyx_f[1], 312, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 312; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":313
 * 
 *     def get_content(PyParsedDocument self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.getContent()
 * 
 */
  __Pyx_TraceLine(313,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 313; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":314
 *     def get_content(PyParsedDocument self):
 *         self._check_alive()
 *         return self._thisptr.getContent()             # <<<<<<<<<<<<<<
 * 
 *     def positions(PyParsedDocument self):
 */
  __Pyx_TraceLine(314,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_PyStr_string_to_py_std__in_string(__pyx_v_self->_thisptr->getContent()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 314; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":312
 *         def __set__(PyParsedDocument self, value): self._check_alive(); self._thisptr.contentLength = <size_t> value
 * 
 *     def get_content(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.getContent()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.get_content", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":316
 *         return self._thisptr.getContent()
 * 
 *     def positions(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[TermExtent] vecs = self._thisptr.positions_py()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_9positions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_8positions[] = "PyParsedDocument.positions(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_9positions(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("positions (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_8positions(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_8positions(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  std::vector<indri::parse::TermExtent>  __pyx_v_vecs;
  std::vector<indri::parse::TermExtent> ::iterator __pyx_v_it;
  PyObject *__pyx_v_results = NULL;
  struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_doc = NULL;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_t_3;
  int __pyx_t_4;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("positions", 0);
  __Pyx_TraceCall("positions", __pyx_f[1], 316, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 316; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":317
 * 
 *     def positions(PyParsedDocument self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         cdef vector[TermExtent] vecs = self._thisptr.positions_py()
 *         cdef vector[TermExtent].iterator it = vecs.begin()
 */
  __Pyx_TraceLine(317,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 317; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":318
 *     def positions(PyParsedDocument self):
 *         self._check_alive()
 *         cdef vector[TermExtent] vecs = self._thisptr.positions_py()             # <<<<<<<<<<<<<<
 *         cdef vector[TermExtent].iterator it = vecs.begin()
 *         results = []
 */
  __Pyx_TraceLine(318,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 318; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_vecs = __pyx_v_self->_thisptr->positions_py();

  /* "irtk/indri/query_env.pyx":319
 *         self._check_alive()
 *         cdef vector[TermExtent] vecs = self._thisptr.positions_py()
 *         cdef vector[TermExtent].iterator it = vecs.begin()             # <<<<<<<<<<<<<<
 *         results = []
 *         while it != vecs.end():
 */
  __Pyx_TraceLine(319,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 319; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_it = __pyx_v_vecs.begin();

  /* "irtk/indri/query_env.pyx":320
 *         cdef vector[TermExtent] vecs = self._thisptr.positions_py()
 *         cdef vector[TermExtent].iterator it = vecs.begin()
 *         results = []             # <<<<<<<<<<<<<<
 *         while it != vecs.end():
 *             doc = PyTermExtent.init_vector(&deref(it))
 */
  __Pyx_TraceLine(320,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 320; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_v_results = ((PyObject*)__pyx_t_2);
  __pyx_t_2 = 0;

  /* "irtk/indri/query_env.pyx":321
 *         cdef vector[TermExtent].iterator it = vecs.begin()
 *         results = []
 *         while it != vecs.end():             # <<<<<<<<<<<<<<
 *             doc = PyTermExtent.init_vector(&deref(it))
 *             inc(it)
 */
  __Pyx_TraceLine(321,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 321; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  while (1) {
    __pyx_t_3 = ((__pyx_v_it != __pyx_v_vecs.end()) != 0);
    if (!__pyx_t_3) break;

    /* "irtk/indri/query_env.pyx":322
 *         results = []
 *         while it != vecs.end():
 *             doc = PyTermExtent.init_vector(&deref(it))             # <<<<<<<<<<<<<<
 *             inc(it)
 *             results.append(doc)
 */
    __Pyx_TraceLine(322,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = ((PyObject *)__pyx_f_4irtk_5indri_9query_env_12PyTermExtent_init_vector((&(*__pyx_v_it)))); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 322; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_XDECREF_SET(__pyx_v_doc, ((struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *)__pyx_t_2));
    __pyx_t_2 = 0;

    /* "irtk/indri/query_env.pyx":323
 *         while it != vecs.end():
 *             doc = PyTermExtent.init_vector(&deref(it))
 *             inc(it)             # <<<<<<<<<<<<<<
 *             results.append(doc)
 *         return results
 */
    __Pyx_TraceLine(323,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 323; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    (++__pyx_v_it);

    /* "irtk/indri/query_env.pyx":324
 *             doc = PyTermExtent.init_vector(&deref(it))
 *             inc(it)
 *             results.append(doc)             # <<<<<<<<<<<<<<
 *         return results
 * 
 */
    __Pyx_TraceLine(324,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_4 = __Pyx_PyList_Append(__pyx_v_results, ((PyObject *)__pyx_v_doc)); if (unlikely(__pyx_t_4 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 324; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }

  /* "irtk/indri/query_env.pyx":325
 *             inc(it)
 *             results.append(doc)
 *         return results             # <<<<<<<<<<<<<<
 * 
 *     def terms(PyParsedDocument self):
 */
  __Pyx_TraceLine(325,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 325; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(__pyx_v_results);
  __pyx_r = __pyx_v_results;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":316
 *         return self._thisptr.getContent()
 * 
 *     def positions(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[TermExtent] vecs = self._thisptr.positions_py()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.positions", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_results);
  __Pyx_XDECREF((PyObject *)__pyx_v_doc);
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":327
 *         return results
 * 
 *     def terms(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.terms_py()
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_11terms(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_10terms[] = "PyParsedDocument.terms(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_11terms(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("terms (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10terms(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_10terms(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("terms", 0);
  __Pyx_TraceCall("terms", __pyx_f[1], 327, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 327; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":328
 * 
 *     def terms(PyParsedDocument self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self._thisptr.terms_py()
 * 
 */
  __Pyx_TraceLine(328,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 328; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":329
 *     def terms(PyParsedDocument self):
 *         self._check_alive()
 *         return self._thisptr.terms_py()             # <<<<<<<<<<<<<<
 * 
 *     def __enter__(PyParsedDocument self):
 */
  __Pyx_TraceLine(329,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __pyx_convert_vector_to_py_char___2a_(__pyx_v_self->_thisptr->terms_py()); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 329; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":327
 *         return results
 * 
 *     def terms(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self._thisptr.terms_py()
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.terms", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":331
 *         return self._thisptr.terms_py()
 * 
 *     def __enter__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_12__enter__[] = "PyParsedDocument.__enter__(self)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13__enter__(PyObject *__pyx_v_self, CYTHON_UNUSED PyObject *unused) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__enter__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_12__enter__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_12__enter__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__enter__", 0);
  __Pyx_TraceCall("__enter__", __pyx_f[1], 331, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 331; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":332
 * 
 *     def __enter__(PyParsedDocument self):
 *         self._check_alive()             # <<<<<<<<<<<<<<
 *         return self
 * 
 */
  __Pyx_TraceLine(332,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 332; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

  /* "irtk/indri/query_env.pyx":333
 *     def __enter__(PyParsedDocument self):
 *         self._check_alive()
 *         return self             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(PyParsedDocument self, exc_tp, exc_val, exc_tb):
 */
  __Pyx_TraceLine(333,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 333; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(((PyObject *)__pyx_v_self));
  __pyx_r = ((PyObject *)__pyx_v_self);
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":331
 *         return self._thisptr.terms_py()
 * 
 *     def __enter__(PyParsedDocument self):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         return self
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.__enter__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":335
 *         return self
 * 
 *     def __exit__(PyParsedDocument self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_15__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_14__exit__[] = "PyParsedDocument.__exit__(self, exc_tp, exc_val, exc_tb)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_15__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_tp = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_tp,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_tp = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_14__exit__(((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)__pyx_v_self), __pyx_v_exc_tp, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_16PyParsedDocument_14__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_TraceCall("__exit__", __pyx_f[1], 335, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 335; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":336
 * 
 *     def __exit__(PyParsedDocument self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 */
  __Pyx_TraceLine(336,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 336; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":337
 *     def __exit__(PyParsedDocument self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 *             self._thisptr = NULL  # inform __dealloc__
 *         return False  # propagate exceptions
 */
    __Pyx_TraceLine(337,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 337; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    delete __pyx_v_self->_thisptr;

    /* "irtk/indri/query_env.pyx":338
 *         if self._thisptr != NULL:
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__             # <<<<<<<<<<<<<<
 *         return False  # propagate exceptions
 * 
 */
    __Pyx_TraceLine(338,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 338; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_self->_thisptr = NULL;

    /* "irtk/indri/query_env.pyx":336
 * 
 *     def __exit__(PyParsedDocument self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 */
  }

  /* "irtk/indri/query_env.pyx":339
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 *         return False  # propagate exceptions             # <<<<<<<<<<<<<<
 * 
 * cdef class PyTermExtent:
 */
  __Pyx_TraceLine(339,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 339; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":335
 *         return self
 * 
 *     def __exit__(PyParsedDocument self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyParsedDocument.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":345
 * 
 *     @staticmethod
 *     cdef PyTermExtent init_vector(TermExtent*ptr):             # <<<<<<<<<<<<<<
 *         v = PyTermExtent()
 *         v._thisptr = ptr
 */

static struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_f_4irtk_5indri_9query_env_12PyTermExtent_init_vector(indri::parse::TermExtent *__pyx_v_ptr) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_v = NULL;
  struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("init_vector", 0);
  __Pyx_TraceCall("init_vector", __pyx_f[1], 345, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 345; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":346
 *     @staticmethod
 *     cdef PyTermExtent init_vector(TermExtent*ptr):
 *         v = PyTermExtent()             # <<<<<<<<<<<<<<
 *         v._thisptr = ptr
 *         return v
 */
  __Pyx_TraceLine(346,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_Call(((PyObject *)__pyx_ptype_4irtk_5indri_9query_env_PyTermExtent), __pyx_empty_tuple, NULL); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 346; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_v_v = ((struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *)__pyx_t_1);
  __pyx_t_1 = 0;

  /* "irtk/indri/query_env.pyx":347
 *     cdef PyTermExtent init_vector(TermExtent*ptr):
 *         v = PyTermExtent()
 *         v._thisptr = ptr             # <<<<<<<<<<<<<<
 *         return v
 * 
 */
  __Pyx_TraceLine(347,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 347; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_v_v->_thisptr = __pyx_v_ptr;

  /* "irtk/indri/query_env.pyx":348
 *         v = PyTermExtent()
 *         v._thisptr = ptr
 *         return v             # <<<<<<<<<<<<<<
 * 
 *     cdef int _check_alive(PyTermExtent self) except -1:
 */
  __Pyx_TraceLine(348,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 348; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(((PyObject *)__pyx_r));
  __Pyx_INCREF(((PyObject *)__pyx_v_v));
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":345
 * 
 *     @staticmethod
 *     cdef PyTermExtent init_vector(TermExtent*ptr):             # <<<<<<<<<<<<<<
 *         v = PyTermExtent()
 *         v._thisptr = ptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("irtk.indri.query_env.PyTermExtent.init_vector", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XDECREF((PyObject *)__pyx_v_v);
  __Pyx_XGIVEREF((PyObject *)__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":350
 *         return v
 * 
 *     cdef int _check_alive(PyTermExtent self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

static int __pyx_f_4irtk_5indri_9query_env_12PyTermExtent__check_alive(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self) {
  int __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("_check_alive", 0);
  __Pyx_TraceCall("_check_alive", __pyx_f[1], 350, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 350; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":351
 * 
 *     cdef int _check_alive(PyTermExtent self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  __Pyx_TraceLine(351,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 351; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr == NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":352
 *     cdef int _check_alive(PyTermExtent self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
    __Pyx_TraceLine(352,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_2 = __Pyx_PyObject_Call(__pyx_builtin_RuntimeError, __pyx_tuple__11, NULL); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_2);
    __Pyx_Raise(__pyx_t_2, 0, 0, 0);
    __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
    {__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}

    /* "irtk/indri/query_env.pyx":351
 * 
 *     cdef int _check_alive(PyTermExtent self) except -1:
 *         if self._thisptr == NULL:             # <<<<<<<<<<<<<<
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 */
  }

  /* "irtk/indri/query_env.pyx":354
 *             raise RuntimeError("Wrapped C++ object is deleted")
 *         else:
 *             return 0             # <<<<<<<<<<<<<<
 * 
 *     property begin:
 */
  __Pyx_TraceLine(354,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 354; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  /*else*/ {
    __pyx_r = 0;
    goto __pyx_L0;
  }

  /* "irtk/indri/query_env.pyx":350
 *         return v
 * 
 *     cdef int _check_alive(PyTermExtent self) except -1:             # <<<<<<<<<<<<<<
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyTermExtent._check_alive", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = -1;
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":357
 * 
 *     property begin:
 *         def __get__(PyTermExtent self): self._check_alive(); return self._thisptr.begin             # <<<<<<<<<<<<<<
 *     property end:
 *         def __get__(PyTermExtent self): self._check_alive(); return self._thisptr.end
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_5begin_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_5begin_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_5begin___get__(((struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_5begin___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 357, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyTermExtent *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->begin); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 357; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyTermExtent.begin.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":359
 *         def __get__(PyTermExtent self): self._check_alive(); return self._thisptr.begin
 *     property end:
 *         def __get__(PyTermExtent self): self._check_alive(); return self._thisptr.end             # <<<<<<<<<<<<<<
 * 
 *     def __dealloc__(PyTermExtent self):
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_3end_1__get__(PyObject *__pyx_v_self); /*proto*/
static PyObject *__pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_3end_1__get__(PyObject *__pyx_v_self) {
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__get__ (wrapper)", 0);
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_3end___get__(((struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_3end___get__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  PyObject *__pyx_t_2 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__get__", 0);
  __Pyx_TraceCall("__get__", __pyx_f[1], 359, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;});
  __pyx_t_1 = ((struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyTermExtent *)__pyx_v_self->__pyx_vtab)->_check_alive(__pyx_v_self); if (unlikely(__pyx_t_1 == -1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_2 = __Pyx_PyInt_From_int(__pyx_v_self->_thisptr->end); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 359; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_r = __pyx_t_2;
  __pyx_t_2 = 0;
  goto __pyx_L0;

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_2);
  __Pyx_AddTraceback("irtk.indri.query_env.PyTermExtent.end.__get__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "irtk/indri/query_env.pyx":361
 *         def __get__(PyTermExtent self): self._check_alive(); return self._thisptr.end
 * 
 *     def __dealloc__(PyTermExtent self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             self._thisptr = NULL
 */

/* Python wrapper */
static void __pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_1__dealloc__(PyObject *__pyx_v_self); /*proto*/
static void __pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_1__dealloc__(PyObject *__pyx_v_self) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__dealloc__ (wrapper)", 0);
  __pyx_pf_4irtk_5indri_9query_env_12PyTermExtent___dealloc__(((struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *)__pyx_v_self));

  /* function exit code */
  __Pyx_RefNannyFinishContext();
}

static void __pyx_pf_4irtk_5indri_9query_env_12PyTermExtent___dealloc__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self) {
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__dealloc__", 0);
  __Pyx_TraceCall("__dealloc__", __pyx_f[1], 361, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 361; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":362
 * 
 *     def __dealloc__(PyTermExtent self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             self._thisptr = NULL
 * 
 */
  __Pyx_TraceLine(362,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 362; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":363
 *     def __dealloc__(PyTermExtent self):
 *         if self._thisptr != NULL:
 *             self._thisptr = NULL             # <<<<<<<<<<<<<<
 * 
 *     def __exit__(PyTermExtent self, exc_tp, exc_val, exc_tb):
 */
    __Pyx_TraceLine(363,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 363; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_self->_thisptr = NULL;

    /* "irtk/indri/query_env.pyx":362
 * 
 *     def __dealloc__(PyTermExtent self):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             self._thisptr = NULL
 * 
 */
  }

  /* "irtk/indri/query_env.pyx":361
 *         def __get__(PyTermExtent self): self._check_alive(); return self._thisptr.end
 * 
 *     def __dealloc__(PyTermExtent self):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             self._thisptr = NULL
 */

  /* function exit code */
  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_WriteUnraisable("irtk.indri.query_env.PyTermExtent.__dealloc__", __pyx_clineno, __pyx_lineno, __pyx_filename, 0, 0);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
}

/* "irtk/indri/query_env.pyx":365
 *             self._thisptr = NULL
 * 
 *     def __exit__(PyTermExtent self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

/* Python wrapper */
static PyObject *__pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_3__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds); /*proto*/
static char __pyx_doc_4irtk_5indri_9query_env_12PyTermExtent_2__exit__[] = "PyTermExtent.__exit__(self, exc_tp, exc_val, exc_tb)";
static PyObject *__pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_3__exit__(PyObject *__pyx_v_self, PyObject *__pyx_args, PyObject *__pyx_kwds) {
  CYTHON_UNUSED PyObject *__pyx_v_exc_tp = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_val = 0;
  CYTHON_UNUSED PyObject *__pyx_v_exc_tb = 0;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  PyObject *__pyx_r = 0;
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__exit__ (wrapper)", 0);
  {
    static PyObject **__pyx_pyargnames[] = {&__pyx_n_s_exc_tp,&__pyx_n_s_exc_val,&__pyx_n_s_exc_tb,0};
    PyObject* values[3] = {0,0,0};
    if (unlikely(__pyx_kwds)) {
      Py_ssize_t kw_args;
      const Py_ssize_t pos_args = PyTuple_GET_SIZE(__pyx_args);
      switch (pos_args) {
        case  3: values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
        case  2: values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
        case  1: values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
        case  0: break;
        default: goto __pyx_L5_argtuple_error;
      }
      kw_args = PyDict_Size(__pyx_kwds);
      switch (pos_args) {
        case  0:
        if (likely((values[0] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tp)) != 0)) kw_args--;
        else goto __pyx_L5_argtuple_error;
        case  1:
        if (likely((values[1] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_val)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 1); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
        case  2:
        if (likely((values[2] = PyDict_GetItem(__pyx_kwds, __pyx_n_s_exc_tb)) != 0)) kw_args--;
        else {
          __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, 2); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
        }
      }
      if (unlikely(kw_args > 0)) {
        if (unlikely(__Pyx_ParseOptionalKeywords(__pyx_kwds, __pyx_pyargnames, 0, values, pos_args, "__exit__") < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
      }
    } else if (PyTuple_GET_SIZE(__pyx_args) != 3) {
      goto __pyx_L5_argtuple_error;
    } else {
      values[0] = PyTuple_GET_ITEM(__pyx_args, 0);
      values[1] = PyTuple_GET_ITEM(__pyx_args, 1);
      values[2] = PyTuple_GET_ITEM(__pyx_args, 2);
    }
    __pyx_v_exc_tp = values[0];
    __pyx_v_exc_val = values[1];
    __pyx_v_exc_tb = values[2];
  }
  goto __pyx_L4_argument_unpacking_done;
  __pyx_L5_argtuple_error:;
  __Pyx_RaiseArgtupleInvalid("__exit__", 1, 3, 3, PyTuple_GET_SIZE(__pyx_args)); {__pyx_filename = __pyx_f[1]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L3_error;}
  __pyx_L3_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyTermExtent.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __Pyx_RefNannyFinishContext();
  return NULL;
  __pyx_L4_argument_unpacking_done:;
  __pyx_r = __pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_2__exit__(((struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *)__pyx_v_self), __pyx_v_exc_tp, __pyx_v_exc_val, __pyx_v_exc_tb);

  /* function exit code */
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_pf_4irtk_5indri_9query_env_12PyTermExtent_2__exit__(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *__pyx_v_self, CYTHON_UNUSED PyObject *__pyx_v_exc_tp, CYTHON_UNUSED PyObject *__pyx_v_exc_val, CYTHON_UNUSED PyObject *__pyx_v_exc_tb) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  int __pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__exit__", 0);
  __Pyx_TraceCall("__exit__", __pyx_f[1], 365, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 365; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":366
 * 
 *     def __exit__(PyTermExtent self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 */
  __Pyx_TraceLine(366,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 366; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = ((__pyx_v_self->_thisptr != NULL) != 0);
  if (__pyx_t_1) {

    /* "irtk/indri/query_env.pyx":367
 *     def __exit__(PyTermExtent self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:
 *             del self._thisptr             # <<<<<<<<<<<<<<
 *             self._thisptr = NULL  # inform __dealloc__
 *         return False  # propagate exceptions
 */
    __Pyx_TraceLine(367,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 367; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    delete __pyx_v_self->_thisptr;

    /* "irtk/indri/query_env.pyx":368
 *         if self._thisptr != NULL:
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__             # <<<<<<<<<<<<<<
 *         return False  # propagate exceptions
 */
    __Pyx_TraceLine(368,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 368; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_v_self->_thisptr = NULL;

    /* "irtk/indri/query_env.pyx":366
 * 
 *     def __exit__(PyTermExtent self, exc_tp, exc_val, exc_tb):
 *         if self._thisptr != NULL:             # <<<<<<<<<<<<<<
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 */
  }

  /* "irtk/indri/query_env.pyx":369
 *             del self._thisptr
 *             self._thisptr = NULL  # inform __dealloc__
 *         return False  # propagate exceptions             # <<<<<<<<<<<<<<
 */
  __Pyx_TraceLine(369,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 369; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __Pyx_INCREF(Py_False);
  __pyx_r = Py_False;
  goto __pyx_L0;

  /* "irtk/indri/query_env.pyx":365
 *             self._thisptr = NULL
 * 
 *     def __exit__(PyTermExtent self, exc_tp, exc_val, exc_tb):             # <<<<<<<<<<<<<<
 *         if self._thisptr != NULL:
 *             del self._thisptr
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("irtk.indri.query_env.PyTermExtent.__exit__", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = NULL;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

static std::string __pyx_convert_string_from_py_std__in_string(PyObject *__pyx_v_o) {
  Py_ssize_t __pyx_v_length;
  char *__pyx_v_data;
  std::string __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  char *__pyx_t_1;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_string_from_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_string_from_py_std__in_string", __pyx_f[2], 13, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "string.from_py":15
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)             # <<<<<<<<<<<<<<
 *     return string(data, length)
 * 
 */
  __Pyx_TraceLine(15,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = __Pyx_PyObject_AsStringAndSize(__pyx_v_o, (&__pyx_v_length)); if (unlikely(__pyx_t_1 == NULL)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 15; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_v_data = __pyx_t_1;

  /* "string.from_py":16
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 *     return string(data, length)             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(16,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 16; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = std::string(__pyx_v_data, __pyx_v_length);
  goto __pyx_L0;

  /* "string.from_py":13
 * 
 * @cname("__pyx_convert_string_from_py_std__in_string")
 * cdef string __pyx_convert_string_from_py_std__in_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef Py_ssize_t length
 *     cdef char* data = __Pyx_PyObject_AsStringAndSize(o, &length)
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_AddTraceback("string.from_py.__pyx_convert_string_from_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<std::string>  __pyx_convert_vector_from_py_std_3a__3a_string(PyObject *__pyx_v_o) {
  std::vector<std::string>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<std::string>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_std_3a__3a_string", 0);
  __Pyx_TraceCall("__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_f[2], 50, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  __Pyx_TraceLine(52,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":53
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __Pyx_TraceLine(53,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_v_item); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":52
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
    __Pyx_TraceLine(52,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":54
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(54,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 54; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":50
 * 
 * @cname("__pyx_convert_vector_from_py_std_3a__3a_string")
 * cdef vector[X] __pyx_convert_vector_from_py_std_3a__3a_string(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T")
 * cdef vector[X] __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

static std::vector<lemur::api::DOCID_T>  __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(PyObject *__pyx_v_o) {
  std::vector<lemur::api::DOCID_T>  __pyx_v_v;
  PyObject *__pyx_v_item = NULL;
  std::vector<lemur::api::DOCID_T>  __pyx_r;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  Py_ssize_t __pyx_t_2;
  PyObject *(*__pyx_t_3)(PyObject *);
  PyObject *__pyx_t_4 = NULL;
  lemur::api::DOCID_T __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T", 0);
  __Pyx_TraceCall("__pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T", __pyx_f[2], 49, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
  __Pyx_TraceLine(51,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  if (likely(PyList_CheckExact(__pyx_v_o)) || PyTuple_CheckExact(__pyx_v_o)) {
    __pyx_t_1 = __pyx_v_o; __Pyx_INCREF(__pyx_t_1); __pyx_t_2 = 0;
    __pyx_t_3 = NULL;
  } else {
    __pyx_t_2 = -1; __pyx_t_1 = PyObject_GetIter(__pyx_v_o); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_1);
    __pyx_t_3 = Py_TYPE(__pyx_t_1)->tp_iternext; if (unlikely(!__pyx_t_3)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  for (;;) {
    if (likely(!__pyx_t_3)) {
      if (likely(PyList_CheckExact(__pyx_t_1))) {
        if (__pyx_t_2 >= PyList_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyList_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      } else {
        if (__pyx_t_2 >= PyTuple_GET_SIZE(__pyx_t_1)) break;
        #if CYTHON_COMPILING_IN_CPYTHON
        __pyx_t_4 = PyTuple_GET_ITEM(__pyx_t_1, __pyx_t_2); __Pyx_INCREF(__pyx_t_4); __pyx_t_2++; if (unlikely(0 < 0)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        #else
        __pyx_t_4 = PySequence_ITEM(__pyx_t_1, __pyx_t_2); __pyx_t_2++; if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        __Pyx_GOTREF(__pyx_t_4);
        #endif
      }
    } else {
      __pyx_t_4 = __pyx_t_3(__pyx_t_1);
      if (unlikely(!__pyx_t_4)) {
        PyObject* exc_type = PyErr_Occurred();
        if (exc_type) {
          if (likely(exc_type == PyExc_StopIteration || PyErr_GivenExceptionMatches(exc_type, PyExc_StopIteration))) PyErr_Clear();
          else {__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
        }
        break;
      }
      __Pyx_GOTREF(__pyx_t_4);
    }
    __Pyx_XDECREF_SET(__pyx_v_item, __pyx_t_4);
    __pyx_t_4 = 0;

    /* "vector.from_py":52
 *     cdef vector[X] v
 *     for item in o:
 *         v.push_back(X_from_py(item))             # <<<<<<<<<<<<<<
 *     return v
 * 
 */
    __Pyx_TraceLine(52,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
    __pyx_t_5 = __Pyx_PyInt_As_lemur_3a__3a_api_3a__3a_TERMID_T(__pyx_v_item); if (unlikely(__pyx_t_5 == -1LL && PyErr_Occurred())) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 52; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __pyx_v_v.push_back(__pyx_t_5);

    /* "vector.from_py":51
 * cdef vector[X] __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(object o) except *:
 *     cdef vector[X] v
 *     for item in o:             # <<<<<<<<<<<<<<
 *         v.push_back(X_from_py(item))
 *     return v
 */
    __Pyx_TraceLine(51,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 51; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  }
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;

  /* "vector.from_py":53
 *     for item in o:
 *         v.push_back(X_from_py(item))
 *     return v             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(53,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 53; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_r = __pyx_v_v;
  goto __pyx_L0;

  /* "vector.from_py":49
 * 
 * @cname("__pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T")
 * cdef vector[X] __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(object o) except *:             # <<<<<<<<<<<<<<
 *     cdef vector[X] v
 *     for item in o:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.from_py.__pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_L0:;
  __Pyx_XDECREF(__pyx_v_item);
  __Pyx_TraceReturn(Py_None, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyObject_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyObject_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_f[2], 31, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 31; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "string.to_py":32
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyUnicode_FromStringAndSize(char*, size_t)
 */
  __Pyx_TraceLine(32,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyObject_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 32; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":31
 * 
 * @cname("__pyx_convert_PyObject_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyObject_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyObject_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyObject_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyUnicode_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyUnicode_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_f[2], 37, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 37; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "string.to_py":38
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyStr_FromStringAndSize(char*, size_t)
 */
  __Pyx_TraceLine(38,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyUnicode_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 38; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":37
 * 
 * @cname("__pyx_convert_PyUnicode_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyUnicode_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyUnicode_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyUnicode_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyStr_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyStr_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_f[2], 43, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 43; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "string.to_py":44
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyBytes_FromStringAndSize(char*, size_t)
 */
  __Pyx_TraceLine(44,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyStr_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 44; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":43
 * 
 * @cname("__pyx_convert_PyStr_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyStr_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyStr_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyStr_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyBytes_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyBytes_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_f[2], 49, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 49; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "string.to_py":50
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * cdef extern from *:
 *     cdef object __Pyx_PyByteArray_FromStringAndSize(char*, size_t)
 */
  __Pyx_TraceLine(50,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyBytes_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 50; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":49
 * 
 * @cname("__pyx_convert_PyBytes_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyBytes_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyBytes_FromStringAndSize(s.data(), s.size())
 * cdef extern from *:
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyBytes_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

static CYTHON_INLINE PyObject *__pyx_convert_PyByteArray_string_to_py_std__in_string(std::string const &__pyx_v_s) {
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_PyByteArray_string_to_py_std__in_string", 0);
  __Pyx_TraceCall("__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_f[2], 55, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 55; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "string.to_py":56
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())             # <<<<<<<<<<<<<<
 * 
 */
  __Pyx_TraceLine(56,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = __Pyx_PyByteArray_FromStringAndSize(__pyx_v_s.data(), __pyx_v_s.size()); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 56; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "string.to_py":55
 * 
 * @cname("__pyx_convert_PyByteArray_string_to_py_std__in_string")
 * cdef inline object __pyx_convert_PyByteArray_string_to_py_std__in_string(const string& s):             # <<<<<<<<<<<<<<
 *     return __Pyx_PyByteArray_FromStringAndSize(s.data(), s.size())
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_AddTraceback("string.to_py.__pyx_convert_PyByteArray_string_to_py_std__in_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

/* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T")
 * cdef object __pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

static PyObject *__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T(const std::vector<lemur::api::DOCID_T>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T", 0);
  __Pyx_TraceCall("__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T", __pyx_f[2], 67, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T")
 * cdef object __pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(68,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_lemur_3a__3a_api_3a__3a_TERMID_T((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T")
 * cdef object __pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_lemur_3a__3a_api_3a__3a_DOCID_T", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_std_3a__3a_string(const std::vector<std::string>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_std_3a__3a_string", 0);
  __Pyx_TraceCall("__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_f[2], 67, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(68,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __pyx_convert_PyObject_string_to_py_std__in_string((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_std_3a__3a_string")
 * cdef object __pyx_convert_vector_to_py_std_3a__3a_string(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_std_3a__3a_string", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_int(const std::vector<int>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_int", 0);
  __Pyx_TraceCall("__pyx_convert_vector_to_py_int", __pyx_f[2], 67, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(68,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyInt_From_int((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_int")
 * cdef object __pyx_convert_vector_to_py_int(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_int", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}

static PyObject *__pyx_convert_vector_to_py_char___2a_(const std::vector<char *>  &__pyx_v_v) {
  size_t __pyx_v_i;
  PyObject *__pyx_r = NULL;
  __Pyx_TraceDeclarations
  __Pyx_RefNannyDeclarations
  PyObject *__pyx_t_1 = NULL;
  size_t __pyx_t_2;
  size_t __pyx_t_3;
  PyObject *__pyx_t_4 = NULL;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannySetupContext("__pyx_convert_vector_to_py_char___2a_", 0);
  __Pyx_TraceCall("__pyx_convert_vector_to_py_char___2a_", __pyx_f[2], 67, 0, {__pyx_filename = __pyx_f[2]; __pyx_lineno = 67; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "vector.to_py":68
 * @cname("__pyx_convert_vector_to_py_char___2a_")
 * cdef object __pyx_convert_vector_to_py_char___2a_(vector[X]& v):
 *     return [X_to_py(v[i]) for i in range(v.size())]             # <<<<<<<<<<<<<<
 * 
 * 
 */
  __Pyx_TraceLine(68,0,{__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __Pyx_XDECREF(__pyx_r);
  __pyx_t_1 = PyList_New(0); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __pyx_t_2 = __pyx_v_v.size();
  for (__pyx_t_3 = 0; __pyx_t_3 < __pyx_t_2; __pyx_t_3+=1) {
    __pyx_v_i = __pyx_t_3;
    __pyx_t_4 = __Pyx_PyObject_FromString((__pyx_v_v[__pyx_v_i])); if (unlikely(!__pyx_t_4)) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_GOTREF(__pyx_t_4);
    if (unlikely(__Pyx_ListComp_Append(__pyx_t_1, (PyObject*)__pyx_t_4))) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    __Pyx_DECREF(__pyx_t_4); __pyx_t_4 = 0;
  }
  __pyx_r = __pyx_t_1;
  __pyx_t_1 = 0;
  goto __pyx_L0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_char___2a_")
 * cdef object __pyx_convert_vector_to_py_char___2a_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */

  /* function exit code */
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_4);
  __Pyx_AddTraceback("vector.to_py.__pyx_convert_vector_to_py_char___2a_", __pyx_clineno, __pyx_lineno, __pyx_filename);
  __pyx_r = 0;
  __pyx_L0:;
  __Pyx_XGIVEREF(__pyx_r);
  __Pyx_TraceReturn(__pyx_r, 0);
  __Pyx_RefNannyFinishContext();
  return __pyx_r;
}
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyQueryEnvironment __pyx_vtable_4irtk_5indri_9query_env_PyQueryEnvironment;

static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyQueryEnvironment(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *)o);
  p->__pyx_vtab = __pyx_vtabptr_4irtk_5indri_9query_env_PyQueryEnvironment;
  if (unlikely(__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4irtk_5indri_9query_env_PyQueryEnvironment(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4irtk_5indri_9query_env_PyQueryEnvironment[] = {
  {"add_server", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_7add_server, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_6add_server},
  {"add_index", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_9add_index, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_8add_index},
  {"remove_server", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_11remove_server, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_10remove_server},
  {"remove_index", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_13remove_index, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_12remove_index},
  {"close", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_15close, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_14close},
  {"document_name", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_17document_name, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_16document_name},
  {"get_documentids", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_19get_documentids, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_18get_documentids},
  {"document_metadata", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_21document_metadata, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_20document_metadata},
  {"document_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_23document_count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_22document_count},
  {"document_expression_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_25document_expression_count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_24document_expression_count},
  {"document_stem_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_27document_stem_count, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_26document_stem_count},
  {"document_length", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_29document_length, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_28document_length},
  {"document_vectors", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_31document_vectors, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_30document_vectors},
  {"documents", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_33documents, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_32documents},
  {"run_indri_query", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_35run_indri_query, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_34run_indri_query},
  {"run_trec_query", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_37run_trec_query, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_36run_trec_query},
  {"expression_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_39expression_count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_38expression_count},
  {"stem_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_41stem_count, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_40stem_count},
  {"stem_field_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_43stem_field_count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_42stem_field_count},
  {"stem_term", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_45stem_term, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_44stem_term},
  {"term_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_47term_count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_46term_count},
  {"term_field_count", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_49term_field_count, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_48term_field_count},
  {"term_count_unique", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_51term_count_unique, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_50term_count_unique},
  {"set_memory", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_53set_memory, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_52set_memory},
  {"set_baseline", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_55set_baseline, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_54set_baseline},
  {"set_single_background_model", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_57set_single_background_model, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_56set_single_background_model},
  {"set_max_wildcard_terms", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_59set_max_wildcard_terms, METH_O, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_58set_max_wildcard_terms},
  {"__enter__", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_61__enter__, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_60__enter__},
  {"__exit__", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_63__exit__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_18PyQueryEnvironment_62__exit__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4irtk_5indri_9query_env_PyQueryEnvironment = {
  PyVarObject_HEAD_INIT(0, 0)
  "irtk.indri.query_env.PyQueryEnvironment", /*tp_name*/
  sizeof(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4irtk_5indri_9query_env_PyQueryEnvironment, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "PyQueryEnvironment()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4irtk_5indri_9query_env_PyQueryEnvironment, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4irtk_5indri_9query_env_18PyQueryEnvironment_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4irtk_5indri_9query_env_PyQueryEnvironment, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyDocumentVector __pyx_vtable_4irtk_5indri_9query_env_PyDocumentVector;

static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyDocumentVector(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *)o);
  p->__pyx_vtab = __pyx_vtabptr_4irtk_5indri_9query_env_PyDocumentVector;
  if (unlikely(__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4irtk_5indri_9query_env_PyDocumentVector(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4irtk_5indri_9query_env_PyDocumentVector[] = {
  {"stems", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_7stems, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_6stems},
  {"positions", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_9positions, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_8positions},
  {"fields", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_11fields, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_10fields},
  {"__enter__", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_13__enter__, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_12__enter__},
  {"__exit__", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_15__exit__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_16PyDocumentVector_14__exit__},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4irtk_5indri_9query_env_PyDocumentVector = {
  PyVarObject_HEAD_INIT(0, 0)
  "irtk.indri.query_env.PyDocumentVector", /*tp_name*/
  sizeof(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4irtk_5indri_9query_env_PyDocumentVector, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "PyDocumentVector()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4irtk_5indri_9query_env_PyDocumentVector, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4irtk_5indri_9query_env_16PyDocumentVector_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4irtk_5indri_9query_env_PyDocumentVector, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyIndriResults(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *)o);
  new((void*)&(p->results)) std::vector<indri::api::QueryResult> ();
  return o;
}

static void __pyx_tp_dealloc_4irtk_5indri_9query_env_PyIndriResults(PyObject *o) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *p = (struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults *)o;
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  __Pyx_call_destructor(p->results);
  (*Py_TYPE(o)->tp_free)(o);
}

static PyMethodDef __pyx_methods_4irtk_5indri_9query_env_PyIndriResults[] = {
  {"results_iterator", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_14PyIndriResults_1results_iterator, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_14PyIndriResults_results_iterator},
  {0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4irtk_5indri_9query_env_PyIndriResults = {
  PyVarObject_HEAD_INIT(0, 0)
  "irtk.indri.query_env.PyIndriResults", /*tp_name*/
  sizeof(struct __pyx_obj_4irtk_5indri_9query_env_PyIndriResults), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4irtk_5indri_9query_env_PyIndriResults, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4irtk_5indri_9query_env_PyIndriResults, /*tp_methods*/
  0, /*tp_members*/
  0, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4irtk_5indri_9query_env_PyIndriResults, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyParsedDocument __pyx_vtable_4irtk_5indri_9query_env_PyParsedDocument;

static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyParsedDocument(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *)o);
  p->__pyx_vtab = __pyx_vtabptr_4irtk_5indri_9query_env_PyParsedDocument;
  if (unlikely(__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_1__cinit__(o, __pyx_empty_tuple, NULL) < 0)) {
    Py_DECREF(o); o = 0;
  }
  return o;
}

static void __pyx_tp_dealloc_4irtk_5indri_9query_env_PyParsedDocument(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_5__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_text(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_4text_1__get__(o);
}

static int __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_text(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_4text_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_textLength(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_1__get__(o);
}

static int __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_textLength(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_10textLength_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_content(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7content_1__get__(o);
}

static int __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_content(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7content_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyObject *__pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_contentLength(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_1__get__(o);
}

static int __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_contentLength(PyObject *o, PyObject *v, CYTHON_UNUSED void *x) {
  if (v) {
    return __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13contentLength_3__set__(o, v);
  }
  else {
    PyErr_SetString(PyExc_NotImplementedError, "__del__");
    return -1;
  }
}

static PyMethodDef __pyx_methods_4irtk_5indri_9query_env_PyParsedDocument[] = {
  {"get_content", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_7get_content, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_6get_content},
  {"positions", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_9positions, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_8positions},
  {"terms", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_11terms, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_10terms},
  {"__enter__", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_13__enter__, METH_NOARGS, __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_12__enter__},
  {"__exit__", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_15__exit__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_16PyParsedDocument_14__exit__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4irtk_5indri_9query_env_PyParsedDocument[] = {
  {(char *)"text", __pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_text, __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_text, 0, 0},
  {(char *)"textLength", __pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_textLength, __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_textLength, 0, 0},
  {(char *)"content", __pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_content, __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_content, 0, 0},
  {(char *)"contentLength", __pyx_getprop_4irtk_5indri_9query_env_16PyParsedDocument_contentLength, __pyx_setprop_4irtk_5indri_9query_env_16PyParsedDocument_contentLength, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4irtk_5indri_9query_env_PyParsedDocument = {
  PyVarObject_HEAD_INIT(0, 0)
  "irtk.indri.query_env.PyParsedDocument", /*tp_name*/
  sizeof(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4irtk_5indri_9query_env_PyParsedDocument, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  "PyParsedDocument()", /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4irtk_5indri_9query_env_PyParsedDocument, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4irtk_5indri_9query_env_PyParsedDocument, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  __pyx_pw_4irtk_5indri_9query_env_16PyParsedDocument_3__init__, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4irtk_5indri_9query_env_PyParsedDocument, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};
static struct __pyx_vtabstruct_4irtk_5indri_9query_env_PyTermExtent __pyx_vtable_4irtk_5indri_9query_env_PyTermExtent;

static PyObject *__pyx_tp_new_4irtk_5indri_9query_env_PyTermExtent(PyTypeObject *t, CYTHON_UNUSED PyObject *a, CYTHON_UNUSED PyObject *k) {
  struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *p;
  PyObject *o;
  if (likely((t->tp_flags & Py_TPFLAGS_IS_ABSTRACT) == 0)) {
    o = (*t->tp_alloc)(t, 0);
  } else {
    o = (PyObject *) PyBaseObject_Type.tp_new(t, __pyx_empty_tuple, 0);
  }
  if (unlikely(!o)) return 0;
  p = ((struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *)o);
  p->__pyx_vtab = __pyx_vtabptr_4irtk_5indri_9query_env_PyTermExtent;
  return o;
}

static void __pyx_tp_dealloc_4irtk_5indri_9query_env_PyTermExtent(PyObject *o) {
  #if PY_VERSION_HEX >= 0x030400a1
  if (unlikely(Py_TYPE(o)->tp_finalize) && (!PyType_IS_GC(Py_TYPE(o)) || !_PyGC_FINALIZED(o))) {
    if (PyObject_CallFinalizerFromDealloc(o)) return;
  }
  #endif
  {
    PyObject *etype, *eval, *etb;
    PyErr_Fetch(&etype, &eval, &etb);
    ++Py_REFCNT(o);
    __pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_1__dealloc__(o);
    --Py_REFCNT(o);
    PyErr_Restore(etype, eval, etb);
  }
  (*Py_TYPE(o)->tp_free)(o);
}

static PyObject *__pyx_getprop_4irtk_5indri_9query_env_12PyTermExtent_begin(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_5begin_1__get__(o);
}

static PyObject *__pyx_getprop_4irtk_5indri_9query_env_12PyTermExtent_end(PyObject *o, CYTHON_UNUSED void *x) {
  return __pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_3end_1__get__(o);
}

static PyMethodDef __pyx_methods_4irtk_5indri_9query_env_PyTermExtent[] = {
  {"__exit__", (PyCFunction)__pyx_pw_4irtk_5indri_9query_env_12PyTermExtent_3__exit__, METH_VARARGS|METH_KEYWORDS, __pyx_doc_4irtk_5indri_9query_env_12PyTermExtent_2__exit__},
  {0, 0, 0, 0}
};

static struct PyGetSetDef __pyx_getsets_4irtk_5indri_9query_env_PyTermExtent[] = {
  {(char *)"begin", __pyx_getprop_4irtk_5indri_9query_env_12PyTermExtent_begin, 0, 0, 0},
  {(char *)"end", __pyx_getprop_4irtk_5indri_9query_env_12PyTermExtent_end, 0, 0, 0},
  {0, 0, 0, 0, 0}
};

static PyTypeObject __pyx_type_4irtk_5indri_9query_env_PyTermExtent = {
  PyVarObject_HEAD_INIT(0, 0)
  "irtk.indri.query_env.PyTermExtent", /*tp_name*/
  sizeof(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent), /*tp_basicsize*/
  0, /*tp_itemsize*/
  __pyx_tp_dealloc_4irtk_5indri_9query_env_PyTermExtent, /*tp_dealloc*/
  0, /*tp_print*/
  0, /*tp_getattr*/
  0, /*tp_setattr*/
  #if PY_MAJOR_VERSION < 3
  0, /*tp_compare*/
  #endif
  #if PY_MAJOR_VERSION >= 3
  0, /*tp_as_async*/
  #endif
  0, /*tp_repr*/
  0, /*tp_as_number*/
  0, /*tp_as_sequence*/
  0, /*tp_as_mapping*/
  0, /*tp_hash*/
  0, /*tp_call*/
  0, /*tp_str*/
  0, /*tp_getattro*/
  0, /*tp_setattro*/
  0, /*tp_as_buffer*/
  Py_TPFLAGS_DEFAULT|Py_TPFLAGS_HAVE_VERSION_TAG|Py_TPFLAGS_CHECKTYPES|Py_TPFLAGS_HAVE_NEWBUFFER|Py_TPFLAGS_BASETYPE, /*tp_flags*/
  0, /*tp_doc*/
  0, /*tp_traverse*/
  0, /*tp_clear*/
  0, /*tp_richcompare*/
  0, /*tp_weaklistoffset*/
  0, /*tp_iter*/
  0, /*tp_iternext*/
  __pyx_methods_4irtk_5indri_9query_env_PyTermExtent, /*tp_methods*/
  0, /*tp_members*/
  __pyx_getsets_4irtk_5indri_9query_env_PyTermExtent, /*tp_getset*/
  0, /*tp_base*/
  0, /*tp_dict*/
  0, /*tp_descr_get*/
  0, /*tp_descr_set*/
  0, /*tp_dictoffset*/
  0, /*tp_init*/
  0, /*tp_alloc*/
  __pyx_tp_new_4irtk_5indri_9query_env_PyTermExtent, /*tp_new*/
  0, /*tp_free*/
  0, /*tp_is_gc*/
  0, /*tp_bases*/
  0, /*tp_mro*/
  0, /*tp_cache*/
  0, /*tp_subclasses*/
  0, /*tp_weaklist*/
  0, /*tp_del*/
  0, /*tp_version_tag*/
  #if PY_VERSION_HEX >= 0x030400a1
  0, /*tp_finalize*/
  #endif
};

static PyMethodDef __pyx_methods[] = {
  {0, 0, 0, 0}
};

#if PY_MAJOR_VERSION >= 3
static struct PyModuleDef __pyx_moduledef = {
  #if PY_VERSION_HEX < 0x03020000
    { PyObject_HEAD_INIT(NULL) NULL, 0, NULL },
  #else
    PyModuleDef_HEAD_INIT,
  #endif
    "query_env",
    0, /* m_doc */
    -1, /* m_size */
    __pyx_methods /* m_methods */,
    NULL, /* m_reload */
    NULL, /* m_traverse */
    NULL, /* m_clear */
    NULL /* m_free */
};
#endif

static __Pyx_StringTabEntry __pyx_string_tab[] = {
  {&__pyx_kp_b_1, __pyx_k_1, sizeof(__pyx_k_1), 0, 0, 0, 0},
  {&__pyx_kp_s_Couldn_t_understand_this_query, __pyx_k_Couldn_t_understand_this_query, sizeof(__pyx_k_Couldn_t_understand_this_query), 0, 0, 1, 0},
  {&__pyx_n_s_RuntimeError, __pyx_k_RuntimeError, sizeof(__pyx_k_RuntimeError), 0, 0, 1, 1},
  {&__pyx_n_s_TRECResult, __pyx_k_TRECResult, sizeof(__pyx_k_TRECResult), 0, 0, 1, 1},
  {&__pyx_kp_s_Unable_to_add_index_Check_index, __pyx_k_Unable_to_add_index_Check_index, sizeof(__pyx_k_Unable_to_add_index_Check_index), 0, 0, 1, 0},
  {&__pyx_kp_s_Wrapped_C_object_is_deleted, __pyx_k_Wrapped_C_object_is_deleted, sizeof(__pyx_k_Wrapped_C_object_is_deleted), 0, 0, 1, 0},
  {&__pyx_kp_b__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 0, 0},
  {&__pyx_kp_s__3, __pyx_k__3, sizeof(__pyx_k__3), 0, 0, 1, 0},
  {&__pyx_n_s_add_result, __pyx_k_add_result, sizeof(__pyx_k_add_result), 0, 0, 1, 1},
  {&__pyx_n_s_docid, __pyx_k_docid, sizeof(__pyx_k_docid), 0, 0, 1, 1},
  {&__pyx_n_s_docids, __pyx_k_docids, sizeof(__pyx_k_docids), 0, 0, 1, 1},
  {&__pyx_n_b_docno, __pyx_k_docno, sizeof(__pyx_k_docno), 0, 0, 0, 1},
  {&__pyx_n_s_document_name, __pyx_k_document_name, sizeof(__pyx_k_document_name), 0, 0, 1, 1},
  {&__pyx_n_s_eval_rankedlist, __pyx_k_eval_rankedlist, sizeof(__pyx_k_eval_rankedlist), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tb, __pyx_k_exc_tb, sizeof(__pyx_k_exc_tb), 0, 0, 1, 1},
  {&__pyx_n_s_exc_tp, __pyx_k_exc_tp, sizeof(__pyx_k_exc_tp), 0, 0, 1, 1},
  {&__pyx_n_s_exc_val, __pyx_k_exc_val, sizeof(__pyx_k_exc_val), 0, 0, 1, 1},
  {&__pyx_n_s_field, __pyx_k_field, sizeof(__pyx_k_field), 0, 0, 1, 1},
  {&__pyx_n_s_field_name, __pyx_k_field_name, sizeof(__pyx_k_field_name), 0, 0, 1, 1},
  {&__pyx_n_s_import, __pyx_k_import, sizeof(__pyx_k_import), 0, 0, 1, 1},
  {&__pyx_n_s_indri, __pyx_k_indri, sizeof(__pyx_k_indri), 0, 0, 1, 1},
  {&__pyx_n_s_main, __pyx_k_main, sizeof(__pyx_k_main), 0, 0, 1, 1},
  {&__pyx_n_s_metadata, __pyx_k_metadata, sizeof(__pyx_k_metadata), 0, 0, 1, 1},
  {&__pyx_n_s_pyx_vtable, __pyx_k_pyx_vtable, sizeof(__pyx_k_pyx_vtable), 0, 0, 1, 1},
  {&__pyx_n_s_qid, __pyx_k_qid, sizeof(__pyx_k_qid), 0, 0, 1, 1},
  {&__pyx_n_s_query, __pyx_k_query, sizeof(__pyx_k_query), 0, 0, 1, 1},
  {&__pyx_n_s_query_type, __pyx_k_query_type, sizeof(__pyx_k_query_type), 0, 0, 1, 1},
  {&__pyx_n_s_range, __pyx_k_range, sizeof(__pyx_k_range), 0, 0, 1, 1},
  {&__pyx_n_s_result_count, __pyx_k_result_count, sizeof(__pyx_k_result_count), 0, 0, 1, 1},
  {&__pyx_n_s_runid, __pyx_k_runid, sizeof(__pyx_k_runid), 0, 0, 1, 1},
  {&__pyx_n_s_term, __pyx_k_term, sizeof(__pyx_k_term), 0, 0, 1, 1},
  {&__pyx_n_s_test, __pyx_k_test, sizeof(__pyx_k_test), 0, 0, 1, 1},
  {0, 0, 0, 0, 0, 0, 0}
};
static int __Pyx_InitCachedBuiltins(void) {
  __pyx_builtin_RuntimeError = __Pyx_GetBuiltinName(__pyx_n_s_RuntimeError); if (!__pyx_builtin_RuntimeError) {__pyx_filename = __pyx_f[0]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_builtin_range = __Pyx_GetBuiltinName(__pyx_n_s_range); if (!__pyx_builtin_range) {__pyx_filename = __pyx_f[2]; __pyx_lineno = 68; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

static int __Pyx_InitCachedConstants(void) {
  __Pyx_RefNannyDeclarations
  __Pyx_RefNannySetupContext("__Pyx_InitCachedConstants", 0);

  /* "irtk/indri/query_env.pyx":29
 *     cdef int _check_alive(PyQueryEnvironment self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
  __pyx_tuple_ = PyTuple_Pack(1, __pyx_kp_s_Wrapped_C_object_is_deleted); if (unlikely(!__pyx_tuple_)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 29; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple_);
  __Pyx_GIVEREF(__pyx_tuple_);

  /* "irtk/indri/query_env.pyx":42
 *             self._thisptr.addIndex(index_name)
 *         except RuntimeError:
 *             raise RuntimeError("Unable to add index. Check index path")             # <<<<<<<<<<<<<<
 * 
 *     def remove_server(PyQueryEnvironment self, str server_name):
 */
  __pyx_tuple__2 = PyTuple_Pack(1, __pyx_kp_s_Unable_to_add_index_Check_index); if (unlikely(!__pyx_tuple__2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 42; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__2);
  __Pyx_GIVEREF(__pyx_tuple__2);

  /* "irtk/indri/query_env.pyx":81
 *             return self._thisptr.documentExpressionCount(term, query_type)
 *         except RuntimeError:
 *             raise RuntimeError("Couldn't understand this query")             # <<<<<<<<<<<<<<
 * 
 *     def document_stem_count(PyQueryEnvironment self, string term):
 */
  __pyx_tuple__4 = PyTuple_Pack(1, __pyx_kp_s_Couldn_t_understand_this_query); if (unlikely(!__pyx_tuple__4)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 81; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__4);
  __Pyx_GIVEREF(__pyx_tuple__4);

  /* "irtk/indri/query_env.pyx":222
 *     cdef int _check_alive(PyDocumentVector self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
  __pyx_tuple__9 = PyTuple_Pack(1, __pyx_kp_s_Wrapped_C_object_is_deleted); if (unlikely(!__pyx_tuple__9)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 222; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__9);
  __Pyx_GIVEREF(__pyx_tuple__9);

  /* "irtk/indri/query_env.pyx":284
 *     cdef int _check_alive(PyParsedDocument self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
  __pyx_tuple__10 = PyTuple_Pack(1, __pyx_kp_s_Wrapped_C_object_is_deleted); if (unlikely(!__pyx_tuple__10)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 284; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__10);
  __Pyx_GIVEREF(__pyx_tuple__10);

  /* "irtk/indri/query_env.pyx":352
 *     cdef int _check_alive(PyTermExtent self) except -1:
 *         if self._thisptr == NULL:
 *             raise RuntimeError("Wrapped C++ object is deleted")             # <<<<<<<<<<<<<<
 *         else:
 *             return 0
 */
  __pyx_tuple__11 = PyTuple_Pack(1, __pyx_kp_s_Wrapped_C_object_is_deleted); if (unlikely(!__pyx_tuple__11)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 352; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_tuple__11);
  __Pyx_GIVEREF(__pyx_tuple__11);
  __Pyx_RefNannyFinishContext();
  return 0;
  __pyx_L1_error:;
  __Pyx_RefNannyFinishContext();
  return -1;
}

static int __Pyx_InitGlobals(void) {
  if (__Pyx_InitStrings(__pyx_string_tab) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  __pyx_int_1 = PyInt_FromLong(1); if (unlikely(!__pyx_int_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  return 0;
  __pyx_L1_error:;
  return -1;
}

#if PY_MAJOR_VERSION < 3
PyMODINIT_FUNC initquery_env(void); /*proto*/
PyMODINIT_FUNC initquery_env(void)
#else
PyMODINIT_FUNC PyInit_query_env(void); /*proto*/
PyMODINIT_FUNC PyInit_query_env(void)
#endif
{
  __Pyx_TraceDeclarations
  PyObject *__pyx_t_1 = NULL;
  PyObject *__pyx_t_2 = NULL;
  std::vector<lemur::api::DOCID_T>  __pyx_t_3;
  std::vector<std::string>  __pyx_t_4;
  std::string __pyx_t_5;
  int __pyx_lineno = 0;
  const char *__pyx_filename = NULL;
  int __pyx_clineno = 0;
  __Pyx_RefNannyDeclarations
  #if CYTHON_REFNANNY
  __Pyx_RefNanny = __Pyx_RefNannyImportAPI("refnanny");
  if (!__Pyx_RefNanny) {
      PyErr_Clear();
      __Pyx_RefNanny = __Pyx_RefNannyImportAPI("Cython.Runtime.refnanny");
      if (!__Pyx_RefNanny)
          Py_FatalError("failed to import 'refnanny' module");
  }
  #endif
  __Pyx_RefNannySetupContext("PyMODINIT_FUNC PyInit_query_env(void)", 0);
  if (__Pyx_check_binary_version() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_tuple = PyTuple_New(0); if (unlikely(!__pyx_empty_tuple)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_empty_bytes = PyBytes_FromStringAndSize("", 0); if (unlikely(!__pyx_empty_bytes)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #ifdef __Pyx_CyFunction_USED
  if (__pyx_CyFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_FusedFunction_USED
  if (__pyx_FusedFunction_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Coroutine_USED
  if (__pyx_Coroutine_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_Generator_USED
  if (__pyx_Generator_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  #ifdef __Pyx_StopAsyncIteration_USED
  if (__pyx_StopAsyncIteration_init() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  /*--- Library function declarations ---*/
  /*--- Threads initialization code ---*/
  #if defined(__PYX_FORCE_INIT_THREADS) && __PYX_FORCE_INIT_THREADS
  #ifdef WITH_THREAD /* Python build with threading support? */
  PyEval_InitThreads();
  #endif
  #endif
  /*--- Module creation code ---*/
  #if PY_MAJOR_VERSION < 3
  __pyx_m = Py_InitModule4("query_env", __pyx_methods, 0, 0, PYTHON_API_VERSION); Py_XINCREF(__pyx_m);
  #else
  __pyx_m = PyModule_Create(&__pyx_moduledef);
  #endif
  if (unlikely(!__pyx_m)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_d = PyModule_GetDict(__pyx_m); if (unlikely(!__pyx_d)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  Py_INCREF(__pyx_d);
  __pyx_b = PyImport_AddModule(__Pyx_BUILTIN_MODULE_NAME); if (unlikely(!__pyx_b)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if CYTHON_COMPILING_IN_PYPY
  Py_INCREF(__pyx_b);
  #endif
  if (PyObject_SetAttrString(__pyx_m, "__builtins__", __pyx_b) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;};
  /*--- Initialize various global constants etc. ---*/
  if (__Pyx_InitGlobals() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #if PY_MAJOR_VERSION < 3 && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
  if (__Pyx_init_sys_getdefaultencoding_params() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  if (__pyx_module_is_main_irtk__indri__query_env) {
    if (PyObject_SetAttrString(__pyx_m, "__name__", __pyx_n_s_main) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  }
  #if PY_MAJOR_VERSION >= 3
  {
    PyObject *modules = PyImport_GetModuleDict(); if (unlikely(!modules)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    if (!PyDict_GetItemString(modules, "irtk.indri.query_env")) {
      if (unlikely(PyDict_SetItemString(modules, "irtk.indri.query_env", __pyx_m) < 0)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
    }
  }
  #endif
  /*--- Builtin init code ---*/
  if (__Pyx_InitCachedBuiltins() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Constants init code ---*/
  if (__Pyx_InitCachedConstants() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  /*--- Global init code ---*/
  /*--- Variable export code ---*/
  /*--- Function export code ---*/
  /*--- Type init code ---*/
  __pyx_vtabptr_4irtk_5indri_9query_env_PyQueryEnvironment = &__pyx_vtable_4irtk_5indri_9query_env_PyQueryEnvironment;
  __pyx_vtable_4irtk_5indri_9query_env_PyQueryEnvironment._check_alive = (int (*)(struct __pyx_obj_4irtk_5indri_9query_env_PyQueryEnvironment *))__pyx_f_4irtk_5indri_9query_env_18PyQueryEnvironment__check_alive;
  if (PyType_Ready(&__pyx_type_4irtk_5indri_9query_env_PyQueryEnvironment) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4irtk_5indri_9query_env_PyQueryEnvironment.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4irtk_5indri_9query_env_PyQueryEnvironment.tp_dict, __pyx_vtabptr_4irtk_5indri_9query_env_PyQueryEnvironment) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PyQueryEnvironment", (PyObject *)&__pyx_type_4irtk_5indri_9query_env_PyQueryEnvironment) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 13; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4irtk_5indri_9query_env_PyQueryEnvironment = &__pyx_type_4irtk_5indri_9query_env_PyQueryEnvironment;
  __pyx_vtabptr_4irtk_5indri_9query_env_PyDocumentVector = &__pyx_vtable_4irtk_5indri_9query_env_PyDocumentVector;
  __pyx_vtable_4irtk_5indri_9query_env_PyDocumentVector.init_vector = (PyObject *(*)(indri::api::DocumentVector *))__pyx_f_4irtk_5indri_9query_env_16PyDocumentVector_init_vector;
  __pyx_vtable_4irtk_5indri_9query_env_PyDocumentVector._check_alive = (int (*)(struct __pyx_obj_4irtk_5indri_9query_env_PyDocumentVector *))__pyx_f_4irtk_5indri_9query_env_16PyDocumentVector__check_alive;
  if (PyType_Ready(&__pyx_type_4irtk_5indri_9query_env_PyDocumentVector) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4irtk_5indri_9query_env_PyDocumentVector.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4irtk_5indri_9query_env_PyDocumentVector.tp_dict, __pyx_vtabptr_4irtk_5indri_9query_env_PyDocumentVector) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PyDocumentVector", (PyObject *)&__pyx_type_4irtk_5indri_9query_env_PyDocumentVector) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 205; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4irtk_5indri_9query_env_PyDocumentVector = &__pyx_type_4irtk_5indri_9query_env_PyDocumentVector;
  if (PyType_Ready(&__pyx_type_4irtk_5indri_9query_env_PyIndriResults) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4irtk_5indri_9query_env_PyIndriResults.tp_print = 0;
  if (PyObject_SetAttrString(__pyx_m, "PyIndriResults", (PyObject *)&__pyx_type_4irtk_5indri_9query_env_PyIndriResults) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 257; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4irtk_5indri_9query_env_PyIndriResults = &__pyx_type_4irtk_5indri_9query_env_PyIndriResults;
  __pyx_vtabptr_4irtk_5indri_9query_env_PyParsedDocument = &__pyx_vtable_4irtk_5indri_9query_env_PyParsedDocument;
  __pyx_vtable_4irtk_5indri_9query_env_PyParsedDocument.init_vector = (struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *(*)(indri::api::ParsedDocument *))__pyx_f_4irtk_5indri_9query_env_16PyParsedDocument_init_vector;
  __pyx_vtable_4irtk_5indri_9query_env_PyParsedDocument._check_alive = (int (*)(struct __pyx_obj_4irtk_5indri_9query_env_PyParsedDocument *))__pyx_f_4irtk_5indri_9query_env_16PyParsedDocument__check_alive;
  if (PyType_Ready(&__pyx_type_4irtk_5indri_9query_env_PyParsedDocument) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4irtk_5indri_9query_env_PyParsedDocument.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4irtk_5indri_9query_env_PyParsedDocument.tp_dict, __pyx_vtabptr_4irtk_5indri_9query_env_PyParsedDocument) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PyParsedDocument", (PyObject *)&__pyx_type_4irtk_5indri_9query_env_PyParsedDocument) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 268; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4irtk_5indri_9query_env_PyParsedDocument = &__pyx_type_4irtk_5indri_9query_env_PyParsedDocument;
  __pyx_vtabptr_4irtk_5indri_9query_env_PyTermExtent = &__pyx_vtable_4irtk_5indri_9query_env_PyTermExtent;
  __pyx_vtable_4irtk_5indri_9query_env_PyTermExtent.init_vector = (struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *(*)(indri::parse::TermExtent *))__pyx_f_4irtk_5indri_9query_env_12PyTermExtent_init_vector;
  __pyx_vtable_4irtk_5indri_9query_env_PyTermExtent._check_alive = (int (*)(struct __pyx_obj_4irtk_5indri_9query_env_PyTermExtent *))__pyx_f_4irtk_5indri_9query_env_12PyTermExtent__check_alive;
  if (PyType_Ready(&__pyx_type_4irtk_5indri_9query_env_PyTermExtent) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_type_4irtk_5indri_9query_env_PyTermExtent.tp_print = 0;
  if (__Pyx_SetVtable(__pyx_type_4irtk_5indri_9query_env_PyTermExtent.tp_dict, __pyx_vtabptr_4irtk_5indri_9query_env_PyTermExtent) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  if (PyObject_SetAttrString(__pyx_m, "PyTermExtent", (PyObject *)&__pyx_type_4irtk_5indri_9query_env_PyTermExtent) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 341; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_ptype_4irtk_5indri_9query_env_PyTermExtent = &__pyx_type_4irtk_5indri_9query_env_PyTermExtent;
  /*--- Type import code ---*/
  /*--- Variable import code ---*/
  /*--- Function import code ---*/
  /*--- Execution code ---*/
  #if defined(__Pyx_Generator_USED) || defined(__Pyx_Coroutine_USED)
  if (__Pyx_patch_abc() < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  #endif
  __Pyx_TraceCall("PyMODINIT_FUNC PyInit_query_env(void)", __pyx_f[1], 1, 0, {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;});

  /* "irtk/indri/query_env.pyx":11
 * 
 * from cython.operator cimport dereference as deref, preincrement as inc
 * from ..eval.rankedlist import TRECResult             # <<<<<<<<<<<<<<
 * 
 * cdef class PyQueryEnvironment:
 */
  __Pyx_TraceLine(11,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_1 = PyList_New(1); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  __Pyx_INCREF(__pyx_n_s_TRECResult);
  __Pyx_GIVEREF(__pyx_n_s_TRECResult);
  PyList_SET_ITEM(__pyx_t_1, 0, __pyx_n_s_TRECResult);
  __pyx_t_2 = __Pyx_Import(__pyx_n_s_eval_rankedlist, __pyx_t_1, 2); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __pyx_t_1 = __Pyx_ImportFrom(__pyx_t_2, __pyx_n_s_TRECResult); if (unlikely(!__pyx_t_1)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_1);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_TRECResult, __pyx_t_1) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 11; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_1); __pyx_t_1 = 0;
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "irtk/indri/query_env.pyx":117
 *                         str query,
 *                         int result_count,
 *                         vector[DOCID_T] docids = [],             # <<<<<<<<<<<<<<
 *                         vector[string] metadata = []):
 *         self._check_alive()
 */
  __Pyx_TraceLine(117,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_3 = __pyx_convert_vector_from_py_lemur_3a__3a_api_3a__3a_DOCID_T(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 117; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__5 = __pyx_t_3;

  /* "irtk/indri/query_env.pyx":118
 *                         int result_count,
 *                         vector[DOCID_T] docids = [],
 *                         vector[string] metadata = []):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef QueryRequest* req = new QueryRequest()
 */
  __Pyx_TraceLine(118,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyList_New(0); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  __pyx_t_4 = __pyx_convert_vector_from_py_std_3a__3a_string(__pyx_t_2); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 118; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;
  __pyx_k__6 = __pyx_t_4;

  /* "irtk/indri/query_env.pyx":136
 * 
 * 
 *     def run_trec_query(PyQueryEnvironment self, str query, int result_count, str runid='indri', string qid='1'):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         cdef vector[ScoredExtentResult] vecs = self._thisptr.runQuery(query, result_count)
 */
  __Pyx_TraceLine(136,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b_1); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 136; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k__7 = __pyx_t_5;

  /* "irtk/indri/query_env.pyx":164
 *         return self._thisptr.stemTerm(term)
 * 
 *     def term_count(PyQueryEnvironment self, string term = ""):             # <<<<<<<<<<<<<<
 *         self._check_alive()
 *         if term.length() == 0:
 */
  __Pyx_TraceLine(164,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_5 = __pyx_convert_string_from_py_std__in_string(__pyx_kp_b__3); if (unlikely(PyErr_Occurred())) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 164; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __pyx_k__8 = __pyx_t_5;

  /* "irtk/indri/query_env.pyx":1
 * # cython: c_string_type=str, c_string_encoding=ascii, embedsignature=True, linetrace=True             # <<<<<<<<<<<<<<
 * # distutils: define_macros=CYTHON_TRACE_NOGIL=1
 * 
 */
  __Pyx_TraceLine(1,0,{__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;})
  __pyx_t_2 = PyDict_New(); if (unlikely(!__pyx_t_2)) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_GOTREF(__pyx_t_2);
  if (PyDict_SetItem(__pyx_d, __pyx_n_s_test, __pyx_t_2) < 0) {__pyx_filename = __pyx_f[1]; __pyx_lineno = 1; __pyx_clineno = __LINE__; goto __pyx_L1_error;}
  __Pyx_DECREF(__pyx_t_2); __pyx_t_2 = 0;

  /* "vector.to_py":67
 * 
 * @cname("__pyx_convert_vector_to_py_char___2a_")
 * cdef object __pyx_convert_vector_to_py_char___2a_(vector[X]& v):             # <<<<<<<<<<<<<<
 *     return [X_to_py(v[i]) for i in range(v.size())]
 * 
 */
  __Pyx_TraceReturn(Py_None, 0);

  /*--- Wrapped vars code ---*/

  goto __pyx_L0;
  __pyx_L1_error:;
  __Pyx_XDECREF(__pyx_t_1);
  __Pyx_XDECREF(__pyx_t_2);
  if (__pyx_m) {
    if (__pyx_d) {
      __Pyx_AddTraceback("init irtk.indri.query_env", __pyx_clineno, __pyx_lineno, __pyx_filename);
    }
    Py_DECREF(__pyx_m); __pyx_m = 0;
  } else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_ImportError, "init irtk.indri.query_env");
  }
  __pyx_L0:;
  __Pyx_RefNannyFinishContext();
  #if PY_MAJOR_VERSION < 3
  return;
  #else
  return __pyx_m;
  #endif
}

/* --- Runtime support code --- */
#if CYTHON_REFNANNY
static __Pyx_RefNannyAPIStruct *__Pyx_RefNannyImportAPI(const char *modname) {
    PyObject *m = NULL, *p = NULL;
    void *r = NULL;
    m = PyImport_ImportModule((char *)modname);
    if (!m) goto end;
    p = PyObject_GetAttrString(m, (char *)"RefNannyAPI");
    if (!p) goto end;
    r = PyLong_AsVoidPtr(p);
end:
    Py_XDECREF(p);
    Py_XDECREF(m);
    return (__Pyx_RefNannyAPIStruct *)r;
}
#endif

static PyObject *__Pyx_GetBuiltinName(PyObject *name) {
    PyObject* result = __Pyx_PyObject_GetAttrStr(__pyx_b, name);
    if (unlikely(!result)) {
        PyErr_Format(PyExc_NameError,
#if PY_MAJOR_VERSION >= 3
            "name '%U' is not defined", name);
#else
            "name '%.200s' is not defined", PyString_AS_STRING(name));
#endif
    }
    return result;
}

static void __Pyx_RaiseArgtupleInvalid(
    const char* func_name,
    int exact,
    Py_ssize_t num_min,
    Py_ssize_t num_max,
    Py_ssize_t num_found)
{
    Py_ssize_t num_expected;
    const char *more_or_less;
    if (num_found < num_min) {
        num_expected = num_min;
        more_or_less = "at least";
    } else {
        num_expected = num_max;
        more_or_less = "at most";
    }
    if (exact) {
        more_or_less = "exactly";
    }
    PyErr_Format(PyExc_TypeError,
                 "%.200s() takes %.8s %" CYTHON_FORMAT_SSIZE_T "d positional argument%.1s (%" CYTHON_FORMAT_SSIZE_T "d given)",
                 func_name, more_or_less, num_expected,
                 (num_expected == 1) ? "" : "s", num_found);
}

static CYTHON_INLINE int __Pyx_CheckKeywordStrings(
    PyObject *kwdict,
    const char* function_name,
    int kw_allowed)
{
    PyObject* key = 0;
    Py_ssize_t pos = 0;
#if CYTHON_COMPILING_IN_PYPY
    if (!kw_allowed && PyDict_Next(kwdict, &pos, &key, 0))
        goto invalid_keyword;
    return 1;
#else
    while (PyDict_Next(kwdict, &pos, &key, 0)) {
        #if PY_MAJOR_VERSION < 3
        if (unlikely(!PyString_CheckExact(key)) && unlikely(!PyString_Check(key)))
        #endif
            if (unlikely(!PyUnicode_Check(key)))
                goto invalid_keyword_type;
    }
    if ((!kw_allowed) && unlikely(key))
        goto invalid_keyword;
    return 1;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    return 0;
#endif
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
    return 0;
}

#if CYTHON_PROFILE
static int __Pyx_TraceSetupAndCall(PyCodeObject** code,
                                   PyFrameObject** frame,
                                   const char *funcname,
                                   const char *srcfile,
                                   int firstlineno) {
    PyObject *type, *value, *traceback;
    int retval;
    PyThreadState* tstate = PyThreadState_GET();
    if (*frame == NULL || !CYTHON_PROFILE_REUSE_FRAME) {
        if (*code == NULL) {
            *code = __Pyx_createFrameCodeObject(funcname, srcfile, firstlineno);
            if (*code == NULL) return 0;
        }
        *frame = PyFrame_New(
            tstate,                          /*PyThreadState *tstate*/
            *code,                           /*PyCodeObject *code*/
            __pyx_d,                  /*PyObject *globals*/
            0                                /*PyObject *locals*/
        );
        if (*frame == NULL) return 0;
        if (CYTHON_TRACE && (*frame)->f_trace == NULL) {
            Py_INCREF(Py_None);
            (*frame)->f_trace = Py_None;
        }
#if PY_VERSION_HEX < 0x030400B1
    } else {
        (*frame)->f_tstate = tstate;
#endif
    }
    (*frame)->f_lineno = firstlineno;
    retval = 1;
    tstate->tracing++;
    tstate->use_tracing = 0;
    PyErr_Fetch(&type, &value, &traceback);
    #if CYTHON_TRACE
    if (tstate->c_tracefunc)
        retval = tstate->c_tracefunc(tstate->c_traceobj, *frame, PyTrace_CALL, NULL) == 0;
    if (retval && tstate->c_profilefunc)
    #endif
        retval = tstate->c_profilefunc(tstate->c_profileobj, *frame, PyTrace_CALL, NULL) == 0;
    tstate->use_tracing = (tstate->c_profilefunc ||
                           (CYTHON_TRACE && tstate->c_tracefunc));
    tstate->tracing--;
    if (retval) {
        PyErr_Restore(type, value, traceback);
        return tstate->use_tracing && retval;
    } else {
        Py_XDECREF(type);
        Py_XDECREF(value);
        Py_XDECREF(traceback);
        return -1;
    }
}
static PyCodeObject *__Pyx_createFrameCodeObject(const char *funcname, const char *srcfile, int firstlineno) {
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    PyCodeObject *py_code = 0;
    #if PY_MAJOR_VERSION < 3
    py_funcname = PyString_FromString(funcname);
    py_srcfile = PyString_FromString(srcfile);
    #else
    py_funcname = PyUnicode_FromString(funcname);
    py_srcfile = PyUnicode_FromString(srcfile);
    #endif
    if (!py_funcname | !py_srcfile) goto bad;
    py_code = PyCode_New(
        0,
        #if PY_MAJOR_VERSION >= 3
        0,
        #endif
        0,
        0,
        0,
        __pyx_empty_bytes,     /*PyObject *code,*/
        __pyx_empty_tuple,     /*PyObject *consts,*/
        __pyx_empty_tuple,     /*PyObject *names,*/
        __pyx_empty_tuple,     /*PyObject *varnames,*/
        __pyx_empty_tuple,     /*PyObject *freevars,*/
        __pyx_empty_tuple,     /*PyObject *cellvars,*/
        py_srcfile,       /*PyObject *filename,*/
        py_funcname,      /*PyObject *name,*/
        firstlineno,
        __pyx_empty_bytes      /*PyObject *lnotab*/
    );
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return py_code;
}
#endif

static CYTHON_INLINE void __Pyx_ErrRestore(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->curexc_type;
    tmp_value = tstate->curexc_value;
    tmp_tb = tstate->curexc_traceback;
    tstate->curexc_type = type;
    tstate->curexc_value = value;
    tstate->curexc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_Restore(type, value, tb);
#endif
}
static CYTHON_INLINE void __Pyx_ErrFetch(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->curexc_type;
    *value = tstate->curexc_value;
    *tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(type, value, tb);
#endif
}

static void __Pyx_WriteUnraisable(const char *name, CYTHON_UNUSED int clineno,
                                  CYTHON_UNUSED int lineno, CYTHON_UNUSED const char *filename,
                                  int full_traceback, CYTHON_UNUSED int nogil) {
    PyObject *old_exc, *old_val, *old_tb;
    PyObject *ctx;
#ifdef WITH_THREAD
    PyGILState_STATE state;
    if (nogil)
        state = PyGILState_Ensure();
#endif
    __Pyx_ErrFetch(&old_exc, &old_val, &old_tb);
    if (full_traceback) {
        Py_XINCREF(old_exc);
        Py_XINCREF(old_val);
        Py_XINCREF(old_tb);
        __Pyx_ErrRestore(old_exc, old_val, old_tb);
        PyErr_PrintEx(1);
    }
    #if PY_MAJOR_VERSION < 3
    ctx = PyString_FromString(name);
    #else
    ctx = PyUnicode_FromString(name);
    #endif
    __Pyx_ErrRestore(old_exc, old_val, old_tb);
    if (!ctx) {
        PyErr_WriteUnraisable(Py_None);
    } else {
        PyErr_WriteUnraisable(ctx);
        Py_DECREF(ctx);
    }
#ifdef WITH_THREAD
    if (nogil)
        PyGILState_Release(state);
#endif
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_Call(PyObject *func, PyObject *arg, PyObject *kw) {
    PyObject *result;
    ternaryfunc call = func->ob_type->tp_call;
    if (unlikely(!call))
        return PyObject_Call(func, arg, kw);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = (*call)(func, arg, kw);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if PY_MAJOR_VERSION < 3
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb,
                        CYTHON_UNUSED PyObject *cause) {
    Py_XINCREF(type);
    if (!value || value == Py_None)
        value = NULL;
    else
        Py_INCREF(value);
    if (!tb || tb == Py_None)
        tb = NULL;
    else {
        Py_INCREF(tb);
        if (!PyTraceBack_Check(tb)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: arg 3 must be a traceback or None");
            goto raise_error;
        }
    }
    if (PyType_Check(type)) {
#if CYTHON_COMPILING_IN_PYPY
        if (!value) {
            Py_INCREF(Py_None);
            value = Py_None;
        }
#endif
        PyErr_NormalizeException(&type, &value, &tb);
    } else {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto raise_error;
        }
        value = type;
        type = (PyObject*) Py_TYPE(type);
        Py_INCREF(type);
        if (!PyType_IsSubtype((PyTypeObject *)type, (PyTypeObject *)PyExc_BaseException)) {
            PyErr_SetString(PyExc_TypeError,
                "raise: exception class must be a subclass of BaseException");
            goto raise_error;
        }
    }
    __Pyx_ErrRestore(type, value, tb);
    return;
raise_error:
    Py_XDECREF(value);
    Py_XDECREF(type);
    Py_XDECREF(tb);
    return;
}
#else
static void __Pyx_Raise(PyObject *type, PyObject *value, PyObject *tb, PyObject *cause) {
    PyObject* owned_instance = NULL;
    if (tb == Py_None) {
        tb = 0;
    } else if (tb && !PyTraceBack_Check(tb)) {
        PyErr_SetString(PyExc_TypeError,
            "raise: arg 3 must be a traceback or None");
        goto bad;
    }
    if (value == Py_None)
        value = 0;
    if (PyExceptionInstance_Check(type)) {
        if (value) {
            PyErr_SetString(PyExc_TypeError,
                "instance exception may not have a separate value");
            goto bad;
        }
        value = type;
        type = (PyObject*) Py_TYPE(value);
    } else if (PyExceptionClass_Check(type)) {
        PyObject *instance_class = NULL;
        if (value && PyExceptionInstance_Check(value)) {
            instance_class = (PyObject*) Py_TYPE(value);
            if (instance_class != type) {
                int is_subclass = PyObject_IsSubclass(instance_class, type);
                if (!is_subclass) {
                    instance_class = NULL;
                } else if (unlikely(is_subclass == -1)) {
                    goto bad;
                } else {
                    type = instance_class;
                }
            }
        }
        if (!instance_class) {
            PyObject *args;
            if (!value)
                args = PyTuple_New(0);
            else if (PyTuple_Check(value)) {
                Py_INCREF(value);
                args = value;
            } else
                args = PyTuple_Pack(1, value);
            if (!args)
                goto bad;
            owned_instance = PyObject_Call(type, args, NULL);
            Py_DECREF(args);
            if (!owned_instance)
                goto bad;
            value = owned_instance;
            if (!PyExceptionInstance_Check(value)) {
                PyErr_Format(PyExc_TypeError,
                             "calling %R should have returned an instance of "
                             "BaseException, not %R",
                             type, Py_TYPE(value));
                goto bad;
            }
        }
    } else {
        PyErr_SetString(PyExc_TypeError,
            "raise: exception class must be a subclass of BaseException");
        goto bad;
    }
#if PY_VERSION_HEX >= 0x03030000
    if (cause) {
#else
    if (cause && cause != Py_None) {
#endif
        PyObject *fixed_cause;
        if (cause == Py_None) {
            fixed_cause = NULL;
        } else if (PyExceptionClass_Check(cause)) {
            fixed_cause = PyObject_CallObject(cause, NULL);
            if (fixed_cause == NULL)
                goto bad;
        } else if (PyExceptionInstance_Check(cause)) {
            fixed_cause = cause;
            Py_INCREF(fixed_cause);
        } else {
            PyErr_SetString(PyExc_TypeError,
                            "exception causes must derive from "
                            "BaseException");
            goto bad;
        }
        PyException_SetCause(value, fixed_cause);
    }
    PyErr_SetObject(type, value);
    if (tb) {
#if CYTHON_COMPILING_IN_PYPY
        PyObject *tmp_type, *tmp_value, *tmp_tb;
        PyErr_Fetch(&tmp_type, &tmp_value, &tmp_tb);
        Py_INCREF(tb);
        PyErr_Restore(tmp_type, tmp_value, tb);
        Py_XDECREF(tmp_tb);
#else
        PyThreadState *tstate = PyThreadState_GET();
        PyObject* tmp_tb = tstate->curexc_traceback;
        if (tb != tmp_tb) {
            Py_INCREF(tb);
            tstate->curexc_traceback = tb;
            Py_XDECREF(tmp_tb);
        }
#endif
    }
bad:
    Py_XDECREF(owned_instance);
    return;
}
#endif

static void __Pyx_RaiseArgumentTypeInvalid(const char* name, PyObject *obj, PyTypeObject *type) {
    PyErr_Format(PyExc_TypeError,
        "Argument '%.200s' has incorrect type (expected %.200s, got %.200s)",
        name, type->tp_name, Py_TYPE(obj)->tp_name);
}
static CYTHON_INLINE int __Pyx_ArgTypeTest(PyObject *obj, PyTypeObject *type, int none_allowed,
    const char *name, int exact)
{
    if (unlikely(!type)) {
        PyErr_SetString(PyExc_SystemError, "Missing type object");
        return 0;
    }
    if (none_allowed && obj == Py_None) return 1;
    else if (exact) {
        if (likely(Py_TYPE(obj) == type)) return 1;
        #if PY_MAJOR_VERSION == 2
        else if ((type == &PyBaseString_Type) && likely(__Pyx_PyBaseString_CheckExact(obj))) return 1;
        #endif
    }
    else {
        if (likely(PyObject_TypeCheck(obj, type))) return 1;
    }
    __Pyx_RaiseArgumentTypeInvalid(name, obj, type);
    return 0;
}

static CYTHON_INLINE void __Pyx_ExceptionSave(PyObject **type, PyObject **value, PyObject **tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyThreadState *tstate = PyThreadState_GET();
    *type = tstate->exc_type;
    *value = tstate->exc_value;
    *tb = tstate->exc_traceback;
    Py_XINCREF(*type);
    Py_XINCREF(*value);
    Py_XINCREF(*tb);
#else
    PyErr_GetExcInfo(type, value, tb);
#endif
}
static void __Pyx_ExceptionReset(PyObject *type, PyObject *value, PyObject *tb) {
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = type;
    tstate->exc_value = value;
    tstate->exc_traceback = tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(type, value, tb);
#endif
}

static int __Pyx_GetException(PyObject **type, PyObject **value, PyObject **tb) {
    PyObject *local_type, *local_value, *local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    PyObject *tmp_type, *tmp_value, *tmp_tb;
    PyThreadState *tstate = PyThreadState_GET();
    local_type = tstate->curexc_type;
    local_value = tstate->curexc_value;
    local_tb = tstate->curexc_traceback;
    tstate->curexc_type = 0;
    tstate->curexc_value = 0;
    tstate->curexc_traceback = 0;
#else
    PyErr_Fetch(&local_type, &local_value, &local_tb);
#endif
    PyErr_NormalizeException(&local_type, &local_value, &local_tb);
#if CYTHON_COMPILING_IN_CPYTHON
    if (unlikely(tstate->curexc_type))
#else
    if (unlikely(PyErr_Occurred()))
#endif
        goto bad;
    #if PY_MAJOR_VERSION >= 3
    if (local_tb) {
        if (unlikely(PyException_SetTraceback(local_value, local_tb) < 0))
            goto bad;
    }
    #endif
    Py_XINCREF(local_tb);
    Py_XINCREF(local_type);
    Py_XINCREF(local_value);
    *type = local_type;
    *value = local_value;
    *tb = local_tb;
#if CYTHON_COMPILING_IN_CPYTHON
    tmp_type = tstate->exc_type;
    tmp_value = tstate->exc_value;
    tmp_tb = tstate->exc_traceback;
    tstate->exc_type = local_type;
    tstate->exc_value = local_value;
    tstate->exc_traceback = local_tb;
    Py_XDECREF(tmp_type);
    Py_XDECREF(tmp_value);
    Py_XDECREF(tmp_tb);
#else
    PyErr_SetExcInfo(local_type, local_value, local_tb);
#endif
    return 0;
bad:
    *type = 0;
    *value = 0;
    *tb = 0;
    Py_XDECREF(local_type);
    Py_XDECREF(local_value);
    Py_XDECREF(local_tb);
    return -1;
}

static void __Pyx_RaiseDoubleKeywordsError(
    const char* func_name,
    PyObject* kw_name)
{
    PyErr_Format(PyExc_TypeError,
        #if PY_MAJOR_VERSION >= 3
        "%s() got multiple values for keyword argument '%U'", func_name, kw_name);
        #else
        "%s() got multiple values for keyword argument '%s'", func_name,
        PyString_AsString(kw_name));
        #endif
}

static int __Pyx_ParseOptionalKeywords(
    PyObject *kwds,
    PyObject **argnames[],
    PyObject *kwds2,
    PyObject *values[],
    Py_ssize_t num_pos_args,
    const char* function_name)
{
    PyObject *key = 0, *value = 0;
    Py_ssize_t pos = 0;
    PyObject*** name;
    PyObject*** first_kw_arg = argnames + num_pos_args;
    while (PyDict_Next(kwds, &pos, &key, &value)) {
        name = first_kw_arg;
        while (*name && (**name != key)) name++;
        if (*name) {
            values[name-argnames] = value;
            continue;
        }
        name = first_kw_arg;
        #if PY_MAJOR_VERSION < 3
        if (likely(PyString_CheckExact(key)) || likely(PyString_Check(key))) {
            while (*name) {
                if ((CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**name) == PyString_GET_SIZE(key))
                        && _PyString_Eq(**name, key)) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    if ((**argname == key) || (
                            (CYTHON_COMPILING_IN_PYPY || PyString_GET_SIZE(**argname) == PyString_GET_SIZE(key))
                             && _PyString_Eq(**argname, key))) {
                        goto arg_passed_twice;
                    }
                    argname++;
                }
            }
        } else
        #endif
        if (likely(PyUnicode_Check(key))) {
            while (*name) {
                int cmp = (**name == key) ? 0 :
                #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                    (PyUnicode_GET_SIZE(**name) != PyUnicode_GET_SIZE(key)) ? 1 :
                #endif
                    PyUnicode_Compare(**name, key);
                if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                if (cmp == 0) {
                    values[name-argnames] = value;
                    break;
                }
                name++;
            }
            if (*name) continue;
            else {
                PyObject*** argname = argnames;
                while (argname != first_kw_arg) {
                    int cmp = (**argname == key) ? 0 :
                    #if !CYTHON_COMPILING_IN_PYPY && PY_MAJOR_VERSION >= 3
                        (PyUnicode_GET_SIZE(**argname) != PyUnicode_GET_SIZE(key)) ? 1 :
                    #endif
                        PyUnicode_Compare(**argname, key);
                    if (cmp < 0 && unlikely(PyErr_Occurred())) goto bad;
                    if (cmp == 0) goto arg_passed_twice;
                    argname++;
                }
            }
        } else
            goto invalid_keyword_type;
        if (kwds2) {
            if (unlikely(PyDict_SetItem(kwds2, key, value))) goto bad;
        } else {
            goto invalid_keyword;
        }
    }
    return 0;
arg_passed_twice:
    __Pyx_RaiseDoubleKeywordsError(function_name, key);
    goto bad;
invalid_keyword_type:
    PyErr_Format(PyExc_TypeError,
        "%.200s() keywords must be strings", function_name);
    goto bad;
invalid_keyword:
    PyErr_Format(PyExc_TypeError,
    #if PY_MAJOR_VERSION < 3
        "%.200s() got an unexpected keyword argument '%.200s'",
        function_name, PyString_AsString(key));
    #else
        "%s() got an unexpected keyword argument '%U'",
        function_name, key);
    #endif
bad:
    return -1;
}

static CYTHON_INLINE int __Pyx_PyBytes_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
    if (s1 == s2) {
        return (equals == Py_EQ);
    } else if (PyBytes_CheckExact(s1) & PyBytes_CheckExact(s2)) {
        const char *ps1, *ps2;
        Py_ssize_t length = PyBytes_GET_SIZE(s1);
        if (length != PyBytes_GET_SIZE(s2))
            return (equals == Py_NE);
        ps1 = PyBytes_AS_STRING(s1);
        ps2 = PyBytes_AS_STRING(s2);
        if (ps1[0] != ps2[0]) {
            return (equals == Py_NE);
        } else if (length == 1) {
            return (equals == Py_EQ);
        } else {
            int result = memcmp(ps1, ps2, (size_t)length);
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & PyBytes_CheckExact(s2)) {
        return (equals == Py_NE);
    } else if ((s2 == Py_None) & PyBytes_CheckExact(s1)) {
        return (equals == Py_NE);
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
#endif
}

static CYTHON_INLINE int __Pyx_PyUnicode_Equals(PyObject* s1, PyObject* s2, int equals) {
#if CYTHON_COMPILING_IN_PYPY
    return PyObject_RichCompareBool(s1, s2, equals);
#else
#if PY_MAJOR_VERSION < 3
    PyObject* owned_ref = NULL;
#endif
    int s1_is_unicode, s2_is_unicode;
    if (s1 == s2) {
        goto return_eq;
    }
    s1_is_unicode = PyUnicode_CheckExact(s1);
    s2_is_unicode = PyUnicode_CheckExact(s2);
#if PY_MAJOR_VERSION < 3
    if ((s1_is_unicode & (!s2_is_unicode)) && PyString_CheckExact(s2)) {
        owned_ref = PyUnicode_FromObject(s2);
        if (unlikely(!owned_ref))
            return -1;
        s2 = owned_ref;
        s2_is_unicode = 1;
    } else if ((s2_is_unicode & (!s1_is_unicode)) && PyString_CheckExact(s1)) {
        owned_ref = PyUnicode_FromObject(s1);
        if (unlikely(!owned_ref))
            return -1;
        s1 = owned_ref;
        s1_is_unicode = 1;
    } else if (((!s2_is_unicode) & (!s1_is_unicode))) {
        return __Pyx_PyBytes_Equals(s1, s2, equals);
    }
#endif
    if (s1_is_unicode & s2_is_unicode) {
        Py_ssize_t length;
        int kind;
        void *data1, *data2;
        if (unlikely(__Pyx_PyUnicode_READY(s1) < 0) || unlikely(__Pyx_PyUnicode_READY(s2) < 0))
            return -1;
        length = __Pyx_PyUnicode_GET_LENGTH(s1);
        if (length != __Pyx_PyUnicode_GET_LENGTH(s2)) {
            goto return_ne;
        }
        kind = __Pyx_PyUnicode_KIND(s1);
        if (kind != __Pyx_PyUnicode_KIND(s2)) {
            goto return_ne;
        }
        data1 = __Pyx_PyUnicode_DATA(s1);
        data2 = __Pyx_PyUnicode_DATA(s2);
        if (__Pyx_PyUnicode_READ(kind, data1, 0) != __Pyx_PyUnicode_READ(kind, data2, 0)) {
            goto return_ne;
        } else if (length == 1) {
            goto return_eq;
        } else {
            int result = memcmp(data1, data2, (size_t)(length * kind));
            #if PY_MAJOR_VERSION < 3
            Py_XDECREF(owned_ref);
            #endif
            return (equals == Py_EQ) ? (result == 0) : (result != 0);
        }
    } else if ((s1 == Py_None) & s2_is_unicode) {
        goto return_ne;
    } else if ((s2 == Py_None) & s1_is_unicode) {
        goto return_ne;
    } else {
        int result;
        PyObject* py_result = PyObject_RichCompare(s1, s2, equals);
        if (!py_result)
            return -1;
        result = __Pyx_PyObject_IsTrue(py_result);
        Py_DECREF(py_result);
        return result;
    }
return_eq:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_EQ);
return_ne:
    #if PY_MAJOR_VERSION < 3
    Py_XDECREF(owned_ref);
    #endif
    return (equals == Py_NE);
#endif
}

static CYTHON_INLINE PyObject *__Pyx_GetModuleGlobalName(PyObject *name) {
    PyObject *result;
#if CYTHON_COMPILING_IN_CPYTHON
    result = PyDict_GetItem(__pyx_d, name);
    if (likely(result)) {
        Py_INCREF(result);
    } else {
#else
    result = PyObject_GetItem(__pyx_d, name);
    if (!result) {
        PyErr_Clear();
#endif
        result = __Pyx_GetBuiltinName(name);
    }
    return result;
}

#if CYTHON_COMPILING_IN_CPYTHON
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallMethO(PyObject *func, PyObject *arg) {
    PyObject *self, *result;
    PyCFunction cfunc;
    cfunc = PyCFunction_GET_FUNCTION(func);
    self = PyCFunction_GET_SELF(func);
    if (unlikely(Py_EnterRecursiveCall((char*)" while calling a Python object")))
        return NULL;
    result = cfunc(self, arg);
    Py_LeaveRecursiveCall();
    if (unlikely(!result) && unlikely(!PyErr_Occurred())) {
        PyErr_SetString(
            PyExc_SystemError,
            "NULL result without error in PyObject_Call");
    }
    return result;
}
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx__PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_New(1);
    if (unlikely(!args)) return NULL;
    Py_INCREF(arg);
    PyTuple_SET_ITEM(args, 0, arg);
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
#ifdef __Pyx_CyFunction_USED
    if (likely(PyCFunction_Check(func) || PyObject_TypeCheck(func, __pyx_CyFunctionType))) {
#else
    if (likely(PyCFunction_Check(func))) {
#endif
        if (likely(PyCFunction_GET_FLAGS(func) & METH_O)) {
            return __Pyx_PyObject_CallMethO(func, arg);
        }
    }
    return __Pyx__PyObject_CallOneArg(func, arg);
}
#else
static CYTHON_INLINE PyObject* __Pyx_PyObject_CallOneArg(PyObject *func, PyObject *arg) {
    PyObject *result;
    PyObject *args = PyTuple_Pack(1, arg);
    if (unlikely(!args)) return NULL;
    result = __Pyx_PyObject_Call(func, args, NULL);
    Py_DECREF(args);
    return result;
}
#endif

#if CYTHON_USE_PYLONG_INTERNALS
  #include "longintrepr.h"
#endif

#if CYTHON_COMPILING_IN_CPYTHON
static PyObject* __Pyx_PyInt_AddObjC(PyObject *op1, PyObject *op2, CYTHON_UNUSED long intval, CYTHON_UNUSED int inplace) {
    #if PY_MAJOR_VERSION < 3
    if (likely(PyInt_CheckExact(op1))) {
        const long b = intval;
        long x;
        long a = PyInt_AS_LONG(op1);
            x = (long)((unsigned long)a + b);
            if (likely((x^a) >= 0 || (x^b) >= 0))
                return PyInt_FromLong(x);
            return PyLong_Type.tp_as_number->nb_add(op1, op2);
    }
    #endif
    #if CYTHON_USE_PYLONG_INTERNALS && PY_MAJOR_VERSION >= 3
    if (likely(PyLong_CheckExact(op1))) {
        const long b = intval;
        long a, x;
        const PY_LONG_LONG llb = intval;
        PY_LONG_LONG lla, llx;
        const digit* digits = ((PyLongObject*)op1)->ob_digit;
        const Py_ssize_t size = Py_SIZE(op1);
        if (likely(__Pyx_sst_abs(size) <= 1)) {
            a = likely(size) ? digits[0] : 0;
            if (size == -1) a = -a;
        } else {
            switch (size) {
                case -2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 2:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        a = (long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 3:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        a = (long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case -4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = -(PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                case 4:
                    if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                        a = (long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0]));
                        break;
                    } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                        lla = (PY_LONG_LONG) (((((((((unsigned PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (unsigned PY_LONG_LONG)digits[0]));
                        goto long_long;
                    }
                default: return PyLong_Type.tp_as_number->nb_add(op1, op2);
            }
        }
                x = a + b;
            return PyLong_FromLong(x);
        long_long:
                llx = lla + llb;
            return PyLong_FromLongLong(llx);
    }
    #endif
    if (PyFloat_CheckExact(op1)) {
        const long b = intval;
        double a = PyFloat_AS_DOUBLE(op1);
            double result;
            PyFPE_START_PROTECT("add", return NULL)
            result = ((double)a) + (double)b;
            PyFPE_END_PROTECT(result)
            return PyFloat_FromDouble(result);
    }
    return (inplace ? PyNumber_InPlaceAdd : PyNumber_Add)(op1, op2);
}
#endif

static int __Pyx_SetVtable(PyObject *dict, void *vtable) {
#if PY_VERSION_HEX >= 0x02070000
    PyObject *ob = PyCapsule_New(vtable, 0, 0);
#else
    PyObject *ob = PyCObject_FromVoidPtr(vtable, 0);
#endif
    if (!ob)
        goto bad;
    if (PyDict_SetItem(dict, __pyx_n_s_pyx_vtable, ob) < 0)
        goto bad;
    Py_DECREF(ob);
    return 0;
bad:
    Py_XDECREF(ob);
    return -1;
}

static PyObject *__Pyx_Import(PyObject *name, PyObject *from_list, int level) {
    PyObject *empty_list = 0;
    PyObject *module = 0;
    PyObject *global_dict = 0;
    PyObject *empty_dict = 0;
    PyObject *list;
    #if PY_VERSION_HEX < 0x03030000
    PyObject *py_import;
    py_import = __Pyx_PyObject_GetAttrStr(__pyx_b, __pyx_n_s_import);
    if (!py_import)
        goto bad;
    #endif
    if (from_list)
        list = from_list;
    else {
        empty_list = PyList_New(0);
        if (!empty_list)
            goto bad;
        list = empty_list;
    }
    global_dict = PyModule_GetDict(__pyx_m);
    if (!global_dict)
        goto bad;
    empty_dict = PyDict_New();
    if (!empty_dict)
        goto bad;
    {
        #if PY_MAJOR_VERSION >= 3
        if (level == -1) {
            if (strchr(__Pyx_MODULE_NAME, '.')) {
                #if PY_VERSION_HEX < 0x03030000
                PyObject *py_level = PyInt_FromLong(1);
                if (!py_level)
                    goto bad;
                module = PyObject_CallFunctionObjArgs(py_import,
                    name, global_dict, empty_dict, list, py_level, NULL);
                Py_DECREF(py_level);
                #else
                module = PyImport_ImportModuleLevelObject(
                    name, global_dict, empty_dict, list, 1);
                #endif
                if (!module) {
                    if (!PyErr_ExceptionMatches(PyExc_ImportError))
                        goto bad;
                    PyErr_Clear();
                }
            }
            level = 0;
        }
        #endif
        if (!module) {
            #if PY_VERSION_HEX < 0x03030000
            PyObject *py_level = PyInt_FromLong(level);
            if (!py_level)
                goto bad;
            module = PyObject_CallFunctionObjArgs(py_import,
                name, global_dict, empty_dict, list, py_level, NULL);
            Py_DECREF(py_level);
            #else
            module = PyImport_ImportModuleLevelObject(
                name, global_dict, empty_dict, list, level);
            #endif
        }
    }
bad:
    #if PY_VERSION_HEX < 0x03030000
    Py_XDECREF(py_import);
    #endif
    Py_XDECREF(empty_list);
    Py_XDECREF(empty_dict);
    return module;
}

static PyObject* __Pyx_ImportFrom(PyObject* module, PyObject* name) {
    PyObject* value = __Pyx_PyObject_GetAttrStr(module, name);
    if (unlikely(!value) && PyErr_ExceptionMatches(PyExc_AttributeError)) {
        PyErr_Format(PyExc_ImportError,
        #if PY_MAJOR_VERSION < 3
            "cannot import name %.230s", PyString_AS_STRING(name));
        #else
            "cannot import name %S", name);
        #endif
    }
    return value;
}

static int __pyx_bisect_code_objects(__Pyx_CodeObjectCacheEntry* entries, int count, int code_line) {
    int start = 0, mid = 0, end = count - 1;
    if (end >= 0 && code_line > entries[end].code_line) {
        return count;
    }
    while (start < end) {
        mid = start + (end - start) / 2;
        if (code_line < entries[mid].code_line) {
            end = mid;
        } else if (code_line > entries[mid].code_line) {
             start = mid + 1;
        } else {
            return mid;
        }
    }
    if (code_line <= entries[mid].code_line) {
        return mid;
    } else {
        return mid + 1;
    }
}
static PyCodeObject *__pyx_find_code_object(int code_line) {
    PyCodeObject* code_object;
    int pos;
    if (unlikely(!code_line) || unlikely(!__pyx_code_cache.entries)) {
        return NULL;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if (unlikely(pos >= __pyx_code_cache.count) || unlikely(__pyx_code_cache.entries[pos].code_line != code_line)) {
        return NULL;
    }
    code_object = __pyx_code_cache.entries[pos].code_object;
    Py_INCREF(code_object);
    return code_object;
}
static void __pyx_insert_code_object(int code_line, PyCodeObject* code_object) {
    int pos, i;
    __Pyx_CodeObjectCacheEntry* entries = __pyx_code_cache.entries;
    if (unlikely(!code_line)) {
        return;
    }
    if (unlikely(!entries)) {
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Malloc(64*sizeof(__Pyx_CodeObjectCacheEntry));
        if (likely(entries)) {
            __pyx_code_cache.entries = entries;
            __pyx_code_cache.max_count = 64;
            __pyx_code_cache.count = 1;
            entries[0].code_line = code_line;
            entries[0].code_object = code_object;
            Py_INCREF(code_object);
        }
        return;
    }
    pos = __pyx_bisect_code_objects(__pyx_code_cache.entries, __pyx_code_cache.count, code_line);
    if ((pos < __pyx_code_cache.count) && unlikely(__pyx_code_cache.entries[pos].code_line == code_line)) {
        PyCodeObject* tmp = entries[pos].code_object;
        entries[pos].code_object = code_object;
        Py_DECREF(tmp);
        return;
    }
    if (__pyx_code_cache.count == __pyx_code_cache.max_count) {
        int new_max = __pyx_code_cache.max_count + 64;
        entries = (__Pyx_CodeObjectCacheEntry*)PyMem_Realloc(
            __pyx_code_cache.entries, (size_t)new_max*sizeof(__Pyx_CodeObjectCacheEntry));
        if (unlikely(!entries)) {
            return;
        }
        __pyx_code_cache.entries = entries;
        __pyx_code_cache.max_count = new_max;
    }
    for (i=__pyx_code_cache.count; i>pos; i--) {
        entries[i] = entries[i-1];
    }
    entries[pos].code_line = code_line;
    entries[pos].code_object = code_object;
    __pyx_code_cache.count++;
    Py_INCREF(code_object);
}

#include "compile.h"
#include "frameobject.h"
#include "traceback.h"
static PyCodeObject* __Pyx_CreateCodeObjectForTraceback(
            const char *funcname, int c_line,
            int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyObject *py_srcfile = 0;
    PyObject *py_funcname = 0;
    #if PY_MAJOR_VERSION < 3
    py_srcfile = PyString_FromString(filename);
    #else
    py_srcfile = PyUnicode_FromString(filename);
    #endif
    if (!py_srcfile) goto bad;
    if (c_line) {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #else
        py_funcname = PyUnicode_FromFormat( "%s (%s:%d)", funcname, __pyx_cfilenm, c_line);
        #endif
    }
    else {
        #if PY_MAJOR_VERSION < 3
        py_funcname = PyString_FromString(funcname);
        #else
        py_funcname = PyUnicode_FromString(funcname);
        #endif
    }
    if (!py_funcname) goto bad;
    py_code = __Pyx_PyCode_New(
        0,
        0,
        0,
        0,
        0,
        __pyx_empty_bytes, /*PyObject *code,*/
        __pyx_empty_tuple, /*PyObject *consts,*/
        __pyx_empty_tuple, /*PyObject *names,*/
        __pyx_empty_tuple, /*PyObject *varnames,*/
        __pyx_empty_tuple, /*PyObject *freevars,*/
        __pyx_empty_tuple, /*PyObject *cellvars,*/
        py_srcfile,   /*PyObject *filename,*/
        py_funcname,  /*PyObject *name,*/
        py_line,
        __pyx_empty_bytes  /*PyObject *lnotab*/
    );
    Py_DECREF(py_srcfile);
    Py_DECREF(py_funcname);
    return py_code;
bad:
    Py_XDECREF(py_srcfile);
    Py_XDECREF(py_funcname);
    return NULL;
}
static void __Pyx_AddTraceback(const char *funcname, int c_line,
                               int py_line, const char *filename) {
    PyCodeObject *py_code = 0;
    PyFrameObject *py_frame = 0;
    py_code = __pyx_find_code_object(c_line ? c_line : py_line);
    if (!py_code) {
        py_code = __Pyx_CreateCodeObjectForTraceback(
            funcname, c_line, py_line, filename);
        if (!py_code) goto bad;
        __pyx_insert_code_object(c_line ? c_line : py_line, py_code);
    }
    py_frame = PyFrame_New(
        PyThreadState_GET(), /*PyThreadState *tstate,*/
        py_code,             /*PyCodeObject *code,*/
        __pyx_d,      /*PyObject *globals,*/
        0                    /*PyObject *locals*/
    );
    if (!py_frame) goto bad;
    py_frame->f_lineno = py_line;
    PyTraceBack_Here(py_frame);
bad:
    Py_XDECREF(py_code);
    Py_XDECREF(py_frame);
}

#define __PYX_VERIFY_RETURN_INT(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 0)
#define __PYX_VERIFY_RETURN_INT_EXC(target_type, func_type, func_value)\
    __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, 1)
#define __PYX__VERIFY_RETURN_INT(target_type, func_type, func_value, exc)\
    {\
        func_type value = func_value;\
        if (sizeof(target_type) < sizeof(func_type)) {\
            if (unlikely(value != (func_type) (target_type) value)) {\
                func_type zero = 0;\
                if (exc && unlikely(value == (func_type)-1 && PyErr_Occurred()))\
                    return (target_type) -1;\
                if (is_unsigned && unlikely(value < zero))\
                    goto raise_neg_overflow;\
                else\
                    goto raise_overflow;\
            }\
        }\
        return (target_type) value;\
    }

static CYTHON_INLINE int __Pyx_PyInt_As_int(PyObject *x) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(int) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(int, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (int) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case  1: __PYX_VERIFY_RETURN_INT(int, digit, digits[0])
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 2 * PyLong_SHIFT) {
                            return (int) (((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 3 * PyLong_SHIFT) {
                            return (int) (((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) >= 4 * PyLong_SHIFT) {
                            return (int) (((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (int) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(int) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (int) 0;
                case -1: __PYX_VERIFY_RETURN_INT(int, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(int,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(int) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(int) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                            return (int) ((((((int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(int) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(int) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                            return (int) ((((((((int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(int) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) (((int)-1)*(((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(int) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(int, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(int) - 1 > 4 * PyLong_SHIFT) {
                            return (int) ((((((((((int)digits[3]) << PyLong_SHIFT) | (int)digits[2]) << PyLong_SHIFT) | (int)digits[1]) << PyLong_SHIFT) | (int)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(int) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, long, PyLong_AsLong(x))
            } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(int, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            int val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (int) -1;
        }
    } else {
        int val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (int) -1;
        val = __Pyx_PyInt_As_int(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to int");
    return (int) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to int");
    return (int) -1;
}

static CYTHON_INLINE PY_LONG_LONG __Pyx_PyInt_As_PY_LONG_LONG(PyObject *x) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (PY_LONG_LONG) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, digit, digits[0])
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) >= 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (PY_LONG_LONG) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (PY_LONG_LONG) 0;
                case -1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(PY_LONG_LONG,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(PY_LONG_LONG) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(PY_LONG_LONG) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(PY_LONG_LONG) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) (((PY_LONG_LONG)-1)*(((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(PY_LONG_LONG) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(PY_LONG_LONG, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(PY_LONG_LONG) - 1 > 4 * PyLong_SHIFT) {
                            return (PY_LONG_LONG) ((((((((((PY_LONG_LONG)digits[3]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[2]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[1]) << PyLong_SHIFT) | (PY_LONG_LONG)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, long, PyLong_AsLong(x))
            } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(PY_LONG_LONG, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            PY_LONG_LONG val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (PY_LONG_LONG) -1;
        }
    } else {
        PY_LONG_LONG val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (PY_LONG_LONG) -1;
        val = __Pyx_PyInt_As_PY_LONG_LONG(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to PY_LONG_LONG");
    return (PY_LONG_LONG) -1;
}

static CYTHON_INLINE lemur::api::TERMID_T __Pyx_PyInt_As_lemur_3a__3a_api_3a__3a_TERMID_T(PyObject *x) {
    const lemur::api::TERMID_T neg_one = (lemur::api::TERMID_T) -1, const_zero = (lemur::api::TERMID_T) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(lemur::api::TERMID_T) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (lemur::api::TERMID_T) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (lemur::api::TERMID_T) 0;
                case  1: __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, digit, digits[0])
                case 2:
                    if (8 * sizeof(lemur::api::TERMID_T) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) >= 2 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) (((((lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(lemur::api::TERMID_T) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) >= 3 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) (((((((lemur::api::TERMID_T)digits[2]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(lemur::api::TERMID_T) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) >= 4 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) (((((((((lemur::api::TERMID_T)digits[3]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[2]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (lemur::api::TERMID_T) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(lemur::api::TERMID_T) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(lemur::api::TERMID_T, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(lemur::api::TERMID_T) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(lemur::api::TERMID_T, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (lemur::api::TERMID_T) 0;
                case -1: __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(lemur::api::TERMID_T) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) - 1 > 2 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) (((lemur::api::TERMID_T)-1)*(((((lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(lemur::api::TERMID_T) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) - 1 > 2 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) ((((((lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(lemur::api::TERMID_T) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) - 1 > 3 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) (((lemur::api::TERMID_T)-1)*(((((((lemur::api::TERMID_T)digits[2]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(lemur::api::TERMID_T) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) - 1 > 3 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) ((((((((lemur::api::TERMID_T)digits[2]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(lemur::api::TERMID_T) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) - 1 > 4 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) (((lemur::api::TERMID_T)-1)*(((((((((lemur::api::TERMID_T)digits[3]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[2]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(lemur::api::TERMID_T) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(lemur::api::TERMID_T, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(lemur::api::TERMID_T) - 1 > 4 * PyLong_SHIFT) {
                            return (lemur::api::TERMID_T) ((((((((((lemur::api::TERMID_T)digits[3]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[2]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[1]) << PyLong_SHIFT) | (lemur::api::TERMID_T)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(lemur::api::TERMID_T) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(lemur::api::TERMID_T, long, PyLong_AsLong(x))
            } else if (sizeof(lemur::api::TERMID_T) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(lemur::api::TERMID_T, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            lemur::api::TERMID_T val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (lemur::api::TERMID_T) -1;
        }
    } else {
        lemur::api::TERMID_T val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (lemur::api::TERMID_T) -1;
        val = __Pyx_PyInt_As_lemur_3a__3a_api_3a__3a_TERMID_T(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to lemur::api::TERMID_T");
    return (lemur::api::TERMID_T) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to lemur::api::TERMID_T");
    return (lemur::api::TERMID_T) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_int(int value) {
    const int neg_one = (int) -1, const_zero = (int) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(int) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(int) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(int) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(int) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(int),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_lemur_3a__3a_api_3a__3a_TERMID_T(lemur::api::TERMID_T value) {
    const lemur::api::TERMID_T neg_one = (lemur::api::TERMID_T) -1, const_zero = (lemur::api::TERMID_T) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(lemur::api::TERMID_T) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(lemur::api::TERMID_T) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(lemur::api::TERMID_T) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(lemur::api::TERMID_T) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(lemur::api::TERMID_T) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(lemur::api::TERMID_T),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_PY_LONG_LONG(PY_LONG_LONG value) {
    const PY_LONG_LONG neg_one = (PY_LONG_LONG) -1, const_zero = (PY_LONG_LONG) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(PY_LONG_LONG) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(PY_LONG_LONG) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(PY_LONG_LONG) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(PY_LONG_LONG),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE size_t __Pyx_PyInt_As_size_t(PyObject *x) {
    const size_t neg_one = (size_t) -1, const_zero = (size_t) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(size_t) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(size_t, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (size_t) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case  1: __PYX_VERIFY_RETURN_INT(size_t, digit, digits[0])
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 2 * PyLong_SHIFT) {
                            return (size_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 3 * PyLong_SHIFT) {
                            return (size_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) >= 4 * PyLong_SHIFT) {
                            return (size_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (size_t) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(size_t) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(size_t) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (size_t) 0;
                case -1: __PYX_VERIFY_RETURN_INT(size_t, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(size_t,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(size_t) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(size_t) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                            return (size_t) ((((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(size_t) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(size_t) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                            return (size_t) ((((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(size_t) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) (((size_t)-1)*(((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(size_t) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(size_t, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(size_t) - 1 > 4 * PyLong_SHIFT) {
                            return (size_t) ((((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(size_t) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, long, PyLong_AsLong(x))
            } else if (sizeof(size_t) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(size_t, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            size_t val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (size_t) -1;
        }
    } else {
        size_t val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (size_t) -1;
        val = __Pyx_PyInt_As_size_t(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to size_t");
    return (size_t) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to size_t");
    return (size_t) -1;
}

static CYTHON_INLINE PyObject* __Pyx_PyInt_From_long(long value) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
    if (is_unsigned) {
        if (sizeof(long) < sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(unsigned long)) {
            return PyLong_FromUnsignedLong((unsigned long) value);
        } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
            return PyLong_FromUnsignedLongLong((unsigned PY_LONG_LONG) value);
        }
    } else {
        if (sizeof(long) <= sizeof(long)) {
            return PyInt_FromLong((long) value);
        } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
            return PyLong_FromLongLong((PY_LONG_LONG) value);
        }
    }
    {
        int one = 1; int little = (int)*(unsigned char *)&one;
        unsigned char *bytes = (unsigned char *)&value;
        return _PyLong_FromByteArray(bytes, sizeof(long),
                                     little, !is_unsigned);
    }
}

static CYTHON_INLINE long __Pyx_PyInt_As_long(PyObject *x) {
    const long neg_one = (long) -1, const_zero = (long) 0;
    const int is_unsigned = neg_one > const_zero;
#if PY_MAJOR_VERSION < 3
    if (likely(PyInt_Check(x))) {
        if (sizeof(long) < sizeof(long)) {
            __PYX_VERIFY_RETURN_INT(long, long, PyInt_AS_LONG(x))
        } else {
            long val = PyInt_AS_LONG(x);
            if (is_unsigned && unlikely(val < 0)) {
                goto raise_neg_overflow;
            }
            return (long) val;
        }
    } else
#endif
    if (likely(PyLong_Check(x))) {
        if (is_unsigned) {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case  1: __PYX_VERIFY_RETURN_INT(long, digit, digits[0])
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 2 * PyLong_SHIFT) {
                            return (long) (((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 3 * PyLong_SHIFT) {
                            return (long) (((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) >= 4 * PyLong_SHIFT) {
                            return (long) (((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0]));
                        }
                    }
                    break;
            }
#endif
#if CYTHON_COMPILING_IN_CPYTHON
            if (unlikely(Py_SIZE(x) < 0)) {
                goto raise_neg_overflow;
            }
#else
            {
                int result = PyObject_RichCompareBool(x, Py_False, Py_LT);
                if (unlikely(result < 0))
                    return (long) -1;
                if (unlikely(result == 1))
                    goto raise_neg_overflow;
            }
#endif
            if (sizeof(long) <= sizeof(unsigned long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned long, PyLong_AsUnsignedLong(x))
            } else if (sizeof(long) <= sizeof(unsigned PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, unsigned PY_LONG_LONG, PyLong_AsUnsignedLongLong(x))
            }
        } else {
#if CYTHON_USE_PYLONG_INTERNALS
            const digit* digits = ((PyLongObject*)x)->ob_digit;
            switch (Py_SIZE(x)) {
                case  0: return (long) 0;
                case -1: __PYX_VERIFY_RETURN_INT(long, sdigit, -(sdigit) digits[0])
                case  1: __PYX_VERIFY_RETURN_INT(long,  digit, +digits[0])
                case -2:
                    if (8 * sizeof(long) - 1 > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 2:
                    if (8 * sizeof(long) > 1 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 2 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                            return (long) ((((((long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -3:
                    if (8 * sizeof(long) - 1 > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 3:
                    if (8 * sizeof(long) > 2 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 3 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                            return (long) ((((((((long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case -4:
                    if (8 * sizeof(long) - 1 > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, long, -(long) (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) (((long)-1)*(((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
                case 4:
                    if (8 * sizeof(long) > 3 * PyLong_SHIFT) {
                        if (8 * sizeof(unsigned long) > 4 * PyLong_SHIFT) {
                            __PYX_VERIFY_RETURN_INT(long, unsigned long, (((((((((unsigned long)digits[3]) << PyLong_SHIFT) | (unsigned long)digits[2]) << PyLong_SHIFT) | (unsigned long)digits[1]) << PyLong_SHIFT) | (unsigned long)digits[0])))
                        } else if (8 * sizeof(long) - 1 > 4 * PyLong_SHIFT) {
                            return (long) ((((((((((long)digits[3]) << PyLong_SHIFT) | (long)digits[2]) << PyLong_SHIFT) | (long)digits[1]) << PyLong_SHIFT) | (long)digits[0])));
                        }
                    }
                    break;
            }
#endif
            if (sizeof(long) <= sizeof(long)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, long, PyLong_AsLong(x))
            } else if (sizeof(long) <= sizeof(PY_LONG_LONG)) {
                __PYX_VERIFY_RETURN_INT_EXC(long, PY_LONG_LONG, PyLong_AsLongLong(x))
            }
        }
        {
#if CYTHON_COMPILING_IN_PYPY && !defined(_PyLong_AsByteArray)
            PyErr_SetString(PyExc_RuntimeError,
                            "_PyLong_AsByteArray() not available in PyPy, cannot convert large numbers");
#else
            long val;
            PyObject *v = __Pyx_PyNumber_Int(x);
 #if PY_MAJOR_VERSION < 3
            if (likely(v) && !PyLong_Check(v)) {
                PyObject *tmp = v;
                v = PyNumber_Long(tmp);
                Py_DECREF(tmp);
            }
 #endif
            if (likely(v)) {
                int one = 1; int is_little = (int)*(unsigned char *)&one;
                unsigned char *bytes = (unsigned char *)&val;
                int ret = _PyLong_AsByteArray((PyLongObject *)v,
                                              bytes, sizeof(val),
                                              is_little, !is_unsigned);
                Py_DECREF(v);
                if (likely(!ret))
                    return val;
            }
#endif
            return (long) -1;
        }
    } else {
        long val;
        PyObject *tmp = __Pyx_PyNumber_Int(x);
        if (!tmp) return (long) -1;
        val = __Pyx_PyInt_As_long(tmp);
        Py_DECREF(tmp);
        return val;
    }
raise_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "value too large to convert to long");
    return (long) -1;
raise_neg_overflow:
    PyErr_SetString(PyExc_OverflowError,
        "can't convert negative value to long");
    return (long) -1;
}

static int __Pyx_check_binary_version(void) {
    char ctversion[4], rtversion[4];
    PyOS_snprintf(ctversion, 4, "%d.%d", PY_MAJOR_VERSION, PY_MINOR_VERSION);
    PyOS_snprintf(rtversion, 4, "%s", Py_GetVersion());
    if (ctversion[0] != rtversion[0] || ctversion[2] != rtversion[2]) {
        char message[200];
        PyOS_snprintf(message, sizeof(message),
                      "compiletime version %s of module '%.100s' "
                      "does not match runtime version %s",
                      ctversion, __Pyx_MODULE_NAME, rtversion);
        return PyErr_WarnEx(NULL, message, 1);
    }
    return 0;
}

static int __Pyx_InitStrings(__Pyx_StringTabEntry *t) {
    while (t->p) {
        #if PY_MAJOR_VERSION < 3
        if (t->is_unicode) {
            *t->p = PyUnicode_DecodeUTF8(t->s, t->n - 1, NULL);
        } else if (t->intern) {
            *t->p = PyString_InternFromString(t->s);
        } else {
            *t->p = PyString_FromStringAndSize(t->s, t->n - 1);
        }
        #else
        if (t->is_unicode | t->is_str) {
            if (t->intern) {
                *t->p = PyUnicode_InternFromString(t->s);
            } else if (t->encoding) {
                *t->p = PyUnicode_Decode(t->s, t->n - 1, t->encoding, NULL);
            } else {
                *t->p = PyUnicode_FromStringAndSize(t->s, t->n - 1);
            }
        } else {
            *t->p = PyBytes_FromStringAndSize(t->s, t->n - 1);
        }
        #endif
        if (!*t->p)
            return -1;
        ++t;
    }
    return 0;
}

static CYTHON_INLINE PyObject* __Pyx_PyUnicode_FromString(const char* c_str) {
    return __Pyx_PyUnicode_FromStringAndSize(c_str, (Py_ssize_t)strlen(c_str));
}
static CYTHON_INLINE char* __Pyx_PyObject_AsString(PyObject* o) {
    Py_ssize_t ignore;
    return __Pyx_PyObject_AsStringAndSize(o, &ignore);
}
static CYTHON_INLINE char* __Pyx_PyObject_AsStringAndSize(PyObject* o, Py_ssize_t *length) {
#if CYTHON_COMPILING_IN_CPYTHON && (__PYX_DEFAULT_STRING_ENCODING_IS_ASCII || __PYX_DEFAULT_STRING_ENCODING_IS_DEFAULT)
    if (
#if PY_MAJOR_VERSION < 3 && __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
            __Pyx_sys_getdefaultencoding_not_ascii &&
#endif
            PyUnicode_Check(o)) {
#if PY_VERSION_HEX < 0x03030000
        char* defenc_c;
        PyObject* defenc = _PyUnicode_AsDefaultEncodedString(o, NULL);
        if (!defenc) return NULL;
        defenc_c = PyBytes_AS_STRING(defenc);
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        {
            char* end = defenc_c + PyBytes_GET_SIZE(defenc);
            char* c;
            for (c = defenc_c; c < end; c++) {
                if ((unsigned char) (*c) >= 128) {
                    PyUnicode_AsASCIIString(o);
                    return NULL;
                }
            }
        }
#endif
        *length = PyBytes_GET_SIZE(defenc);
        return defenc_c;
#else
        if (__Pyx_PyUnicode_READY(o) == -1) return NULL;
#if __PYX_DEFAULT_STRING_ENCODING_IS_ASCII
        if (PyUnicode_IS_ASCII(o)) {
            *length = PyUnicode_GET_LENGTH(o);
            return PyUnicode_AsUTF8(o);
        } else {
            PyUnicode_AsASCIIString(o);
            return NULL;
        }
#else
        return PyUnicode_AsUTF8AndSize(o, length);
#endif
#endif
    } else
#endif
#if (!CYTHON_COMPILING_IN_PYPY) || (defined(PyByteArray_AS_STRING) && defined(PyByteArray_GET_SIZE))
    if (PyByteArray_Check(o)) {
        *length = PyByteArray_GET_SIZE(o);
        return PyByteArray_AS_STRING(o);
    } else
#endif
    {
        char* result;
        int r = PyBytes_AsStringAndSize(o, &result, length);
        if (unlikely(r < 0)) {
            return NULL;
        } else {
            return result;
        }
    }
}
static CYTHON_INLINE int __Pyx_PyObject_IsTrue(PyObject* x) {
   int is_true = x == Py_True;
   if (is_true | (x == Py_False) | (x == Py_None)) return is_true;
   else return PyObject_IsTrue(x);
}
static CYTHON_INLINE PyObject* __Pyx_PyNumber_Int(PyObject* x) {
  PyNumberMethods *m;
  const char *name = NULL;
  PyObject *res = NULL;
#if PY_MAJOR_VERSION < 3
  if (PyInt_Check(x) || PyLong_Check(x))
#else
  if (PyLong_Check(x))
#endif
    return __Pyx_NewRef(x);
  m = Py_TYPE(x)->tp_as_number;
#if PY_MAJOR_VERSION < 3
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Int(x);
  }
  else if (m && m->nb_long) {
    name = "long";
    res = PyNumber_Long(x);
  }
#else
  if (m && m->nb_int) {
    name = "int";
    res = PyNumber_Long(x);
  }
#endif
  if (res) {
#if PY_MAJOR_VERSION < 3
    if (!PyInt_Check(res) && !PyLong_Check(res)) {
#else
    if (!PyLong_Check(res)) {
#endif
      PyErr_Format(PyExc_TypeError,
                   "__%.4s__ returned non-%.4s (type %.200s)",
                   name, name, Py_TYPE(res)->tp_name);
      Py_DECREF(res);
      return NULL;
    }
  }
  else if (!PyErr_Occurred()) {
    PyErr_SetString(PyExc_TypeError,
                    "an integer is required");
  }
  return res;
}
static CYTHON_INLINE Py_ssize_t __Pyx_PyIndex_AsSsize_t(PyObject* b) {
  Py_ssize_t ival;
  PyObject *x;
#if PY_MAJOR_VERSION < 3
  if (likely(PyInt_CheckExact(b))) {
    if (sizeof(Py_ssize_t) >= sizeof(long))
        return PyInt_AS_LONG(b);
    else
        return PyInt_AsSsize_t(x);
  }
#endif
  if (likely(PyLong_CheckExact(b))) {
    #if CYTHON_USE_PYLONG_INTERNALS
    const digit* digits = ((PyLongObject*)b)->ob_digit;
    const Py_ssize_t size = Py_SIZE(b);
    if (likely(__Pyx_sst_abs(size) <= 1)) {
        ival = likely(size) ? digits[0] : 0;
        if (size == -1) ival = -ival;
        return ival;
    } else {
      switch (size) {
         case 2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -2:
           if (8 * sizeof(Py_ssize_t) > 2 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -3:
           if (8 * sizeof(Py_ssize_t) > 3 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case 4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return (Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
         case -4:
           if (8 * sizeof(Py_ssize_t) > 4 * PyLong_SHIFT) {
             return -(Py_ssize_t) (((((((((size_t)digits[3]) << PyLong_SHIFT) | (size_t)digits[2]) << PyLong_SHIFT) | (size_t)digits[1]) << PyLong_SHIFT) | (size_t)digits[0]));
           }
           break;
      }
    }
    #endif
    return PyLong_AsSsize_t(b);
  }
  x = PyNumber_Index(b);
  if (!x) return -1;
  ival = PyInt_AsSsize_t(x);
  Py_DECREF(x);
  return ival;
}
static CYTHON_INLINE PyObject * __Pyx_PyInt_FromSize_t(size_t ival) {
    return PyInt_FromSize_t(ival);
}


#endif /* Py_PYTHON_H */
